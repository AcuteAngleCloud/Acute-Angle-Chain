digraph "IsSmallObject&lt; _Tp &gt;"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node3 [label="IsSmallObject\< _Tp \>",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid"];
  Node4 [label="std::integral_constant\l\< bool, sizeof(_Tp)\<=\l(sizeof(void *) *3) &&std\l::alignment_of\< void * \>\l::value % std::alignment_of\l\< _Tp \>::value==0 &&std::is\l_nothrow_move_constructible\<\l _Tp \>::value \> \{\};template\< class\l T \> bool containsType(std::any const\l  &a) \{ return a.has_value() &&std::\lany_cast\< T \>(&a) !=nullptr;\} template\l\< class Type \> bool isSmallType() \{ return\l IsSmallObject\< Type \>::value;\} template\<\l class LastType=int \> void assertEmpty(std\l::any const  &a) \{ using namespace std;assert\l(!a.has_value());RTTI_ASSERT(a.type()==typeid\l(void));assert(any_cast\< LastType const  \>(&a)\l==nullptr);\} template\< class Type \> constexpr auto\l has_value_member(int) -\> decltypestd::declval\< Type & \>value",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node5 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid"];
  Node5 [label="true",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
}
