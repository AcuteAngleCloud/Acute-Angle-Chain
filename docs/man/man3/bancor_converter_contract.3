.TH "bancor::converter_contract< ConverterCurrency, FirstCurrency, SecondCurrency >" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
bancor::converter_contract< ConverterCurrency, FirstCurrency, SecondCurrency >
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBconnector\fP"
.br
.ti -1c
.RI "struct \fBconverter_args\fP"
.br
.ti -1c
.RI "struct \fBconverter_state\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef ConverterCurrency \fBconverter_currency\fP"
.br
.ti -1c
.RI "typedef FirstCurrency \fBfirst_currency\fP"
.br
.ti -1c
.RI "typedef SecondCurrency \fBsecond_currency\fP"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBon_convert\fP (const typename converter_currency::transfer &trans, const \fBconverter_args\fP &args, \fBconverter_state\fP &state)"
.br
.ti -1c
.RI "template<typename ConnectorType > static void \fBon_convert\fP (const typename ConnectorType::currency_type::transfer &trans, const \fBconverter_args\fP &args, \fBconverter_state\fP &state)"
.br
.ti -1c
.RI "template<typename CurrencyType > static void \fBstart_convert\fP (const typename CurrencyType::transfer_memo &trans)"
.br
.ti -1c
.RI "static void \fBon\fP (const typename converter_currency::transfer_memo &trans)"
.br
.ti -1c
.RI "template<typename Currency > static void \fBon\fP (const typename Currency::transfer_memo &trans)"
.br
.ti -1c
.RI "static void \fBapply\fP (account_name code, action_name \fBaction\fP)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const account_name \fBconverter_account\fP = converter_currency::code"
.br
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "template<typename ConverterCurrency , typename FirstCurrency , typename SecondCurrency > static void \fBbancor::converter_contract\fP< ConverterCurrency, FirstCurrency, SecondCurrency >::on (const typename converter_currency::transfer_memo & trans)\fC [inline]\fP, \fC [static]\fP"
converter_account first needs to call the currency handler to perform user-to-user transfers of the converter token, then if a transfer is sending the token back to the converter contract, it should convert like everything else\&.
.PP
This method should be called from apply( code, action ) for each of the transfer types that we support (for each currency) 
.SS "template<typename ConverterCurrency , typename FirstCurrency , typename SecondCurrency > template<typename Currency > static void \fBbancor::converter_contract\fP< ConverterCurrency, FirstCurrency, SecondCurrency >::on (const typename Currency::transfer_memo & trans)\fC [inline]\fP, \fC [static]\fP"
All other currencies simply call start_convert if to == converter_account 
.SS "template<typename ConverterCurrency , typename FirstCurrency , typename SecondCurrency > static void \fBbancor::converter_contract\fP< ConverterCurrency, FirstCurrency, SecondCurrency >::on_convert (const typename converter_currency::transfer & trans, const \fBconverter_args\fP & args, \fBconverter_state\fP & state)\fC [inline]\fP, \fC [static]\fP"
This is called when we receive RELAY tokens from user and wish to convert to one of the connector currencies\&. 
.SS "template<typename ConverterCurrency , typename FirstCurrency , typename SecondCurrency > template<typename ConnectorType > static void \fBbancor::converter_contract\fP< ConverterCurrency, FirstCurrency, SecondCurrency >::on_convert (const typename ConnectorType::currency_type::transfer & trans, const \fBconverter_args\fP & args, \fBconverter_state\fP & state)\fC [inline]\fP, \fC [static]\fP"
This is called when the converter receives one of the connector currencies and it will send either converter tokens or a different connector currency in response\&. convert to converter 
.SS "template<typename ConverterCurrency , typename FirstCurrency , typename SecondCurrency > template<typename CurrencyType > static void \fBbancor::converter_contract\fP< ConverterCurrency, FirstCurrency, SecondCurrency >::start_convert (const typename CurrencyType::transfer_memo & trans)\fC [inline]\fP, \fC [static]\fP"
This method factors out the boiler plate for parsing args and loading the initial state before dispatching to the proper on_convert case 

.SH "Author"
.PP 
Generated automatically by Doxygen for AcuteAngleChain from the source code\&.
