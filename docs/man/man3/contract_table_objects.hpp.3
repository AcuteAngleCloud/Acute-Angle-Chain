.TH "libraries/chain/include/aacio/chain/contracts/contract_table_objects.hpp" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libraries/chain/include/aacio/chain/contracts/contract_table_objects.hpp
.SH SYNOPSIS
.br
.PP
\fC#include <aacio/chain/contracts/types\&.hpp>\fP
.br
\fC#include <aacio/chain/multi_index_includes\&.hpp>\fP
.br
\fC#include <softfloat\&.hpp>\fP
.br
\fC#include <chainbase/chainbase\&.hpp>\fP
.br
\fC#include <array>\fP
.br
\fC#include <type_traits>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBaacio::chain::contracts::table_id_object\fP"
.br
.RI "The \fBtable_id_object\fP class tracks the mapping of (scope, code, table) to an opaque identifier\&. "
.ti -1c
.RI "struct \fBaacio::chain::contracts::key_value_object\fP"
.br
.ti -1c
.RI "struct \fBaacio::chain::contracts::secondary_index< SecondaryKey, ObjectTypeId, SecondaryKeyLess >\fP"
.br
.ti -1c
.RI "struct \fBaacio::chain::contracts::secondary_index< SecondaryKey, ObjectTypeId, SecondaryKeyLess >::index_object\fP"
.br
.ti -1c
.RI "struct \fBaacio::chain::contracts::soft_double_less\fP"
.br
.ti -1c
.RI "struct \fBaacio::chain::config::billable_size< contracts::table_id_object >\fP"
.br
.ti -1c
.RI "struct \fBaacio::chain::config::billable_size< contracts::key_value_object >\fP"
.br
.ti -1c
.RI "struct \fBaacio::chain::config::billable_size< contracts::index64_object >\fP"
.br
.ti -1c
.RI "struct \fBaacio::chain::config::billable_size< contracts::index128_object >\fP"
.br
.ti -1c
.RI "struct \fBaacio::chain::config::billable_size< contracts::index256_object >\fP"
.br
.ti -1c
.RI "struct \fBaacio::chain::config::billable_size< contracts::index_double_object >\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "using \fBaacio::chain::contracts::table_id_multi_index\fP = chainbase::shared_multi_index_container< table_id_object, indexed_by< ordered_unique< tag< by_id >, member< table_id_object, table_id_object::id_type, &table_id_object::id > >, ordered_unique< tag< by_code_scope_table >, composite_key< table_id_object, member< table_id_object, account_name, &table_id_object::code >, member< table_id_object, scope_name, &table_id_object::scope >, member< table_id_object, table_name, &table_id_object::table > > > > >"
.br
.ti -1c
.RI "using \fBaacio::chain::contracts::table_id\fP = table_id_object::id_type"
.br
.ti -1c
.RI "using \fBaacio::chain::contracts::key_value_index\fP = chainbase::shared_multi_index_container< key_value_object, indexed_by< ordered_unique< tag< by_id >, member< key_value_object, key_value_object::id_type, &key_value_object::id > >, ordered_unique< tag< by_scope_primary >, composite_key< key_value_object, member< key_value_object, table_id, &key_value_object::t_id >, member< key_value_object, uint64_t, &key_value_object::primary_key > >, composite_key_compare< std::less< table_id >, std::less< uint64_t > > > > >"
.br
.ti -1c
.RI "typedef secondary_index< uint64_t, index64_object_type >::index_object \fBaacio::chain::contracts::index64_object\fP"
.br
.ti -1c
.RI "typedef secondary_index< uint64_t, index64_object_type >::index_index \fBaacio::chain::contracts::index64_index\fP"
.br
.ti -1c
.RI "typedef secondary_index< uint128_t, index128_object_type >::index_object \fBaacio::chain::contracts::index128_object\fP"
.br
.ti -1c
.RI "typedef secondary_index< uint128_t, index128_object_type >::index_index \fBaacio::chain::contracts::index128_index\fP"
.br
.ti -1c
.RI "typedef std::array< uint128_t, 2 > \fBaacio::chain::contracts::key256_t\fP"
.br
.ti -1c
.RI "typedef secondary_index< key256_t, index256_object_type >::index_object \fBaacio::chain::contracts::index256_object\fP"
.br
.ti -1c
.RI "typedef secondary_index< key256_t, index256_object_type >::index_index \fBaacio::chain::contracts::index256_index\fP"
.br
.ti -1c
.RI "typedef secondary_index< uint64_t, index_double_object_type, soft_double_less >::index_object \fBaacio::chain::contracts::index_double_object\fP"
.br
.ti -1c
.RI "typedef secondary_index< uint64_t, index_double_object_type, soft_double_less >::index_index \fBaacio::chain::contracts::index_double_index\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBCopyright:\fP
.RS 4
defined in AcuteAngleChain/LICENSE\&.txt 
.RE
.PP

.SH "Typedef Documentation"
.PP 
.SS "typedef secondary_index<uint64_t,index_double_object_type,soft_double_less>::index_object \fBaacio::chain::contracts::index_double_object\fP"
This index supports a deterministic software implementation of double as the secondary key\&.
.PP
The software double implementation is using the Berkeley softfloat library (release 3)\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for AcuteAngleChain from the source code\&.
