.TH "faq" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
faq \- FAQ 

.SS "Dependency Management"
.PP
.SS "Can WebSocket++ be used without Boost?"
.PP
Yes\&. WebSocket++ only uses Boost features as polyfills for C++11 language features and libraries\&. If you have a C++11 compiler and standard library you can use WebSocket++ without Boost\&. In most cases setting your build environment to use the C++11 (or later) language dialect is sufficient to enable this mode of use\&.
.PP
With less common compilers (and sometimes very recently release compilers) there may be specific issues with certain libraries that aren't automatically detected by the library\&. For these situations there are additional defines available to fine tune which C++11 libraries and features are used\&. TODO: more details about them\&.
.PP
For the iostream/raw transport the C++11 standard library is sufficient\&. For the Asio based transports, there is no C++11 library that provides the networking capabilaties that Asio does\&. As such even with a C++11 build system, you will need a standalone copy of Asio to use if Boost Asio is not available\&.
.PP
.SS "Can WebSocket++ be used with standalone Asio"
.PP
Yes\&. The process is the same as used with standalone Asio itself\&. Define \fCASIO_STANDALONE\fP before including Asio or WebSocket++ headers\&. You will need to download a copy of the Asio headers separately (http://www.think-async.com) and make sure they are in your build system's include path\&.
.PP
.SS "Can WebSocket++ be used without TLS or OpenSSL?"
.PP
Yes\&. When using the iostream/raw transport, there are no TLS features and OpenSSL is not required\&. When using the Asio transport TLS features are optional\&. You only need OpenSSL if you want to use TLS\&. You can only make or recieve encrypted connections (https/wss) if you have enabled TLS features\&.
.PP
Whether an Asio endpoint uses TLS or not is determined by its config template parameter\&. The default bundled \fC\fBwebsocketpp::config::asio\fP\fP and \fC\fBwebsocketpp::config::asio_client\fP\fP configs do not support TLS, the \fC\fBwebsocketpp::config::asio_tls\fP\fP and \fC\fBwebsocketpp::config::asio_tls_client\fP\fP do\&.
.PP
The \fC<\fBwebsocketpp/config/asio\&.hpp\fP>\fP and \fC<\fBwebsocketpp/config/asio_client\&.hpp\fP>\fP headers will include both the TLS and non-TLS varients of their respective configs and require the presence of OpenSSL\&. The \fC<\fBwebsocketpp/config/asio_no_tls\&.hpp\fP>\fP and \fC<\fBwebsocketpp/config/asio_no_tls_client\&.hpp\fP>\fP headers will include only the non-TLS configs and do not require OpenSSL\&.
.PP
.SS "Compression"
.PP
.SS "How do I use permessage-deflate in version 0\&.6\&.0-permessagedeflate and 0\&.7\&.0?"
.PP
These versions of the library require a custom config to use the permessage-deflate extension\&. Here is a minimal example of such a custom config\&. You can also integrate these lines into an existing custom config\&.
.PP
Note that in these versions there is no fine grained control over which connections are compressed or not\&. Clients will request compression with the default settings and use it if the server supports it\&. Servers will accept whatever parameters clients request\&.
.PP
Outgoing messages by default will be compressed if compression was auto-negotiated during the handshake\&. There is an option to force a specific message to be sent uncompressed even if compression was negotiated\&. This may be useful for sending data that you know to be compressed already (images, zip files, etc)\&.
.PP
\fBServer Example\fP 
.PP
.nf
#include <websocketpp/extensions/permessage_deflate/enabled\&.hpp>

struct deflate_server_config : public websocketpp::config::asio {
    // \&.\&.\&. additional custom config if you need it for other things

    struct permessage_deflate_config {};

    typedef websocketpp::extensions::permessage_deflate::enabled
        <permessage_deflate_config> permessage_deflate_type;
};

typedef websocketpp::server<deflate_server_config> server_endpoint_type;

.fi
.PP
.PP
\fBClient Example\fP 
.PP
.nf
#include <websocketpp/extensions/permessage_deflate/enabled\&.hpp>

struct deflate_client_config : public websocketpp::config::asio_client {
    // \&.\&.\&. additional custom config if you need it for other things

    struct permessage_deflate_config {};

    typedef websocketpp::extensions::permessage_deflate::enabled
        <permessage_deflate_config> permessage_deflate_type;
};

typedef websocketpp::client<deflate_client_config> client_endpoint_type;

.fi
.PP
.PP
.SS "Security"
.PP
.SS "Is it possible to terminate a malicious connection quickly, without tying up resources performing clean close steps,"
.PP
Yes\&. The library will automatically detect and terminate connections that violate the WebSocket protocol\&. In cases where the library believes the remote endpoint to be malicious or sufficiently broken to be unlikely to understand or process the closing handshake, it will be omited\&.
.PP
If your application detects conditions above the protocol level that you believe to be malicious, for example, if you recognize an IP from a known denial of service attack, you can close the connection with two different levels of urgency\&. Use the standard \fCwebsocketpp::endpoint::close\fP or \fC\fBwebsocketpp::connection::close\fP\fP methods with one of the following special close codes:
.IP "\(bu" 2
\fCwebsocketpp::close::status::omit_handshake\fP: Omits the closing handshake, but cleanly closes the TCP connection\&.
.IP "\(bu" 2
\fCwebsocketpp::close::status::force_tcp_drop\fP: Forcibly drop the TCP connection\&.
.PP
.PP
Please note that usage of these disconnect methods results in a violation of the WebSocket protocol and may have negative reprocusions for the remote endpoint with respect to network timeouts\&. Please use caution when using them\&.
.PP
.SS "Build Issues"
.PP
.SS "Getting compile errors related to \fCstd::chrono\fP, \fCboost::chrono\fP, \fCwaitable_timer\fP, or \fCsteady_clock\fP"
.PP
Your build system may be confused about whether it is supposed to be using \fCboost::chrono\fP or \fCstd::chrono\fP\&. Boost automatically detects this setup on some compilers but not others\&. Defining \fCBOOST_ASIO_HAS_STD_CHRONO\fP can help\&. See http://www.boost.org/doc/libs/1_60_0/doc/html/boost_asio/overview/cpp2011/chrono.html for more details\&. 
