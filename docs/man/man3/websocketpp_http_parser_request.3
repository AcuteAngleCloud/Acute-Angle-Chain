.TH "websocketpp::http::parser::request" 3 "Sun Jun 3 2018" "Acute-Angle-Chain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
websocketpp::http::parser::request \- Stores, parses, and manipulates HTTP requests\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <request\&.hpp>\fP
.PP
Inherits \fBwebsocketpp::http::parser::parser\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBrequest\fP \fBtype\fP"
.br
.ti -1c
.RI "typedef lib::shared_ptr< \fBtype\fP > \fBptr\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "size_t \fBconsume\fP (char const *buf, size_t len)"
.br
.RI "Process bytes in the input buffer\&. "
.ti -1c
.RI "bool \fBready\fP () const"
.br
.RI "Returns whether or not the request is ready for reading\&. "
.ti -1c
.RI "std::string \fBraw\fP () const"
.br
.RI "Returns the full raw request (including the body) "
.ti -1c
.RI "std::string \fBraw_head\fP () const"
.br
.RI "Returns the raw request headers only (similar to an HTTP HEAD request) "
.ti -1c
.RI "void \fBset_method\fP (std::string const &method)"
.br
.RI "Set the HTTP method\&. Must be a valid HTTP token\&. "
.ti -1c
.RI "std::string const  & \fBget_method\fP () const"
.br
.RI "Return the request method\&. "
.ti -1c
.RI "void \fBset_uri\fP (std::string const &\fBuri\fP)"
.br
.RI "Set the HTTP uri\&. Must be a valid HTTP uri\&. "
.ti -1c
.RI "std::string const  & \fBget_uri\fP () const"
.br
.RI "Return the requested URI\&. "
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Stores, parses, and manipulates HTTP requests\&. 

http::request provides the following functionality for working with HTTP requests\&.
.PP
.IP "\(bu" 2
Initialize request via manually setting each element
.IP "\(bu" 2
Initialize request via reading raw bytes and parsing
.IP "\(bu" 2
Once initialized, access individual parsed elements
.IP "\(bu" 2
Once initialized, read entire request as raw bytes 
.PP

.SH "Member Function Documentation"
.PP 
.SS "size_t websocketpp::http::parser::request::consume (char const * buf, size_t len)\fC [inline]\fP"

.PP
Process bytes in the input buffer\&. Process up to len bytes from input buffer buf\&. Returns the number of bytes processed\&. Bytes left unprocessed means bytes left over after the final header delimiters\&.
.PP
Consume is a streaming processor\&. It may be called multiple times on one request and the full headers need not be available before processing can begin\&. If the end of the request was reached during this call to consume the ready flag will be set\&. Further calls to consume once ready will be ignored\&.
.PP
Consume will throw an http::exception in the case of an error\&. Typical error reasons include malformed requests, incomplete requests, and max header size being reached\&.
.PP
\fBParameters:\fP
.RS 4
\fIbuf\fP \fBPointer\fP to byte buffer 
.br
\fIlen\fP Size of byte buffer 
.RE
.PP
\fBReturns:\fP
.RS 4
Number of bytes processed\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Acute-Angle-Chain from the source code\&.
