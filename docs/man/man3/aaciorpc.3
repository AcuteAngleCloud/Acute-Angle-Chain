.TH "aaciorpc" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
aaciorpc \- Describes how to interface with aacd over HTTP RPC\&.  

.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 
Describes how to interface with aacd over HTTP RPC\&. 


.SH "Table Of Contents"
.PP
.IP "\(bu" 2
\fCConfiguration\fP
.IP "\(bu" 2
\fCChain API\fP
.IP "  \(bu" 4
\fCget_info\fP
.IP "  \(bu" 4
\fCget_block\fP
.IP "  \(bu" 4
\fCget_account\fP
.IP "  \(bu" 4
\fCget_code\fP
.IP "  \(bu" 4
\fCget_table_rows\fP
.IP "  \(bu" 4
\fCabi_json_to_bin\fP
.IP "  \(bu" 4
\fCabi_bin_to_json\fP
.IP "  \(bu" 4
\fCpush_transaction\fP
.IP "  \(bu" 4
\fCpush_transactions\fP
.IP "  \(bu" 4
\fCget_required_keys\fP
.PP

.IP "\(bu" 2
\fCWallet API\fP
.IP "  \(bu" 4
\fCwallet_create\fP
.IP "  \(bu" 4
\fCwallet_open\fP
.IP "  \(bu" 4
\fCwallet_lock\fP
.IP "  \(bu" 4
\fCwallet_lock_all\fP
.IP "  \(bu" 4
\fCwallet_import_key\fP
.IP "  \(bu" 4
\fCwallet_list\fP
.IP "  \(bu" 4
\fCwallet_list_keys\fP
.IP "  \(bu" 4
\fCwallet_get_public_keys\fP
.IP "  \(bu" 4
\fCwallet_set_timeout\fP
.IP "  \(bu" 4
\fCwallet_sign_trx\fP
.PP

.PP
.SH "Configuration"
.PP
\fCaacd\fP uses a REST RPC interface where plugins can register their own endpoints with the API server\&. This page will explain how to use some of the APIs to get information about the blockchain and send transactions\&.
.PP
Before you can query \fCaacd\fP you must first enable the necessary API plugin(s)\&. Depending on which API you want to enable, add the following line to your \fCaacd\fP's \fCconfig\&.ini\fP: 
.PP
.nf
plugin = aacio::chain_api_plugin // Enable Chain API
plugin = aacio::wallet_api_plugin // Enable Wallet API

.fi
.PP
 Alternatively, for Wallet API, you can also have the wallet functionality separate from \fCaacd\fP, by running \fCaac-walletd\fP separately\&.
.PP
For the following guide, we will assume that we have \fCaacd\fP running on \fC127\&.0\&.0\&.1:8888\fP (Chain API Plugin enabled, Wallet API Plugin disabled) and \fCaac-walletd\fP running on \fC127\&.0\&.0\&.1:8889\fP\&. 
.PP
.SH "Chain API"
.PP
.SS "get_info"
Get latest information related to a node
.SS "Example get_info Usage"
.PP
.nf
curl http://127\&.0\&.0\&.1:8888/v1/chain/get_info
.fi
.PP
.SS "Example get_info Result"
.PP
.nf
{
  "server_version": "b2eb1667",
  "head_block_num": 259590,
  "last_irreversible_block_num": 259573,
  "head_block_id": "0003f60677f3707f0704f16177bf5f007ebd45eb6efbb749fb1c468747f72046",
  "head_block_time": "2017-12-10T17:05:36",
  "head_block_producer": "initp",
  "recent_slots": "1111111111111111111111111111111111111111111111111111111111111111",
  "participation_rate": "1\&.00000000000000000"
}
.fi
.PP
.SS "get_block"
Get information related to a block\&.
.SS "Example get_block Usage"
.PP
.nf
$ curl  http://127\&.0\&.0\&.1:8888/v1/chain/get_block -X POST -d '{"block_num_or_id":5}'
$ curl  http://127\&.0\&.0\&.1:8888/v1/chain/get_block -X POST -d '{"block_num_or_id":0000000445a9f27898383fd7de32835d5d6a978cc14ce40d9f327b5329de796b}'
.fi
.PP
.SS "Example get_block Result"
.PP
.nf
{
  "previous": "0000000445a9f27898383fd7de32835d5d6a978cc14ce40d9f327b5329de796b",
  "timestamp": "2017-07-18T20:16:36",
  "transaction_merkle_root": "0000000000000000000000000000000000000000000000000000000000000000",
  "producer": "initf",
  "producer_changes": [ ],
  "producer_signature": "204cb94b3186c3b4a7f88be4e9db9f8af2ffdb7ef0f27a065c8177a5fcfacf876f684e59c39fb009903c0c59220b147bb07f1144df1c65d26c57b534a76dd29073",
  "cycles": [ ],
  "id":"000000050c0175cbf218a70131ddc3c3fab8b6e954edef77e0bfe7c36b599b1d",
  "block_num":5,
  "ref_block_prefix":27728114
}
.fi
.PP
.SS "get_account"
Get information related to an account\&.
.SS "Example get_account Usage"
.PP
.nf
$ curl  http://127\&.0\&.0\&.1:8888/v1/chain/get_account -X POST -d '{"account_name":"inita"}'
.fi
.PP
.SS "Example get_account Result"
.PP
.nf
{
  "name": "inita",
  "aac_balance": "999998\&.9574 AAC",
  "staked_balance": "0\&.0000 AAC",
  "unstaking_balance": "0\&.0000 AAC",
  "last_unstaking_time": "2106-02-07T06:28:15",
  "permissions": [
    {
      "name": "active",
      "parent": "owner",
      "required_auth": {
        "threshold": 1,
        "keys": [
          {
            "key": "AAC84snobCGtpQvTTfVaxvMuxGDd4p2LhtQhbWX1yWAU5yt4tiB55",
            "weight": 1
          }
        ],
        "accounts": []
      }
    },
    {
      "name": "owner",
      "parent": "owner",
      "required_auth": {
        "threshold": 1,
        "keys": [
          {
            "key": "AAC84snobCGtpQvTTfVaxvMuxGDd4p2LhtQhbWX1yWAU5yt4tiB55",
            "weight": 1
          }
        ],
        "accounts": []
      }
    }
  ]
}
.fi
.PP
.SS "get_code"
Fetch smart contract code\&.
.SS "Example get_code Usage"
.PP
.nf
$ curl  http://127\&.0\&.0\&.1:8888/v1/chain/get_code -X POST -d '{"account_name":"currency"}'
.fi
.PP
.SS "Example get_code Result"
.PP
.nf
{
  "name":"currency",
  "code_hash":"a1c8c84b4700c09c8edb83522237439e33cf011a4d7ace51075998bd002e04c9",
  "wast":"(module\n  (type $0 (func (param i64 i64 i32) (result i32)))\n \&.\&.\&.truncated",
  "abi": {
  "types": [{
      "new_type_name": "account_name",
      "type": "name"
    }
  ],
  "structs": [{
      "name": "transfer",
      "base": "",
      "fields": [
        {"name":"from", "type":"account_name"},
        {"name":"to", "type":"account_name"},
        {"name":"quantity", "type":"uint64"}
      ]
    },{
      "name": "account",
      "base": "",
      "fields": [
        {"name":"key", "type":"name"},
        {"name":"balance", "type":"uint64"}
      ]
    }
  ],
  "actions": [{
      "name": "transfer",
      "type": "transfer"
    }
  ],
  "tables": [{
      "name": "account",
      "type": "account",
      "index_type": "i64",
      "key_names" : ["key"],
      "key_types" : ["name"]
    }
  ]
}
.fi
.PP
.SS "get_table_rows"
Fetch smart contract data from an account\&.
.SS "get_table_rows Usage"
.PP
.nf
$ curl  http://127\&.0\&.0\&.1:8888/v1/chain/get_table_rows -X POST -d '{"scope":"inita", "code":"currency", "table":"account", "json": true}'
$ curl  http://127\&.0\&.0\&.1:8888/v1/chain/get_table_rows -X POST -d '{"scope":"inita", "code":"currency", "table":"account", "json": true, "lower_bound":0, "upper_bound":-1, "limit":10}'
.fi
.PP
.SS "Example get_table_rows Result"
.PP
.nf
{
  "rows": [
    {
      "account": "account",
      "balance": 1000
    }
  ],
  "more": false
}
.fi
.PP
.SS "abi_json_to_bin"
Serialize json to binary hex\&. The resulting binary hex is usually used for the data field in \fCpush_transaction\fP\&.
.SS "Example abi_json_to_bin Usage"
.PP
.nf
$ curl  http://127\&.0\&.0\&.1:8888/v1/chain/abi_json_to_bin -X POST -d '{"code":"currency", "action":"transfer", "args":{"from":"initb", "to":"initc", "quantity":1000}}'
.fi
.PP
.SS "Example abi_json_to_bin Result"
.PP
.nf
{
  "binargs": "000000008093dd74000000000094dd74e803000000000000",
  "required_scope": [],
  "required_auth": []
}
.fi
.PP
.SS "abi_bin_to_json"
Serialize back binary hex to json\&.
.SS "Example abi_bin_to_json Usage"
.PP
.nf
$ curl  http://127\&.0\&.0\&.1:8888/v1/chain/abi_bin_to_json -X POST -d '{"code":"currency", "action":"transfer", "binargs":"000000008093dd74000000000094dd74e803000000000000"}'
.fi
.PP
.SS "Example abi_bin_to_json Result"
.PP
.nf
{
  "args": {
    "from": "initb",
    "to": "initc",
    "quantity": 1000
  },
  "required_scope": [],
  "required_auth": []
}
.fi
.PP
.SS "push_transaction"
This method expects a transaction in JSON format and will attempt to apply it to the blockchain,
.PP
\fBSuccess Response\fP 
.PP
On success it will return HTTP 200 and the transaction ID\&. 
.PP
.PP
.nf
{
  'transaction_id' : "\&.\&.\&."
}
.fi
.PP
.PP
Just because the transaction is pushed locally does not mean that the transaction has been incorporated into a block\&.
.PP
\fBError Response\fP 
.PP
If an error occurs it will return either HTTP 400 (Invalid arguments) or 500 (Internal Server Error) 
.PP
.PP
.nf
HTTP/1\&.1 500 Internal Server Error
Content-Length: 1466

\&.\&.\&.error message\&.\&.\&.
.fi
.PP
.SS "Example push_transaction Usage"
This example assumes a transfer operation\&. The \fCref_block_num\fP and \fCref_block_prefix\fP here are provided as a result of \fC/v1/chain/get_block\fP of the last_irreversible_block\&. You also need to use /v1/wallet/sign_transaction to get the right signature\&. 
.PP
.nf
curl  http://localhost:8888/v1/chain/push_transaction -X POST -d '{"ref_block_num":"100","ref_block_prefix":"137469861","expiration":"2017-09-25T06:28:49","scope":["initb","initc"],"actions":[{"code":"currency","type":"transfer","recipients":["initb","initc"],"authorization":[{"account":"initb","permission":"active"}],"data":"000000000041934b000000008041934be803000000000000"}],"signatures":[],"authorizations":[]}'

.fi
.PP
.SS "push_transactions"
This method push multiple transactions at once\&.
.SS "Example push_transactions Usage"
.PP
.nf
curl  http://localhost:8888/v1/chain/push_transaction -X POST -d '[{"ref_block_num":"101","ref_block_prefix":"4159312339","expiration":"2017-09-25T06:28:49","scope":["initb","initc"],"actions":[{"code":"currency","type":"transfer","recipients":["initb","initc"],"authorization":[{"account":"initb","permission":"active"}],"data":"000000000041934b000000008041934be803000000000000"}],"signatures":[],"authorizations":[]}, {"ref_block_num":"101","ref_block_prefix":"4159312339","expiration":"2017-09-25T06:28:49","scope":["inita","initc"],"actions":[{"code":"currency","type":"transfer","recipients":["inita","initc"],"authorization":[{"account":"inita","permission":"active"}],"data":"000000008040934b000000008041934be803000000000000"}],"signatures":[],"authorizations":[]}]'
.fi
.PP
.SS "get_required_keys"
Get required keys to sign a transaction from list of your keys\&.
.SS "Example get_required_keys Usage"
.PP
.nf
curl  http://localhost:8888/v1/chain/get_required_keys -X POST -d '{"transaction": {"ref_block_num":"100","ref_block_prefix":"137469861","expiration":"2017-09-25T06:28:49","scope":["initb","initc"],"actions":[{"code":"currency","type":"transfer","recipients":["initb","initc"],"authorization":[{"account":"initb","permission":"active"}],"data":"000000000041934b000000008041934be803000000000000"}],"signatures":[],"authorizations":[]}, "available_keys":["AAC4toFS3YXEQCkuuw1aqDLrtHim86Gz9u3hBdcBw5KNPZcursVHq","AAC7d9A3uLe6As66jzN8j44TXJUqJSK3bFjjEEqR4oTvNAB3iM9SA","AAC84snobCGtpQvTTfVaxvMuxGDd4p2LhtQhbWX1yWAU5yt4tiB55"]}'
.fi
.PP
.SS "Example get_required_keys Result"
.PP
.nf
{
  "required_keys": [
    "AAC84snobCGtpQvTTfVaxvMuxGDd4p2LhtQhbWX1yWAU5yt4tiB55"
  ]
}
.fi
.PP
.SH "Wallet API"
.PP
.SS "wallet_create"
Create a new wallet with the given name
.SS "Example wallet_create Usage"
.PP
.nf
$ curl http://localhost:8889/v1/wallet/create -X POST -d '"default"'
.fi
.PP
.SS "Example wallet_create Result"
This command will return the password that can be used to unlock the wallet in the future 
.PP
.nf
PW5KFWYKqvt63d4iNvedfDEPVZL227D3RQ1zpVFzuUwhMAJmRAYyX

.fi
.PP
.SS "wallet_open"
Open an existing wallet of the given name
.SS "Example wallet_open Usage"
.PP
.nf
$ curl http://localhost:8889/v1/wallet/open -X POST -d '"default"'
.fi
.PP
.SS "Example wallet_open Result"
.PP
.nf
{}
.fi
.PP
.SS "wallet_lock"
Lock a wallet of the given name
.SS "Example wallet_lock Usage"
.PP
.nf
$ curl http://localhost:8889/v1/wallet/lock -X POST -d '"default"'
.fi
.PP
.SS "Example wallet_lock Result"
.PP
.nf
{}
.fi
.PP
.SS "wallet_lock_all"
Lock all wallets
.SS "Example wallet_lock_all Usage"
.PP
.nf
$ curl http://localhost:8889/v1/wallet/lock_all 
.fi
.PP
.SS "Example wallet_lock_all Result"
.PP
.nf
{}
.fi
.PP
.SS "wallet_unlock"
Unlock a wallet with the given name and password
.SS "Example wallet_unlock Usage"
.PP
.nf
$ curl http://localhost:8889/v1/wallet/unlock -X POST -d '["default", "PW5KFWYKqvt63d4iNvedfDEPVZL227D3RQ1zpVFzuUwhMAJmRAYyX"]'
.fi
.PP
.SS "Example wallet_unlock Result"
.PP
.nf
{}
.fi
.PP
.SS "wallet_import_key"
Import a private key to the wallet of the given name
.SS "Example wallet_import_key Usage"
.PP
.nf
$ curl http://localhost:8889/v1/wallet/import_key -X POST -d '["default","5Jgm1N6jp3iNbFM45kPtj66xmbqT9fSuVJgPWfnCSPgQanvW6mJ"]'
.fi
.PP
.SS "Example wallet_import_key Result"
.PP
.nf
{}
.fi
.PP
.SS "wallet_list"
List all wallets
.SS "Example wallet_list Usage"
.PP
.nf
$ curl http://localhost:8889/v1/wallet/list_wallets
.fi
.PP
.SS "Example wallet_list Result"
.PP
.nf
["default *"]
.fi
.PP
.SS "wallet_list_keys"
List all key pairs across all wallets
.SS "Example wallet_list_keys Usage"
.PP
.nf
$ curl http://localhost:8889/v1/wallet/list_keys
.fi
.PP
.SS "Example wallet_list_keys Result"
.PP
.nf
[["AAC84snobCGtpQvTTfVaxvMuxGDd4p2LhtQhbWX1yWAU5yt4tiB55","5Jgm1N6jp3iNbFM45kPtj66xmbqT9fSuVJgPWfnCSPgQanvW6mJ"]]
.fi
.PP
.SS "wallet_get_public_keys"
List all public keys across all wallets
.SS "Example wallet_get_public_keys Usage"
.PP
.nf
$ curl http://localhost:8889/v1/wallet/get_public_keys 
.fi
.PP
.SS "Example wallet_get_public_keys Result"
.PP
.nf
["AAC84snobCGtpQvTTfVaxvMuxGDd4p2LhtQhbWX1yWAU5yt4tiB55"]
.fi
.PP
.SS "wallet_set_timeout"
Set wallet auto lock timeout (in seconds)
.SS "Example wallet_set_timeout Usage"
.PP
.nf
$ curl http://localhost:8889/v1/wallet/set_timeout -X POST -d '10'
.fi
.PP
.SS "Example wallet_set_timeout Result"
.PP
.nf
{}
.fi
.PP
.SS "wallet_sign_trx"
Sign transaction given an array of transaction, require public keys, and chain id
.SS "Example wallet_sign_trx Usage"
.PP
.nf
$ curl http://localhost:8889/v1/wallet/sign_transaction -X POST -d '[{"ref_block_num":21453,"ref_block_prefix":3165644999,"expiration":"2017-12-08T10:28:49","scope":["initb","initc"],"read_scope":[],"messages":[{"code":"currency","type":"transfer","authorization":[{"account":"initb","permission":"active"}],"data":"000000008093dd74000000000094dd74e803000000000000"}],"signatures":[]}, ["AAC84snobCGtpQvTTfVaxvMuxGDd4p2LhtQhbWX1yWAU5yt4tiB55"], ""]'
.fi
.PP
.SS "Example wallet_sign_trx Result"
.PP
.nf
{
  "ref_block_num": 21453,
  "ref_block_prefix": 3165644999,
  "expiration": "2017-12-08T10:28:49",
  "scope": [
    "initb",
    "initc"
  ],
  "read_scope": [],
  "messages": [
    {
      "code": "currency",
      "type": "transfer",
      "authorization": [
        {
          "account": "initb",
          "permission": "active"
        }
      ],
      "data": "000000008093dd74000000000094dd74e803000000000000"
    }
  ],
  "signatures": [
    "1f393cc5ce6a6951fb53b11812345bcf14ffd978b07be386fd639eaf440bca7dca16b14833ec661ca0703d15e55a2a599a36d55ce78c4539433f6ce8bcee0158c3"
  ]
}
.fi
.PP
 
.SH "Author"
.PP 
Generated automatically by Doxygen for AcuteAngleChain from the source code\&.
