.TH "md_externals_binaryen__r_e_a_d_m_e" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_externals_binaryen__r_e_a_d_m_e \- README 
\fC\fP \fC\fP
.PP
.SH "Binaryen"
.PP
.PP
Binaryen is a compiler and toolchain infrastructure library for WebAssembly, written in C++\&. It aims to make \fCcompiling to WebAssembly\fP \fBeasy, fast, and effective\fP:
.PP
.IP "\(bu" 2
\fBEasy\fP: Binaryen has a simple \fCC API\fP in a single header\&. It accepts input in \fCWebAssembly-like form\fP but also accepts a general \fCcontrol flow graph\fP for compilers that prefer that\&.
.IP "\(bu" 2
\fBFast\fP: Binaryen's internal IR uses compact data structures and is designed for completely parallel codegen and optimization, using all available CPU cores\&. Binaryen's IR also compiles down to WebAssembly extremely easily and quickly because it is essentially a subset of WebAssembly\&.
.IP "\(bu" 2
\fBEffective\fP: Binaryen's optimizer has \fCmany passes\fP that can improve code very significantly (e\&.g\&. local coloring to coalesce local variables; dead code elimination; precomputing expressions when possible at compile time; etc\&.)\&. These optimizations aim to make Binaryen powerful enough to be \fCused as a compiler backend by itself\fP\&. \fBOne\fP specific area of focus is on WebAssembly-specific optimizations (that general-purpose compilers might not do), which you can think of as \fCwasm minification\fP, similar to minification for JavaScript, CSS, etc\&., all of which are language-specific (an example of such an optimization is block return value generation in \fCSimplifyLocals\fP)\&.
.PP
.PP
Compilers built using Binaryen include
.PP
.IP "\(bu" 2
\fC\fCasm2wasm\fP\fP which compiles asm\&.js
.IP "\(bu" 2
\fC\fCs2wasm\fP\fP which compiles the LLVM WebAssembly's backend \fC\&.s\fP output format
.IP "\(bu" 2
\fC\fCmir2wasm\fP\fP which compiles Rust MIR
.PP
.PP
Those compilers generate Binaryen IR which can then be optimized and emitted as WebAssembly (the first two use the internal C++ API, the last the \fBC\fP API)\&.
.PP
Binaryen also provides a set of \fBtoolchain utilities\fP that can
.PP
.IP "\(bu" 2
\fBParse\fP and \fBemit\fP WebAssembly\&. In particular this lets you load WebAssembly, optimize it using Binaryen, and re-emit it, thus implementing a wasm-to-wasm optimizer\&.
.IP "\(bu" 2
\fBInterpret\fP WebAssembly as well as run the WebAssembly spec tests\&.
.IP "\(bu" 2
Integrate with \fB\fCEmscripten\fP\fP in order to provide a complete compiler toolchain from \fBC\fP and C++ to WebAssembly\&.
.IP "\(bu" 2
\fBPolyfill\fP WebAssembly by running it in the interpreter compiled to JavaScript, if the browser does not yet have native support (useful for testing)\&.
.PP
.PP
Consult the \fBcontributing instructions\fP if you're interested in participating\&.
.PP
.SS "Binaryen IR"
.PP
Binaryen's internal IR is an AST, designed to be
.PP
.IP "\(bu" 2
\fBFlexible and fast\fP for optimization\&.
.IP "\(bu" 2
\fBAs close as possible to WebAssembly\fP so it is simple and fast to convert it to and from WebAssembly\&.
.PP
.PP
The differences between Binaryen IR and WebAssembly are:
.PP
.IP "\(bu" 2
Binaryen IR \fCis an AST\fP, for convenience of optimization\&. This differs from the WebAssembly binary format which is a stack machine\&.
.IP "\(bu" 2
WebAssembly limits block/if/loop types to none and the concrete value types (i32, i64, f32, f64)\&. Binaryen IR has an unreachable type, and it allows block/if/loop to take it, allowing \fClocal transforms that don't need to know the global context\fP\&.
.IP "\(bu" 2
Binaryen IR's text format requires the names of blocks and loops to be unique\&. This differs from the WebAssembly s-expression format which allows duplicate names (and depends on scoping to disambiguate)\&.
.PP
.PP
As a result, you might notice that round-trip conversions (wasm => Binaryen IR => wasm) change code a little in some corner cases\&.
.PP
.SS "Tools"
.PP
This repository contains code that builds the following tools in \fCbin/\fP:
.PP
.IP "\(bu" 2
\fBwasm-shell\fP: \fBA\fP shell that can load and interpret WebAssembly code\&. It can also run the spec test suite\&.
.IP "\(bu" 2
\fBwasm-as\fP: Assembles WebAssembly in text format (currently S-Expression format) into binary format (going through Binaryen IR)\&.
.IP "\(bu" 2
\fBwasm-dis\fP: Un-assembles WebAssembly in binary format into text format (going through Binaryen IR)\&.
.IP "\(bu" 2
\fBwasm-opt\fP: Loads WebAssembly and runs Binaryen IR passes on it\&.
.IP "\(bu" 2
\fBasm2wasm\fP: An asm\&.js-to-WebAssembly compiler, using Emscripten's asm optimizer infrastructure\&. This is used by Emscripten in Binaryen mode when it uses Emscripten's fastcomp asm\&.js backend\&.
.IP "\(bu" 2
\fBs2wasm\fP: \fBA\fP compiler from the \fC\&.s\fP format emitted by the new WebAssembly backend being developed in LLVM\&. This is used by Emscripten in Binaryen mode when it integrates with the new LLVM backend\&.
.IP "\(bu" 2
\fBwasm\&.js\fP: wasm\&.js contains Binaryen components compiled to JavaScript, including the interpreter, \fCasm2wasm\fP, the S-Expression parser, etc\&., which allow you to use Binaryen with Emscripten and execute code compiled to WASM even if the browser doesn't have native support yet\&. This can be useful as a (slow) polyfill\&.
.IP "\(bu" 2
\fBbinaryen\&.js\fP: \fBA\fP standalone JavaScript library that exposes Binaryen methods for \fCcreating and optimizing WASM modules\fP\&.
.PP
.PP
Usage instructions for each are below\&.
.PP
.SS "Building"
.PP
.PP
.nf
cmake \&. && make
.fi
.PP
 Note that you can also use \fCninja\fP as your generator: \fCcmake -G Ninja \&. && ninja\fP
.PP
.IP "\(bu" 2
\fBA\fP C++11 compiler is required\&.
.IP "\(bu" 2
The JavaScript components can be built using \fCbuild-js\&.sh\fP, see notes inside\&. Normally this is not needed as builds are provided in this repo already\&.
.PP
.PP
If you also want to compile C/C++ to WebAssembly (and not just asm\&.js to WebAssembly), you'll need Emscripten\&. You'll need the \fCincoming\fP branch there (which you can get via \fCthe SDK\fP), for more details see \fCthe wiki\fP\&.
.PP
.SS "Running"
.PP
.SS "wasm-opt"
.PP
Run
.PP
.PP
.nf
bin/wasm-opt [\&.wast file] [options] [passes, see --help] [--help]
.fi
.PP
.PP
The wasm optimizer receives a \&.wast file as input, and can run transformation passes on it, as well as print it (before and/or after the transformations)\&. For example, try
.PP
.PP
.nf
bin/wasm-opt test/passes/lower-if-else\&.wast --print
.fi
.PP
.PP
That will pretty-print out one of the test cases in the test suite\&. To run a transformation pass on it, try
.PP
.PP
.nf
bin/wasm-opt test/passes/lower-if-else\&.wast --print --lower-if-else
.fi
.PP
.PP
The \fClower-if-else\fP pass lowers if-else into a block and a break\&. You can see the change the transformation causes by comparing the output of the two print commands\&.
.PP
It's easy to add your own transformation passes to the shell, just add \fC\&.cpp\fP files into \fCsrc/passes\fP, and rebuild the shell\&. For example code, take a look at the \fC\fClower-if-else\fP pass\fP\&.
.PP
Some more notes:
.PP
.IP "\(bu" 2
See \fCbin/wasm-opt --help\fP for the full list of options and passes\&.
.IP "\(bu" 2
Passing \fC--debug\fP will emit some debugging info\&.
.PP
.PP
.SS "asm2wasm"
.PP
run
.PP
.PP
.nf
bin/asm2wasm [input\&.asm\&.js file]
.fi
.PP
.PP
This will print out a WebAssembly module in s-expression format to the console\&.
.PP
For example, try
.PP
.PP
.nf
$ bin/asm2wasm test/hello_world\&.asm\&.js
.fi
.PP
.PP
That input file contains
.PP
.PP
.nf
function () {
  "use asm";
  function add(x, y) {
    x = x | 0;
    y = y | 0;
    return x + y | 0;
  }
  return { add: add };
}
.fi
.PP
.PP
You should see something like this:
.PP
.PP
By default you should see pretty colors as in that image\&. Set \fCCOLORS=0\fP in the env to disable colors if you prefer that\&. On Linux and Mac, you can set \fCCOLORS=1\fP in the env to force colors (useful when piping to \fCmore\fP, for example)\&. For Windows, pretty colors are only available when \fCstdout/stderr\fP are not redirected/piped\&.
.PP
Pass \fC--debug\fP on the command line to see debug info, about asm\&.js functions as they are parsed, etc\&.
.PP
.SS "C/C++ Source ⇒ asm2wasm ⇒ WebAssembly"
.PP
When using \fCemcc\fP with the \fCBINARYEN\fP option, it will use Binaryen to build to WebAssembly\&. This lets you compile \fBC\fP and C++ to WebAssembly, with emscripten using asm\&.js internally as a build step\&. Since emscripten's asm\&.js generation is very stable, and asm2wasm is a fairly simple process, this method of compiling \fBC\fP and C++ to WebAssembly is usable already\&. See the \fCemscripten wiki\fP for more details about how to use it\&.
.PP
.SS "C/C++ Source ⇒ WebAssembly LLVM backend ⇒ s2wasm ⇒ WebAssembly"
.PP
Binaryen's \fCs2wasm\fP tool can translate the \fC\&.s\fP output from the LLVM WebAssembly backend into WebAssembly\&. You can receive \fC\&.s\fP output from \fCllc\fP, and then run \fCs2wasm\fP on that:
.PP
.PP
.nf
llc code\&.ll -march=wasm32 -filetype=asm -o code\&.s
s2wasm code\&.s > code\&.wast
.fi
.PP
.PP
You can also use Emscripten, which will do those steps for you (as well as link to system libraries, etc\&.)\&. You can use either normal Emscripten, including it's 'fastcomp' fork of LLVM, or you can use 'vanilla' LLVM, that is, pure upstream LLVM without Emscripten's additions\&. With Vanilla LLVM, you can build with
.PP
.PP
.nf
\&./emcc input\&.cpp -s BINARYEN=1
.fi
.PP
.PP
With normal Emscripten, you will need to tell it to use the WebAssembly backend, since its default is asm\&.js, by setting an env var,
.PP
.PP
.nf
EMCC_WASM_BACKEND=1 \&./emcc input\&.cpp -s BINARYEN=1
.fi
.PP
.PP
(without the env var, the \fCBINARYEN\fP option will make it use the asm\&.js backend, then \fCasm2wasm\fP)\&.
.PP
For more details, see the \fCemscripten wiki\fP\&.
.PP
.SS "Testing"
.PP
.PP
.nf
\&./check\&.py
.fi
.PP
.PP
(or \fCpython check\&.py\fP) will run \fCwasm-shell\fP, \fCwasm-opt\fP, \fCasm2wasm\fP, \fCwasm\&.js\fP, etc\&. on the testcases in \fCtest/\fP, and verify their outputs\&.
.PP
It will also run \fCs2wasm\fP through the last known good LLVM output from the \fCbuild waterfall\fP\&.
.PP
The \fCcheck\&.py\fP script supports some options:
.PP
.PP
.nf
\&./check\&.py [--interpreter=/path/to/interpreter] [TEST1] [TEST2]\&.\&.
.fi
.PP
.PP
.IP "\(bu" 2
If an interpreter is provided, we run the output through it, checking for parse errors\&.
.IP "\(bu" 2
If tests are provided, we run exactly those\&. If none are provided, we run them all\&.
.IP "\(bu" 2
Some tests require \fCemcc\fP or \fCnodejs\fP in the path\&. They will not run if the tool cannot be found, and you'll see a warning\&.
.IP "\(bu" 2
We have tests from upstream in \fCtests/spec\fP and \fCtests/waterfall\fP, in git submodules\&. Running \fC\&./check\&.py\fP should update those\&.
.PP
.PP
.SS "Design Principles"
.PP
.IP "\(bu" 2
\fBInterned strings for names\fP: It's very convenient to have names on nodes, instead of just numeric indices etc\&. To avoid most of the performance difference between strings and numeric indices, all strings are interned, which means there is a single copy of each string in memory, string comparisons are just a pointer comparison, etc\&.
.IP "\(bu" 2
\fBAllocate in arenas\fP: Based on experience with other optimizing/transformating toolchains, it's not worth the overhead to carefully track memory of individual nodes\&. Instead, we allocate all elements of a module in an arena, and the entire arena can be freed when the module is no longer needed\&.
.PP
.PP
.SS "FAQ"
.PP
.IP "\(bu" 2
How does \fCasm2wasm\fP relate to the new WebAssembly backend which is being developed in upstream LLVM?
.PP
.PP
This is separate from that\&. \fCasm2wasm\fP focuses on compiling asm\&.js to WebAssembly, as emitted by Emscripten's asm\&.js backend\&. This is useful because while in the long term Emscripten hopes to use the new WebAssembly backend, the \fCasm2wasm\fP route is a very quick and easy way to generate WebAssembly output\&. It will also be useful for benchmarking the new backend as it progresses\&.
.PP
.IP "\(bu" 2
How about compiling WebAssembly to asm\&.js (the opposite direction of \fCasm2wasm\fP)? Wouldn't that be useful for polyfilling?
.PP
.PP
Experimentation with this is happening, in \fCwasm2asm\fP\&.
.PP
This would be useful, but it is a much harder task, due to some decisions made in WebAssembly\&. For example, WebAssembly can have control flow nested inside expressions, which can't directly map to asm\&.js\&. It could be supported by outlining the code to another function, or to compiling it down into new basic blocks and control-flow-free instructions, but it is hard to do so in a way that is both fast to do and emits code that is fast to execute\&. On the other hand, compiling asm\&.js to WebAssembly is almost straightforward\&.
.PP
We just have to do more work on \fCwasm2asm\fP and see how efficient we can make it\&.
.PP
.IP "\(bu" 2
Can \fCasm2wasm\fP compile any asm\&.js code?
.PP
.PP
Almost\&. Some decisions made in WebAssembly preclude that, for example, there are no global variables\&. That means that \fCasm2wasm\fP has to map asm\&.js global variables onto locations in memory, but then it must know of a safe zone in memory in which to do so, and that information is not directly available in asm\&.js\&.
.PP
\fCasm2wasm\fP and \fCemcc_to_wasm\&.js\&.sh\fP do some integration with Emscripten in order to work around these issues, like asking Emscripten to reserve same space for the globals, etc\&.
.PP
.IP "\(bu" 2
Why the weird name for the project?
.PP
.PP
'Binaryen' is a combination of \fBbinary\fP - since WebAssembly is a binary format for the web - and \fBEmscripten\fP - with which it can integrate in order to compile \fBC\fP and C++ all the way to WebAssembly, via asm\&.js\&. Binaryen began as Emscripten's WebAssembly processing library (\fCwasm-emscripten\fP)\&.
.PP
'Binaryen' is pronounced \fCin the same manner\fP as '[Targaryen](https://en\&.wikipedia\&.org/wiki/List_of_A_Song_of_Ice_and_Fire_characters#House_Targaryen)': \fIbi-NAIR-ee-in\fP\&. Or something like that? Anyhow, however Targaryen is correctly pronounced, they should rhyme\&. Aside from pronunciation, the Targaryen house words, 'Fire and Blood', have also inspired Binaryen's: 'Code and Bugs\&.'
.PP
.IP "\(bu" 2
Does it compile under Windows and/or Visual Studio?
.PP
.PP
Yes, it does\&. Here's a step-by-step \fBhttps:\fP//github\&.com/brakmic/brakmic/blob/master/webassembly/COMPILING_WIN32\&.md 'tutorial' on how to compile it under \fBWindows 10 x64\fP with \fBCMake\fP and \fBVisual Studio 2015\fP\&. Help would be appreciated on Windows and OS \fBX\fP as most of the core devs are on Linux\&. 
