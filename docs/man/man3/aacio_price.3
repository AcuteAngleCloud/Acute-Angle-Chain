.TH "aacio::price< BaseToken, QuoteToken >" 3 "Sun Jun 3 2018" "Acute-Angle-Chain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
aacio::price< BaseToken, QuoteToken > \- Defines a fixed precision price between two tokens\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <token\&.hpp>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef BaseToken \fBbase_token_type\fP"
.br
.ti -1c
.RI "typedef QuoteToken \fBquote_token_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBprice\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "\fBprice\fP (uint128_t b)"
.br
.ti -1c
.RI "\fBprice\fP & \fBoperator=\fP (uint128_t b)"
.br
.ti -1c
.RI "\fBprice\fP (BaseToken \fBbase\fP, QuoteToken quote)"
.br
.RI "Construction for price given the base token and quote token\&. "
.ti -1c
.RI "\fBoperator uint128_t\fP () const"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const uint64_t \fBprecision\fP = 1000ll*1000ll*1000ll*1000ll*1000ll"
.br
.RI "Precision of the price\&. "
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "QuoteToken \fBoperator/\fP (BaseToken b, const \fBprice\fP &q)"
.br
.RI "Operator returns a quote token given a base token and the conversion price\&. "
.ti -1c
.RI "BaseToken \fBoperator*\fP (const QuoteToken &b, const \fBprice\fP &q)"
.br
.RI "Operator returns a base token given a quote token and the conversion price\&. "
.ti -1c
.RI "bool \fBoperator<=\fP (const \fBprice\fP &a, const \fBprice\fP &b)"
.br
.RI "Less than or equal to comparison operator\&. "
.ti -1c
.RI "bool \fBoperator<\fP (const \fBprice\fP &a, const \fBprice\fP &b)"
.br
.RI "Less than comparison operator\&. "
.ti -1c
.RI "bool \fBoperator>=\fP (const \fBprice\fP &a, const \fBprice\fP &b)"
.br
.RI "Greater than or equal to comparison operator\&. "
.ti -1c
.RI "bool \fBoperator>\fP (const \fBprice\fP &a, const \fBprice\fP &b)"
.br
.RI "Greater than comparison operator\&. "
.ti -1c
.RI "bool \fBoperator==\fP (const \fBprice\fP &a, const \fBprice\fP &b)"
.br
.RI "Equality comparison operator\&. "
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBprice\fP &a, const \fBprice\fP &b)"
.br
.RI "Inequality comparison operator\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename BaseToken, typename QuoteToken>
.br
struct aacio::price< BaseToken, QuoteToken >"
Defines a fixed precision price between two tokens\&. 


.PP
\fBTemplate Parameters:\fP
.RS 4
\fIBaseToken\fP - represents the type of the base token 
.br
\fIQuoteToken\fP - represents the type of the quote token
.RE
.PP
Defines a fixed precision price between two tokens\&. \fBA\fP price is written as \fBX\fP Base/Quote\&. Where \fBX\fP is a power of 10 which makes it simpler to just shift the decimal\&. It supports the following operator: /, \\, <=, <, ==, !=, >=, > and also print functionality
.PP
Example: 
.PP
.nf
typedef aacio::token<uint64_t, N(MyBaseToken)> MyBaseToken;
typedef aacio::token<uint64_t, N(MyQuoteToken)> MyQuoteToken;
typedef price<MyBaseToken, MyQuoteToken> MyBaseToQuotePrice;
MyBaseToken zeroBaseToken;
MyQuoteToken zeroQuoteToken;
MyBaseToQuotePrice zeroBaseToQuote(zeroBaseToken, zeroQuoteToken); // throws invalid price exception
MyBaseToken baseToken(128);
MyQuoteToken quoteToken(128);
MyBaseToQuotePrice aPrice(baseToken, quoteToken);
aPrice\&.print(); // Output: 1e+15\&. MyBaseToken / MyQuoteToken
MyQuoteToken anotherQuote = baseToken / price;
std::cout << (anotherQuote == quoteToken); // Output: true
MyBaseToken anotherBase = quoteToken * price;
std::cout << (anotherBase == baseToken); // Output: true
MyBaseToQuotePrice anotherPrice(baseToken, quoteToken);
std::cout << (aPrice == anotherPrice); // Output: true
std::cout << (aPrice != anotherPrice); // Output: false
MyBaseToken base256(256);
MyBaseToQuotePrice price2(base256, quoteToken);
std::cout << (price2 > aPrice); // Output: true
std::cout << (aPrice < price2); // Output: true

.fi
.PP
 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename BaseToken, typename QuoteToken> \fBaacio::price\fP< BaseToken, QuoteToken >::\fBprice\fP ()\fC [inline]\fP"

.PP
Default constructor\&. Default constructor\&. Initialize base per quote to be 1\&. 
.SS "template<typename BaseToken, typename QuoteToken> \fBaacio::price\fP< BaseToken, QuoteToken >::\fBprice\fP (BaseToken base, QuoteToken quote)\fC [inline]\fP"

.PP
Construction for price given the base token and quote token\&. Construction for price given the base token and quote token\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbase\fP - base token 
.br
\fIquote\fP - quote token 
.RE
.PP

.SH "Friends And Related Function Documentation"
.PP 
.SS "template<typename BaseToken, typename QuoteToken> bool operator!= (const \fBprice\fP< BaseToken, QuoteToken > & a, const \fBprice\fP< BaseToken, QuoteToken > & b)\fC [friend]\fP"

.PP
Inequality comparison operator\&. Inequality comparison operator\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP price to be compared 
.br
\fIb\fP price to be compared 
.RE
.PP
\fBReturns:\fP
.RS 4
true if base per quote of a is not equal to base per quote of b 
.RE
.PP

.SS "template<typename BaseToken, typename QuoteToken> BaseToken operator* (const QuoteToken & b, const \fBprice\fP< BaseToken, QuoteToken > & q)\fC [friend]\fP"

.PP
Operator returns a base token given a quote token and the conversion price\&. Operator returns a base token given a quote token and the conversion price\&. 
.PP
\fBParameters:\fP
.RS 4
\fIb\fP - quote token 
.br
\fIq\fP - price 
.RE
.PP
\fBReturns:\fP
.RS 4
base token 
.RE
.PP

.SS "template<typename BaseToken, typename QuoteToken> QuoteToken operator/ (BaseToken b, const \fBprice\fP< BaseToken, QuoteToken > & q)\fC [friend]\fP"

.PP
Operator returns a quote token given a base token and the conversion price\&. Operator returns a quote token given a base token and the conversion price\&. 
.PP
\fBParameters:\fP
.RS 4
\fIb\fP - base token 
.br
\fIq\fP - price 
.RE
.PP
\fBReturns:\fP
.RS 4
quote token 
.RE
.PP

.SS "template<typename BaseToken, typename QuoteToken> bool operator< (const \fBprice\fP< BaseToken, QuoteToken > & a, const \fBprice\fP< BaseToken, QuoteToken > & b)\fC [friend]\fP"

.PP
Less than comparison operator\&. Less than comparison operator\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP price to be compared 
.br
\fIb\fP price to be compared 
.RE
.PP
\fBReturns:\fP
.RS 4
true if base per quote of a is less than base per quote of b 
.RE
.PP

.SS "template<typename BaseToken, typename QuoteToken> bool operator<= (const \fBprice\fP< BaseToken, QuoteToken > & a, const \fBprice\fP< BaseToken, QuoteToken > & b)\fC [friend]\fP"

.PP
Less than or equal to comparison operator\&. Less than or equal to comparison operator\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP price to be compared 
.br
\fIb\fP price to be compared 
.RE
.PP
\fBReturns:\fP
.RS 4
true if base per quote of a is less than or equal to base per quote of b 
.RE
.PP

.SS "template<typename BaseToken, typename QuoteToken> bool operator== (const \fBprice\fP< BaseToken, QuoteToken > & a, const \fBprice\fP< BaseToken, QuoteToken > & b)\fC [friend]\fP"

.PP
Equality comparison operator\&. Equality comparison operator\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP price to be compared 
.br
\fIb\fP price to be compared 
.RE
.PP
\fBReturns:\fP
.RS 4
true if base per quote of a is equal to base per quote of b 
.RE
.PP

.SS "template<typename BaseToken, typename QuoteToken> bool operator> (const \fBprice\fP< BaseToken, QuoteToken > & a, const \fBprice\fP< BaseToken, QuoteToken > & b)\fC [friend]\fP"

.PP
Greater than comparison operator\&. Greater than comparison operator\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP price to be compared 
.br
\fIb\fP price to be compared 
.RE
.PP
\fBReturns:\fP
.RS 4
true if base per quote of a is greater than base per quote of b 
.RE
.PP

.SS "template<typename BaseToken, typename QuoteToken> bool operator>= (const \fBprice\fP< BaseToken, QuoteToken > & a, const \fBprice\fP< BaseToken, QuoteToken > & b)\fC [friend]\fP"

.PP
Greater than or equal to comparison operator\&. Greater than or equal to comparison operator\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP price to be compared 
.br
\fIb\fP price to be compared 
.RE
.PP
\fBReturns:\fP
.RS 4
true if base per quote of a is greater than or equal to base per quote of b 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "template<typename BaseToken, typename QuoteToken> const uint64_t \fBaacio::price\fP< BaseToken, QuoteToken >::precision = 1000ll*1000ll*1000ll*1000ll*1000ll\fC [static]\fP"

.PP
Precision of the price\&. The largest base 10 integer that can be represented with 53 bits of a double\&. This number keeps the math in range of JavaScript\&. By being a power of 10 it makes it easier for developers to read and interpret the integer by simply shifting the decimal\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Acute-Angle-Chain from the source code\&.
