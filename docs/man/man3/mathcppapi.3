.TH "mathcppapi" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mathcppapi \- Defines common math functions and helper types\&.  

.SH SYNOPSIS
.br
.PP
.SS "Modules"

.in +1c
.ti -1c
.RI "\fBFixed Point\fP"
.br
.RI "32,64,128,256 bits version of Fixed Point variables "
.ti -1c
.RI "\fBReal number\fP"
.br
.RI "Real number data type with basic operators\&. Wrap double class of Math \fBC\fP API\&. "
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBaacio::uint128\fP"
.br
.RI "\fBA\fP struct that wraps \fBuint128\fP integer and defines common operator overloads\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBaacio::multeq\fP (uint128_t &self, const uint128_t &\fBother\fP)"
.br
.RI "wraps multeq_i128 from \fBMath C API\fP "
.ti -1c
.RI "void \fBaacio::diveq\fP (uint128_t &self, const uint128_t &\fBother\fP)"
.br
.RI "wraps diveq_i128 from \fBMath C API\fP "
.ti -1c
.RI "template<typename T > \fBT\fP \fBaacio::min\fP (const \fBT\fP &a, const \fBT\fP &b)"
.br
.RI "Defined similar to \fBstd::min()\fP "
.ti -1c
.RI "template<typename T > \fBT\fP \fBaacio::max\fP (const \fBT\fP &a, const \fBT\fP &b)"
.br
.RI "Define similar to \fBstd::max()\fP "
.in -1c
.SH "Detailed Description"
.PP 
Defines common math functions and helper types\&. 


.SH "Function Documentation"
.PP 
.SS "void aacio::diveq (uint128_t & self, const uint128_t & other)\fC [inline]\fP"

.PP
wraps diveq_i128 from \fBMath C API\fP Divide two 128 bit unsigned integers and assign the value to the first parameter\&. It will throw an exception if other is zero\&. This wraps diveq_i128 from \fBMath C API\fP 
.PP
\fBParameters:\fP
.RS 4
\fIself\fP Numerator\&. It will be replaced with the result 
.br
\fIother\fP Denominator
.RE
.PP
Example: 
.PP
.nf
uint128_t self(100);
uint128_t other(100);
diveq(self, other);
std::cout << self; // Output: 1

.fi
.PP
 
.SS "template<typename T > \fBT\fP aacio::max (const \fBT\fP & a, const \fBT\fP & b)"

.PP
Define similar to \fBstd::max()\fP Get the greater of the given values\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP \fBValue\fP to compare 
.br
\fIb\fP \fBValue\fP to compare 
.RE
.PP
\fBReturns:\fP
.RS 4
The greater of a and b\&. If they are equivalent, returns a
.RE
.PP
Example: 
.PP
.nf
uint128_t a(1);
uint128_t b(2);
std::cout << max(a, b); // Output: 2

.fi
.PP
 
.SS "template<typename T > \fBT\fP aacio::min (const \fBT\fP & a, const \fBT\fP & b)"

.PP
Defined similar to \fBstd::min()\fP Get the smaller of the given values 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP \fBValue\fP to compare 
.br
\fIb\fP \fBValue\fP to compare 
.RE
.PP
\fBReturns:\fP
.RS 4
The smaller of a and b\&. If they are equivalent, returns a
.RE
.PP
Example: 
.PP
.nf
uint128_t a(1);
uint128_t b(2);
std::cout << min(a, b); // Output: 1

.fi
.PP
 
.SS "void aacio::multeq (uint128_t & self, const uint128_t & other)\fC [inline]\fP"

.PP
wraps multeq_i128 from \fBMath C API\fP Multiply two 128 bit unsigned integers and assign the value to the first parameter\&. This wraps multeq_i128 from \fBMath C API\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIself\fP \fBValue\fP to be multiplied\&. It will be replaced with the result 
.br
\fIother\fP \fBValue\fP integer to be multiplied\&.
.RE
.PP
Example: 
.PP
.nf
uint128_t self(100);
uint128_t other(100);
multeq(self, other);
std::cout << self; // Output: 10000

.fi
.PP
 
.SH "Author"
.PP 
Generated automatically by Doxygen for AcuteAngleChain from the source code\&.
