.TH "A< T >" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
A< T >
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBB< T >\fP, \fBB< T >\fP, \fBB< T >\fP, \fBB< T >\fP, \fBB< T >\fP, \fBB< T >\fP, \fBB< T >\fP, \fBB< T >\fP, \fBB< T >\fP, \fBB< T >\fP, \fBB< T >\fP, \fBB< T >\fP, \fBB< T >\fP, \fBB< T >\fP, \fBB< T >\fP, \fBB< T >\fP, \fBB< T >\fP, \fBB< T >\fP, \fBB< T >\fP, \fBB< T >\fP, \fBB< T >\fP, \fBB< T >\fP, \fBB< T >\fP, and \fBB< T >\fP\&.
.PP
Inherited by \fBA_base< A >\fP, and \fBA_base< A >\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBrebind\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBstd::map\fP< \fBA\fP, \fBA\fP > \fBMap\fP"
.br
.ti -1c
.RI "typedef \fBstd::multimap\fP< \fBA\fP, \fBA\fP > \fBMap\fP"
.br
.ti -1c
.RI "typedef \fBstd::multiset\fP< \fBA\fP > \fBSet\fP"
.br
.ti -1c
.RI "typedef \fBstd::set\fP< \fBA\fP > \fBSet\fP"
.br
.ti -1c
.RI "typedef \fBstd::unordered_map\fP< \fBA\fP, \fBA\fP, \fBMyHash\fP< \fBA\fP > > \fBMap\fP"
.br
.ti -1c
.RI "typedef \fBstd::unordered_multimap\fP< \fBA\fP, \fBA\fP, \fBMyHash\fP< \fBA\fP > > \fBMap\fP"
.br
.ti -1c
.RI "typedef \fBstd::unordered_multiset\fP< \fBA\fP, \fBMyHash\fP< \fBA\fP > > \fBMap\fP"
.br
.ti -1c
.RI "typedef \fBstd::unordered_set\fP< \fBA\fP, \fBMyHash\fP< \fBA\fP > > \fBMap\fP"
.br
.ti -1c
.RI "using \fBpromise_type\fP = \fBA\fP *"
.br
.ti -1c
.RI "using \fBpromise_type\fP = \fBA\fP *"
.br
.ti -1c
.RI "typedef \fBT\fP \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef \fBT\fP \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef \fBT\fP \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef \fBT\fP \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef \fBT\fP \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef \fBT\fP \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef \fBT\fP \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef \fBT\fP \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef \fBPtr\fP< \fBT\fP > \fBpointer\fP"
.br
.ti -1c
.RI "typedef \fBT\fP \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef \fBPtr\fP< \fBT\fP > \fBpointer\fP"
.br
.ti -1c
.RI "typedef \fBT\fP \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef short \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef \fBT\fP \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef std::true_type \fBis_always_equal\fP"
.br
.ti -1c
.RI "typedef \fBT\fP \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef \fBPtr\fP< \fBT\fP > \fBpointer\fP"
.br
.ti -1c
.RI "typedef \fBT\fP \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef std::true_type \fBpropagate_on_container_copy_assignment\fP"
.br
.ti -1c
.RI "typedef \fBT\fP \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef std::true_type \fBpropagate_on_container_move_assignment\fP"
.br
.ti -1c
.RI "typedef \fBT\fP \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef std::true_type \fBpropagate_on_container_swap\fP"
.br
.ti -1c
.RI "typedef \fBT\fP \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef \fBT\fP \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef unsigned short \fBsize_type\fP"
.br
.ti -1c
.RI "typedef \fBT\fP \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef \fBPtr\fP< \fBT\fP > \fBpointer\fP"
.br
.ti -1c
.RI "typedef \fBT\fP \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef \fBT\fP \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef \fBT\fP \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef short \fBelement_type\fP"
.br
.ti -1c
.RI "typedef char \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef \fBT\fP \fBelement_type\fP"
.br
.ti -1c
.RI "typedef short \fBelement_type\fP"
.br
.ti -1c
.RI "typedef char \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef char \fBelement_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBA\fP (int i, double d)"
.br
.ti -1c
.RI "int \fBgeti\fP () const"
.br
.ti -1c
.RI "double \fBgetd\fP () const"
.br
.ti -1c
.RI "\fBA\fP (char a)"
.br
.ti -1c
.RI "\fBoperator unsigned char\fP () const"
.br
.ti -1c
.RI "\fBA\fP (int i, double d)"
.br
.ti -1c
.RI "int \fBgeti\fP () const"
.br
.ti -1c
.RI "double \fBgetd\fP () const"
.br
.ti -1c
.RI "\fBA\fP (int i, double d)"
.br
.ti -1c
.RI "int \fBgeti\fP () const"
.br
.ti -1c
.RI "double \fBgetd\fP () const"
.br
.ti -1c
.RI "\fBA\fP (int i, double d)"
.br
.ti -1c
.RI "int \fBgeti\fP () const"
.br
.ti -1c
.RI "double \fBgetd\fP () const"
.br
.ti -1c
.RI "\fBA\fP (int i, double d)"
.br
.ti -1c
.RI "\fBA\fP (\fBA\fP &&a)"
.br
.ti -1c
.RI "\fBA\fP & \fBoperator=\fP (\fBA\fP &&a)"
.br
.ti -1c
.RI "int \fBgeti\fP () const"
.br
.ti -1c
.RI "double \fBgetd\fP () const"
.br
.ti -1c
.RI "\fBA\fP (int i, double d)"
.br
.ti -1c
.RI "\fBA\fP (\fBA\fP &&a)"
.br
.ti -1c
.RI "\fBA\fP & \fBoperator=\fP (\fBA\fP &&a)"
.br
.ti -1c
.RI "int \fBgeti\fP () const"
.br
.ti -1c
.RI "double \fBgetd\fP () const"
.br
.ti -1c
.RI "\fBA\fP (int id)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &a)"
.br
.ti -1c
.RI "int \fBid\fP () const"
.br
.ti -1c
.RI "\fBA\fP (int id)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &a)"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "char \fBa1\fP ()"
.br
.ti -1c
.RI "short \fBa2\fP (int i)"
.br
.ti -1c
.RI "int \fBa3\fP () const"
.br
.ti -1c
.RI "double \fBa4\fP (unsigned i) const"
.br
.ti -1c
.RI "bool \fBawait_ready\fP ()"
.br
.ti -1c
.RI "int \fBawait_resume\fP ()"
.br
.ti -1c
.RI "template<typename F > void \fBawait_suspend\fP (\fBF\fP)"
.br
.ti -1c
.RI "int \fBget\fP () const"
.br
.ti -1c
.RI "\fBA\fP (int data)"
.br
.ti -1c
.RI "\fBA\fP (int data)"
.br
.ti -1c
.RI "\fBA\fP (int data)"
.br
.ti -1c
.RI "\fBA\fP (int data)"
.br
.ti -1c
.RI "\fBA\fP (int data)"
.br
.ti -1c
.RI "\fBA\fP (int data)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (int data=0)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &a)"
.br
.ti -1c
.RI "\fBA\fP (int data=0)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &a)"
.br
.ti -1c
.RI "\fBA\fP (std::initializer_list< int > il)"
.br
.ti -1c
.RI "\fBA\fP (std::initializer_list< int > il)"
.br
.ti -1c
.RI "\fBA\fP (int i=0)"
.br
.ti -1c
.RI "\fBA\fP (std::nullptr_t)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)=delete"
.br
.ti -1c
.RI "\fBA\fP (\fBA\fP &&)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (long i)"
.br
.ti -1c
.RI "long \fBoperator()\fP (long i, long j) const"
.br
.ti -1c
.RI "\fBA\fP (long i)"
.br
.ti -1c
.RI "\fBA\fP (\fBA\fP &&a)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &a)"
.br
.ti -1c
.RI "long \fBoperator()\fP (long i, long j) const"
.br
.ti -1c
.RI "\fBA\fP (long i)"
.br
.ti -1c
.RI "\fBA\fP (\fBA\fP &&a)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &a)"
.br
.ti -1c
.RI "long \fBoperator()\fP (long i, long j) const"
.br
.ti -1c
.RI "\fBA\fP (long i)"
.br
.ti -1c
.RI "long \fBoperator()\fP (long i, long j) const"
.br
.ti -1c
.RI "\fBA\fP (long i)"
.br
.ti -1c
.RI "long \fBoperator()\fP (long i, long j) const"
.br
.ti -1c
.RI "\fBA\fP (long i)"
.br
.ti -1c
.RI "long \fBoperator()\fP (long i, long j) const"
.br
.ti -1c
.RI "\fBA\fP (long i)"
.br
.ti -1c
.RI "long \fBoperator()\fP (long i, long j) const"
.br
.ti -1c
.RI "\fBA\fP (long i)"
.br
.ti -1c
.RI "long \fBoperator()\fP (long i, long j) const"
.br
.ti -1c
.RI "\fBA\fP (long i)"
.br
.ti -1c
.RI "long \fBoperator()\fP (long i, long j) const"
.br
.ti -1c
.RI "\fBA\fP (long i)"
.br
.ti -1c
.RI "long \fBoperator()\fP (long i, long j) const"
.br
.ti -1c
.RI "\fBA\fP (long i)"
.br
.ti -1c
.RI "long \fBoperator()\fP (long i, long j) const"
.br
.ti -1c
.RI "char \fBtest0\fP ()"
.br
.ti -1c
.RI "char \fBtest1\fP (int)"
.br
.ti -1c
.RI "char \fBtest2\fP (int, double)"
.br
.ti -1c
.RI "char \fBtest0\fP () const"
.br
.ti -1c
.RI "char \fBtest1\fP (int) const"
.br
.ti -1c
.RI "char \fBtest2\fP (int, double) const"
.br
.ti -1c
.RI "char \fBtest0\fP () const volatile"
.br
.ti -1c
.RI "char \fBtest1\fP (int) const volatile"
.br
.ti -1c
.RI "char \fBtest2\fP (int, double) const volatile"
.br
.ti -1c
.RI "char \fBtest0\fP () volatile"
.br
.ti -1c
.RI "char \fBtest1\fP (int) volatile"
.br
.ti -1c
.RI "char \fBtest2\fP (int, double) volatile"
.br
.ti -1c
.RI "\fBA\fP (int j)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &a)"
.br
.ti -1c
.RI "int \fBoperator()\fP (int i) const"
.br
.ti -1c
.RI "int \fBid\fP () const"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "int \fBoperator()\fP (int i) const"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "int \fBoperator()\fP (int i) const"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "int \fBoperator()\fP (int i) const"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "int \fBoperator()\fP (int i) const"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "int \fBoperator()\fP (int i) const"
.br
.ti -1c
.RI "int \fBfoo\fP (int) const"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "int \fBoperator()\fP (int i) const"
.br
.ti -1c
.RI "int \fBfoo\fP (int) const"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "int \fBoperator()\fP (int i) const"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "int \fBoperator()\fP (int i) const"
.br
.ti -1c
.RI "int \fBfoo\fP (int) const"
.br
.ti -1c
.RI "\fBA\fP (int j)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &a)"
.br
.ti -1c
.RI "int \fBoperator()\fP (int i) const"
.br
.ti -1c
.RI "int \fBoperator()\fP () const"
.br
.ti -1c
.RI "int \fBoperator()\fP (int, int) const"
.br
.ti -1c
.RI "int \fBoperator()\fP (int, int, int) const"
.br
.ti -1c
.RI "int \fBid\fP () const"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "int \fBoperator()\fP (int i) const"
.br
.ti -1c
.RI "int \fBfoo\fP (int) const"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "int \fBoperator()\fP (int i) const"
.br
.ti -1c
.RI "int \fBfoo\fP (int) const"
.br
.ti -1c
.RI "\fBvalue_type\fP * \fBallocate\fP (std::size_t n)"
.br
.ti -1c
.RI "\fBvalue_type\fP * \fBallocate\fP (std::size_t n)"
.br
.ti -1c
.RI "void \fBdeallocate\fP (\fBvalue_type\fP *p, std::size_t n)"
.br
.ti -1c
.RI "\fBA\fP (int i=0)"
.br
.ti -1c
.RI "void \fBoperator &\fP () const"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (int)"
.br
.ti -1c
.RI "\fBA\fP (int, int *)"
.br
.ti -1c
.RI "\fBA\fP (element_type *t)"
.br
.ti -1c
.RI "void \fBoperator &\fP () const"
.br
.ti -1c
.RI "void \fBoperator &\fP () const"
.br
.ti -1c
.RI "\fBA\fP (int i)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &a)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (int i) const"
.br
.ti -1c
.RI "\fBA\fP (int i)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &a)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (int i) const"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (int i, char c)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &a)"
.br
.ti -1c
.RI "int \fBget_int\fP () const"
.br
.ti -1c
.RI "char \fBget_char\fP () const"
.br
.ti -1c
.RI "\fBA\fP (int i, char c)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &a)"
.br
.ti -1c
.RI "int \fBget_int\fP () const"
.br
.ti -1c
.RI "char \fBget_char\fP () const"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (int)"
.br
.ti -1c
.RI "\fBA\fP (int, double)"
.br
.ti -1c
.RI "\fBA\fP (char)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP & \fBoperator=\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP & \fBoperator=\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (int)"
.br
.ti -1c
.RI "\fBA\fP (int, double)"
.br
.ti -1c
.RI "\fBA\fP & \fBoperator=\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP & \fBoperator=\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "void \fBreset\fP ()"
.br
.ti -1c
.RI "int \fBget\fP () const"
.br
.ti -1c
.RI "\fBA\fP & \fBoperator=\fP (int i)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (int i)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &a)"
.br
.ti -1c
.RI "\fBA\fP & \fBoperator=\fP (const \fBA\fP &a)"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.ti -1c
.RI "\fBA\fP (\fBA\fP &&)"
.br
.ti -1c
.RI "\fBA\fP & \fBoperator=\fP (const \fBA\fP &)=delete"
.br
.ti -1c
.RI "\fBA\fP (int data=\-1)"
.br
.ti -1c
.RI "\fBA\fP (int i, char c)"
.br
.ti -1c
.RI "int \fBget_i\fP () const"
.br
.ti -1c
.RI "char \fBget_c\fP () const"
.br
.ti -1c
.RI "\fBA\fP (int data)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBA\fP &a) const"
.br
.ti -1c
.RI "\fBA\fP (const \fBA\fP &)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBA\fP \fBpointer_to\fP (typename std::conditional< std::is_void< element_type >::value, nat, element_type >::type &et)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBstd::deque\fP< \fBA\fP > \fBd\fP"
.br
.ti -1c
.RI "\fBstd::deque\fP< \fBA\fP >::iterator \fBit\fP"
.br
.ti -1c
.RI "\fBstd::deque\fP< \fBA\fP >::reverse_iterator \fBit2\fP"
.br
.ti -1c
.RI "char \fB_\fP [4]"
.br
.ti -1c
.RI "int \fBdata\fP"
.br
.ti -1c
.RI "\fBMap\fP \fBm\fP"
.br
.ti -1c
.RI "Map::iterator \fBit\fP"
.br
.ti -1c
.RI "Map::const_iterator \fBcit\fP"
.br
.ti -1c
.RI "\fBSet\fP \fBm\fP"
.br
.ti -1c
.RI "Set::iterator \fBit\fP"
.br
.ti -1c
.RI "Set::const_iterator \fBcit\fP"
.br
.ti -1c
.RI "std::forward_list< \fBA\fP > \fBd\fP"
.br
.ti -1c
.RI "std::forward_list< \fBA\fP >::iterator \fBit\fP"
.br
.ti -1c
.RI "std::forward_list< \fBA\fP >::const_iterator \fBit2\fP"
.br
.ti -1c
.RI "std::forward_list< \fBA\fP > \fBv\fP"
.br
.ti -1c
.RI "\fBstd::list\fP< \fBA\fP > \fBl\fP"
.br
.ti -1c
.RI "\fBstd::list\fP< \fBA\fP >::iterator \fBit\fP"
.br
.ti -1c
.RI "\fBstd::list\fP< \fBA\fP >::const_iterator \fBcit\fP"
.br
.ti -1c
.RI "\fBstd::list\fP< \fBA\fP >::reverse_iterator \fBrit\fP"
.br
.ti -1c
.RI "\fBstd::list\fP< \fBA\fP >::const_reverse_iterator \fBcrit\fP"
.br
.ti -1c
.RI "int \fBfirst\fP"
.br
.ti -1c
.RI "int \fBsecond\fP"
.br
.ti -1c
.RI "\fBstd::list\fP< \fBA\fP > \fBv\fP"
.br
.ti -1c
.RI "\fBstd::vector\fP< \fBA\fP > \fBv\fP"
.br
.ti -1c
.RI "Map::local_iterator \fBlit\fP"
.br
.ti -1c
.RI "Map::const_local_iterator \fBclit\fP"
.br
.ti -1c
.RI "int \fBx\fP"
.br
.ti -1c
.RI "double \fBdata_\fP"
.br
.ti -1c
.RI "int \fBid\fP"
.br
.ti -1c
.RI "element_type * \fBt_\fP"
.br
.ti -1c
.RI "int \fBn\fP"
.br
.ti -1c
.RI "std::unique_ptr< \fBA\fP > \fBptr_\fP"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static int \fBcount\fP = 0"
.br
.ti -1c
.RI "static int \fBconstructed\fP = 0"
.br
.ti -1c
.RI "static int \fBn_moves\fP = 0"
.br
.ti -1c
.RI "static int \fBn_copies\fP = 0"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "bool \fBoperator==\fP (const \fBA\fP &x, const \fBA\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBA\fP &x, const \fBA\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBA\fP &x, const \fBA\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBA\fP &x, const \fBA\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBA\fP &x, const \fBA\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBA\fP &x, const \fBA\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBA\fP &x, const \fBA\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBA\fP &x, const \fBA\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBA\fP &x, const \fBA\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBA\fP &x, const \fBA\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBA\fP &x, int y)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBA\fP &x, const \fBA\fP &y)"
.br
.in -1c

.SH "Author"
.PP 
Generated automatically by Doxygen for AcuteAngleChain from the source code\&.
