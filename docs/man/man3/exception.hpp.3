.TH "libraries/fc/include/fc/exception/exception.hpp" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libraries/fc/include/fc/exception/exception.hpp \- Defines exception's used by fc\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <fc/log/logger\&.hpp>\fP
.br
\fC#include <fc/optional\&.hpp>\fP
.br
\fC#include <exception>\fP
.br
\fC#include <functional>\fP
.br
\fC#include <unordered_map>\fP
.br
\fC#include <boost/core/typeinfo\&.hpp>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBfc::exception\fP"
.br
.RI "Used to generate a useful error report when an exception is thrown\&.
.PP
At each level in the stack where the exception is caught and rethrown a new \fBlog_message\fP is added to the exception\&. "
.ti -1c
.RI "class \fBfc::unhandled_exception\fP"
.br
.RI "re-thrown whenever an unhandled exception is caught\&.
.PP
Any exceptions thrown by 3rd party libraries that are not caught get wrapped in an \fBunhandled_exception\fP exception\&. "
.ti -1c
.RI "class \fBfc::exception_factory\fP"
.br
.ti -1c
.RI "struct \fBfc::exception_factory::base_exception_builder\fP"
.br
.ti -1c
.RI "struct \fBfc::exception_factory::exception_builder< T >\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBfc\fP"
.br
.RI "aacio::chain "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBFC_REGISTER_EXCEPTION\fP(r,  unused,  \fBbase\fP)   fc::exception_factory::instance()\&.register_exception<\fBbase\fP>();"
.br
.ti -1c
.RI "#define \fBFC_REGISTER_EXCEPTIONS\fP(SEQ)"
.br
.ti -1c
.RI "#define \fBFC_DECLARE_DERIVED_EXCEPTION\fP(TYPE,  BASE,  CODE,  WHAT)"
.br
.ti -1c
.RI "#define \fBFC_DECLARE_EXCEPTION\fP(TYPE,  CODE,  WHAT)   FC_DECLARE_DERIVED_EXCEPTION( TYPE, \fBfc::exception\fP, CODE, WHAT )"
.br
.ti -1c
.RI "#define \fBLIKELY\fP(x)   (x)"
.br
.ti -1c
.RI "#define \fBUNLIKELY\fP(x)   (x)"
.br
.ti -1c
.RI "#define \fBFC_EXPAND_MACRO\fP(x)   x"
.br
.RI ": Workaround for varying preprocessing behavior between MSVC and gcc "
.ti -1c
.RI "#define \fBFC_ASSERT\fP(TEST, \&.\&.\&.)"
.br
.RI "Checks a condition and throws an assert_exception if the test is FALSE\&. "
.ti -1c
.RI "#define \fBFC_CAPTURE_AND_THROW\fP(EXCEPTION_TYPE, \&.\&.\&.)"
.br
.ti -1c
.RI "#define \fBFC_INDIRECT_EXPAND\fP(MACRO,  ARGS)   MACRO ARGS"
.br
.ti -1c
.RI "#define \fBFC_THROW\fP( \&.\&.\&.)"
.br
.ti -1c
.RI "#define \fBFC_EXCEPTION\fP(EXCEPTION_TYPE,  FORMAT, \&.\&.\&.)   EXCEPTION_TYPE( \fBFC_LOG_MESSAGE\fP( \fBerror\fP, FORMAT, __VA_ARGS__ ) )"
.br
.ti -1c
.RI "#define \fBFC_THROW_EXCEPTION\fP(EXCEPTION,  FORMAT, \&.\&.\&.)"
.br
.ti -1c
.RI "#define \fBFC_RETHROW_EXCEPTION\fP(ER,  LOG_LEVEL,  FORMAT, \&.\&.\&.)"
.br
.RI "Appends a log_message to the exception ER and rethrows it\&. "
.ti -1c
.RI "#define \fBFC_LOG_AND_RETHROW\fP()"
.br
.RI "test_transfer "
.ti -1c
.RI "#define \fBFC_CAPTURE_LOG_AND_RETHROW\fP(\&.\&.\&.)"
.br
.ti -1c
.RI "#define \fBFC_CAPTURE_AND_LOG\fP(\&.\&.\&.)"
.br
.ti -1c
.RI "#define \fBFC_RETHROW_EXCEPTIONS\fP(LOG_LEVEL,  FORMAT, \&.\&.\&.)"
.br
.RI "Catchs all exception's, std::exceptions, and \&.\&.\&. and rethrows them after appending the provided log message\&. "
.ti -1c
.RI "#define \fBFC_CAPTURE_AND_RETHROW\fP(\&.\&.\&.)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef std::shared_ptr< exception > \fBfc::exception_ptr\fP"
.br
.ti -1c
.RI "typedef optional< exception > \fBfc::oexception\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBfc::exception_code\fP { \fBfc::unspecified_exception_code\fP = 0, \fBfc::unhandled_exception_code\fP = 1, \fBfc::timeout_exception_code\fP = 2, \fBfile_not_found_exception_code\fP = 3, \fBparse_error_exception_code\fP = 4, \fBinvalid_arg_exception_code\fP = 5, \fBkey_not_found_exception_code\fP = 6, \fBbad_cast_exception_code\fP = 7, \fBout_of_range_exception_code\fP = 8, \fBcanceled_exception_code\fP = 9, \fBassert_exception_code\fP = 10, \fBeof_exception_code\fP = 11, \fBstd_exception_code\fP = 13, \fBinvalid_operation_exception_code\fP = 14, \fBunknown_host_exception_code\fP = 15, \fBnull_optional_code\fP = 16, \fBudt_error_code\fP = 17, \fBaes_error_code\fP = 18, \fBoverflow_code\fP = 19, \fBunderflow_code\fP = 20, \fBdivide_by_zero_code\fP = 21 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBfc::to_variant\fP (const exception &e, variant &v)"
.br
.ti -1c
.RI "void \fBfc::from_variant\fP (const variant &e, exception &ll)"
.br
.ti -1c
.RI "template<typename T > fc::exception_ptr \fBfc::copy_exception\fP (\fBT\fP &&e)"
.br
.ti -1c
.RI "\fBfc::FC_DECLARE_EXCEPTION\fP (timeout_exception, timeout_exception_code, 'Timeout')"
.br
.ti -1c
.RI "\fBfc::FC_DECLARE_EXCEPTION\fP (file_not_found_exception, file_not_found_exception_code, 'File Not Found')"
.br
.ti -1c
.RI "\fBfc::FC_DECLARE_EXCEPTION\fP (parse_error_exception, parse_error_exception_code, 'Parse Error')"
.br
.RI "report's parse errors "
.ti -1c
.RI "\fBfc::FC_DECLARE_EXCEPTION\fP (invalid_arg_exception, invalid_arg_exception_code, 'Invalid Argument')"
.br
.ti -1c
.RI "\fBfc::FC_DECLARE_EXCEPTION\fP (key_not_found_exception, key_not_found_exception_code, 'Key Not Found')"
.br
.RI "reports when a key, guid, or other item is not found\&. "
.ti -1c
.RI "\fBfc::FC_DECLARE_EXCEPTION\fP (bad_cast_exception, bad_cast_exception_code, 'Bad Cast')"
.br
.ti -1c
.RI "\fBfc::FC_DECLARE_EXCEPTION\fP (out_of_range_exception, out_of_range_exception_code, 'Out of Range')"
.br
.ti -1c
.RI "\fBfc::FC_DECLARE_EXCEPTION\fP (invalid_operation_exception, invalid_operation_exception_code, 'Invalid \fBOperation\fP')"
.br
.RI "if an operation is unsupported or not valid this may be thrown "
.ti -1c
.RI "\fBfc::FC_DECLARE_EXCEPTION\fP (unknown_host_exception, unknown_host_exception_code, 'Unknown Host')"
.br
.RI "if an host name can not be resolved this may be thrown "
.ti -1c
.RI "\fBfc::FC_DECLARE_EXCEPTION\fP (canceled_exception, canceled_exception_code, 'Canceled')"
.br
.RI "used to report a canceled \fBOperation\fP "
.ti -1c
.RI "\fBfc::FC_DECLARE_EXCEPTION\fP (assert_exception, assert_exception_code, 'Assert Exception')"
.br
.RI "used inplace of assert() to report violations of pre conditions\&. "
.ti -1c
.RI "\fBfc::FC_DECLARE_EXCEPTION\fP (eof_exception, eof_exception_code, 'End Of File')"
.br
.ti -1c
.RI "\fBfc::FC_DECLARE_EXCEPTION\fP (null_optional, null_optional_code, 'null optional')"
.br
.ti -1c
.RI "\fBfc::FC_DECLARE_EXCEPTION\fP (udt_exception, udt_error_code, 'UDT \fBerror\fP')"
.br
.ti -1c
.RI "\fBfc::FC_DECLARE_EXCEPTION\fP (aes_exception, aes_error_code, 'AES \fBerror\fP')"
.br
.ti -1c
.RI "\fBfc::FC_DECLARE_EXCEPTION\fP (overflow_exception, overflow_code, 'Integer Overflow')"
.br
.ti -1c
.RI "\fBfc::FC_DECLARE_EXCEPTION\fP (underflow_exception, underflow_code, 'Integer Underflow')"
.br
.ti -1c
.RI "\fBfc::FC_DECLARE_EXCEPTION\fP (divide_by_zero_exception, divide_by_zero_code, 'Integer Divide By \fBZero\fP')"
.br
.ti -1c
.RI "std::string \fBfc::except_str\fP ()"
.br
.ti -1c
.RI "void \fBfc::record_assert_trip\fP (const char *filename, uint32_t lineno, const char *expr)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "bool \fBfc::enable_record_assert_trip\fP = false"
.br
.in -1c
.SH "Detailed Description"
.PP 
Defines exception's used by fc\&. 


.SH "Macro Definition Documentation"
.PP 
.SS "#define FC_ASSERT(TEST,  \&.\&.\&.)"
\fBValue:\fP
.PP
.nf
FC_EXPAND_MACRO( \
    FC_MULTILINE_MACRO_BEGIN \
      if( UNLIKELY(!(TEST)) ) \
      {                                                                      \
        if( fc::enable_record_assert_trip )                                  \
           fc::record_assert_trip( __FILE__, __LINE__, #TEST );              \
        FC_THROW_EXCEPTION( fc::assert_exception, #TEST ": "  __VA_ARGS__ ); \
      }                                                                      \
    FC_MULTILINE_MACRO_END \
  )
.fi
.PP
Checks a condition and throws an assert_exception if the test is FALSE\&. 
.SS "#define FC_CAPTURE_AND_LOG( \&.\&.\&.)"
\fBValue:\fP
.PP
.nf
catch( fc::exception& er ) { \
      wlog( "${details}", ("details",er\&.to_detail_string()) ); \
      wdump( __VA_ARGS__ ); \
   } catch( const std::exception& e ) {  \
      fc::exception fce( \
                FC_LOG_MESSAGE( warn, "rethrow ${what}: ",FC_FORMAT_ARG_PARAMS( __VA_ARGS__  )("what",e\&.what()) ), \
                fc::std_exception_code,\
                BOOST_CORE_TYPEID(e)\&.name(), \
                e\&.what() ) ; \
      wlog( "${details}", ("details",fce\&.to_detail_string()) ); \
      wdump( __VA_ARGS__ ); \
   } catch( \&.\&.\&. ) {  \
      fc::unhandled_exception e( \
                FC_LOG_MESSAGE( warn, "rethrow", FC_FORMAT_ARG_PARAMS( __VA_ARGS__) ), \
                std::current_exception() ); \
      wlog( "${details}", ("details",e\&.to_detail_string()) ); \
      wdump( __VA_ARGS__ ); \
   }
.fi
.SS "#define FC_CAPTURE_AND_RETHROW( \&.\&.\&.)"
\fBValue:\fP
.PP
.nf
catch( fc::exception& er ) { \
      FC_RETHROW_EXCEPTION( er, warn, "", FC_FORMAT_ARG_PARAMS(__VA_ARGS__) ); \
   } catch( const std::exception& e ) {  \
      fc::exception fce( \
                FC_LOG_MESSAGE( warn, "${what}: ",FC_FORMAT_ARG_PARAMS(__VA_ARGS__)("what",e\&.what())), \
                fc::std_exception_code,\
                BOOST_CORE_TYPEID(decltype(e))\&.name(), \
                e\&.what() ) ; throw fce;\
   } catch( \&.\&.\&. ) {  \
      throw fc::unhandled_exception( \
                FC_LOG_MESSAGE( warn, "",FC_FORMAT_ARG_PARAMS(__VA_ARGS__)), \
                std::current_exception() ); \
   }
.fi
.SS "#define FC_CAPTURE_AND_THROW(EXCEPTION_TYPE,  \&.\&.\&.)"
\fBValue:\fP
.PP
.nf
FC_MULTILINE_MACRO_BEGIN \
    throw EXCEPTION_TYPE( FC_LOG_MESSAGE( error, "", FC_FORMAT_ARG_PARAMS(__VA_ARGS__) ) ); \
  FC_MULTILINE_MACRO_END
.fi
.SS "#define FC_CAPTURE_LOG_AND_RETHROW( \&.\&.\&.)"
\fBValue:\fP
.PP
.nf
catch( fc::exception& er ) { \
      wlog( "${details}", ("details",er\&.to_detail_string()) ); \
      wdump( __VA_ARGS__ ); \
      FC_RETHROW_EXCEPTION( er, warn, "rethrow", FC_FORMAT_ARG_PARAMS(__VA_ARGS__) ); \
   } catch( const std::exception& e ) {  \
      fc::exception fce( \
                FC_LOG_MESSAGE( warn, "rethrow ${what}: ", FC_FORMAT_ARG_PARAMS( __VA_ARGS__ )("what",e\&.what())), \
                fc::std_exception_code,\
                BOOST_CORE_TYPEID(e)\&.name(), \
                e\&.what() ) ; \
      wlog( "${details}", ("details",fce\&.to_detail_string()) ); \
      wdump( __VA_ARGS__ ); \
      throw fce;\
   } catch( \&.\&.\&. ) {  \
      fc::unhandled_exception e( \
                FC_LOG_MESSAGE( warn, "rethrow", FC_FORMAT_ARG_PARAMS( __VA_ARGS__) ), \
                std::current_exception() ); \
      wlog( "${details}", ("details",e\&.to_detail_string()) ); \
      wdump( __VA_ARGS__ ); \
      throw e; \
   }
.fi
.SS "FC_LOG_AND_RETHROW()"
\fBValue:\fP
.PP
.nf
catch( fc::exception& er ) { \
      wlog( "${details}", ("details",er\&.to_detail_string()) ); \
      FC_RETHROW_EXCEPTION( er, warn, "rethrow" ); \
   } catch( const std::exception& e ) {  \
      fc::exception fce( \
                FC_LOG_MESSAGE( warn, "rethrow ${what}: ", ("what",e\&.what())), \
                fc::std_exception_code,\
                BOOST_CORE_TYPEID(e)\&.name(), \
                e\&.what() ) ; \
      wlog( "${details}", ("details",fce\&.to_detail_string()) ); \
      throw fce;\
   } catch( \&.\&.\&. ) {  \
      fc::unhandled_exception e( \
                FC_LOG_MESSAGE( warn, "rethrow"), \
                std::current_exception() ); \
      wlog( "${details}", ("details",e\&.to_detail_string()) ); \
      throw e; \
   }
.fi
.PP
test_transfer stltest
.PP
prove_mem_reset
.PP
test_api_bootstrap
.PP
test_fullspend
.PP
test_overspend
.PP
Prove the modifications to global variables are wiped between runs
.PP
Make sure WASM 'start' method is used correctly
.PP
Ensure we can load a wasm w/o memory 
.SS "#define FC_REGISTER_EXCEPTIONS(SEQ)"
\fBValue:\fP
.PP
.nf
\
   static bool exception_init = []()->bool{ \
    BOOST_PP_SEQ_FOR_EACH( FC_REGISTER_EXCEPTION, v, SEQ )  \
      return true; \
   }();  \
.fi
.SS "#define FC_RETHROW_EXCEPTION(ER, LOG_LEVEL, FORMAT,  \&.\&.\&.)"
\fBValue:\fP
.PP
.nf
FC_MULTILINE_MACRO_BEGIN \
    ER\&.append_log( FC_LOG_MESSAGE( LOG_LEVEL, FORMAT, __VA_ARGS__ ) ); \
    throw; \
  FC_MULTILINE_MACRO_END
.fi
.PP
Appends a log_message to the exception ER and rethrows it\&. 
.SS "#define FC_RETHROW_EXCEPTIONS(LOG_LEVEL, FORMAT,  \&.\&.\&.)"
\fBValue:\fP
.PP
.nf
catch( fc::exception& er ) { \
      FC_RETHROW_EXCEPTION( er, LOG_LEVEL, FORMAT, __VA_ARGS__ ); \
   } catch( const std::exception& e ) {  \
      fc::exception fce( \
                FC_LOG_MESSAGE( LOG_LEVEL, "${what}: " FORMAT,__VA_ARGS__("what",e\&.what())), \
                fc::std_exception_code,\
                BOOST_CORE_TYPEID(e)\&.name(), \
                e\&.what() ) ; throw fce;\
   } catch( \&.\&.\&. ) {  \
      throw fc::unhandled_exception( \
                FC_LOG_MESSAGE( LOG_LEVEL, FORMAT,__VA_ARGS__), \
                std::current_exception() ); \
   }
.fi
.PP
Catchs all exception's, std::exceptions, and \&.\&.\&. and rethrows them after appending the provided log message\&. 
.SS "#define FC_THROW( \&.\&.\&.)"
\fBValue:\fP
.PP
.nf
FC_MULTILINE_MACRO_BEGIN \
    throw fc::exception( FC_INDIRECT_EXPAND(FC_LOG_MESSAGE, ( error, __VA_ARGS__ )) );  \
  FC_MULTILINE_MACRO_END
.fi
.SS "#define FC_THROW_EXCEPTION(EXCEPTION, FORMAT,  \&.\&.\&.)"
\fBValue:\fP
.PP
.nf
FC_MULTILINE_MACRO_BEGIN \
    throw EXCEPTION( FC_LOG_MESSAGE( error, FORMAT, __VA_ARGS__ ) ); \
  FC_MULTILINE_MACRO_END
.fi

.PP
\fBParameters:\fP
.RS 4
\fIEXCEPTION\fP a class in the Phoenix::Athena::API namespace that inherits 
.br
\fIformat\fP - a const char* string with '${keys}' 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for AcuteAngleChain from the source code\&.
