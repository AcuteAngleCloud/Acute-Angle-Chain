.TH "aacio::testing::base_tester" 3 "Sun Jun 3 2018" "Acute-Angle-Chain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
aacio::testing::base_tester
.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBaacio::testing::tester\fP, and \fBaacio::testing::validating_tester\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef string \fBaction_result\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBinit\fP (bool push_genesis=true, \fBchain_controller::runtime_limits\fP limits=\fBchain_controller::runtime_limits\fP())"
.br
.ti -1c
.RI "void \fBinit\fP (\fBchain_controller::controller_config\fP \fBconfig\fP)"
.br
.ti -1c
.RI "void \fBclose\fP ()"
.br
.ti -1c
.RI "void \fBopen\fP ()"
.br
.ti -1c
.RI "virtual \fBsigned_block\fP \fBproduce_block\fP (\fBfc::microseconds\fP skip_time=fc::milliseconds(config::block_interval_ms), uint32_t skip_flag=skip_missed_block_penalty)=0"
.br
.ti -1c
.RI "void \fBproduce_blocks\fP (uint32_t n=1)"
.br
.ti -1c
.RI "void \fBproduce_blocks_until_end_of_round\fP ()"
.br
.ti -1c
.RI "\fBsigned_block\fP \fBpush_block\fP (\fBsigned_block\fP b)"
.br
.ti -1c
.RI "\fBtransaction_trace\fP \fBpush_transaction\fP (\fBpacked_transaction\fP &trx, uint32_t skip_flag=skip_nothing)"
.br
.ti -1c
.RI "\fBtransaction_trace\fP \fBpush_transaction\fP (\fBsigned_transaction\fP &trx, uint32_t skip_flag=skip_nothing)"
.br
.ti -1c
.RI "action_result \fBpush_action\fP (\fBaction\fP &&cert_act, uint64_t authorizer)"
.br
.ti -1c
.RI "\fBtransaction_trace\fP \fBpush_action\fP (const \fBaccount_name\fP &code, const action_name &acttype, const \fBaccount_name\fP &\fBactor\fP, const \fBvariant_object\fP &data, uint32_t \fBexpiration\fP=DEFAULT_EXPIRATION_DELTA, uint32_t delay_sec=0)"
.br
.ti -1c
.RI "\fBtransaction_trace\fP \fBpush_action\fP (const \fBaccount_name\fP &code, const action_name &acttype, const \fBvector\fP< \fBaccount_name\fP > &actors, const \fBvariant_object\fP &data, uint32_t \fBexpiration\fP=DEFAULT_EXPIRATION_DELTA, uint32_t delay_sec=0)"
.br
.ti -1c
.RI "void \fBset_tapos\fP (\fBsigned_transaction\fP &trx, uint32_t \fBexpiration\fP=DEFAULT_EXPIRATION_DELTA) const"
.br
.ti -1c
.RI "void \fBset_transaction_headers\fP (\fBsigned_transaction\fP &trx, uint32_t \fBexpiration\fP=DEFAULT_EXPIRATION_DELTA, uint32_t delay_sec=0) const"
.br
.ti -1c
.RI "void \fBcreate_accounts\fP (\fBvector\fP< \fBaccount_name\fP > names, bool \fBmultisig\fP=false)"
.br
.ti -1c
.RI "void \fBpush_genesis_block\fP ()"
.br
.ti -1c
.RI "\fBproducer_schedule_type\fP \fBset_producers\fP (const \fBvector\fP< \fBaccount_name\fP > &producer_names, const uint32_t version=0)"
.br
.ti -1c
.RI "void \fBlink_authority\fP (\fBaccount_name\fP \fBaccount\fP, \fBaccount_name\fP code, \fBpermission_name\fP req, action_name type='')"
.br
.ti -1c
.RI "void \fBunlink_authority\fP (\fBaccount_name\fP \fBaccount\fP, \fBaccount_name\fP code, action_name type='')"
.br
.ti -1c
.RI "void \fBset_authority\fP (\fBaccount_name\fP \fBaccount\fP, \fBpermission_name\fP perm, \fBauthority\fP auth, \fBpermission_name\fP parent, const \fBvector\fP< \fBpermission_level\fP > &auths, const \fBvector\fP< \fBprivate_key_type\fP > &keys)"
.br
.ti -1c
.RI "void \fBset_authority\fP (\fBaccount_name\fP \fBaccount\fP, \fBpermission_name\fP perm, \fBauthority\fP auth, \fBpermission_name\fP parent=config::owner_name)"
.br
.ti -1c
.RI "void \fBdelete_authority\fP (\fBaccount_name\fP \fBaccount\fP, \fBpermission_name\fP perm, const \fBvector\fP< \fBpermission_level\fP > &auths, const \fBvector\fP< \fBprivate_key_type\fP > &keys)"
.br
.ti -1c
.RI "void \fBdelete_authority\fP (\fBaccount_name\fP \fBaccount\fP, \fBpermission_name\fP perm)"
.br
.ti -1c
.RI "void \fBcreate_account\fP (\fBaccount_name\fP \fBname\fP, \fBaccount_name\fP creator=config::system_account_name, bool \fBmultisig\fP=false)"
.br
.ti -1c
.RI "\fBtransaction_trace\fP \fBpush_reqauth\fP (\fBaccount_name\fP from, const \fBvector\fP< \fBpermission_level\fP > &auths, const \fBvector\fP< \fBprivate_key_type\fP > &keys)"
.br
.ti -1c
.RI "\fBtransaction_trace\fP \fBpush_reqauth\fP (\fBaccount_name\fP from, string role, bool multi_sig=false)"
.br
.ti -1c
.RI "\fBtransaction_trace\fP \fBpush_dummy\fP (\fBaccount_name\fP from, const string &v='blah')"
.br
.ti -1c
.RI "\fBtransaction_trace\fP \fBtransfer\fP (\fBaccount_name\fP from, \fBaccount_name\fP to, \fBasset\fP amount, string memo, \fBaccount_name\fP \fBcurrency\fP)"
.br
.ti -1c
.RI "\fBtransaction_trace\fP \fBtransfer\fP (\fBaccount_name\fP from, \fBaccount_name\fP to, string amount, string memo, \fBaccount_name\fP \fBcurrency\fP)"
.br
.ti -1c
.RI "\fBtransaction_trace\fP \fBissue\fP (\fBaccount_name\fP to, string amount, \fBaccount_name\fP \fBcurrency\fP)"
.br
.ti -1c
.RI "template<typename ObjectType > const auto & \fBget\fP (const \fBchainbase::oid\fP< ObjectType > &key)"
.br
.ti -1c
.RI "template<typename ObjectType , typename IndexBy , typename\&.\&.\&. Args> const auto & \fBget\fP (Args &&\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename ObjectType , typename IndexBy , typename\&.\&.\&. Args> const auto * \fBfind\fP (Args &&\&.\&.\&. args)"
.br
.ti -1c
.RI "\fBpublic_key_type\fP \fBget_public_key\fP (\fBname\fP keyname, string role='owner') const"
.br
.ti -1c
.RI "\fBprivate_key_type\fP \fBget_private_key\fP (\fBname\fP keyname, string role='owner') const"
.br
.ti -1c
.RI "void \fBset_code\fP (\fBaccount_name\fP \fBname\fP, const char *wast)"
.br
.ti -1c
.RI "void \fBset_code\fP (\fBaccount_name\fP \fBname\fP, const \fBvector\fP< uint8_t > wasm)"
.br
.ti -1c
.RI "void \fBset_abi\fP (\fBaccount_name\fP \fBname\fP, const char *abi_json)"
.br
.ti -1c
.RI "bool \fBchain_has_transaction\fP (const \fBtransaction_id_type\fP &txid) const"
.br
.ti -1c
.RI "const \fBtransaction_receipt\fP & \fBget_transaction_receipt\fP (const \fBtransaction_id_type\fP &txid) const"
.br
.ti -1c
.RI "\fBasset\fP \fBget_currency_balance\fP (const \fBaccount_name\fP &\fBcontract\fP, const \fBsymbol\fP &asset_symbol, const \fBaccount_name\fP &\fBaccount\fP) const"
.br
.ti -1c
.RI "\fBvector\fP< char > \fBget_row_by_account\fP (uint64_t code, uint64_t scope, uint64_t table, const \fBaccount_name\fP &act)"
.br
.ti -1c
.RI "auto \fBget_resolver\fP ()"
.br
.ti -1c
.RI "void \fBsync_with\fP (\fBbase_tester\fP &\fBother\fP)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBvector\fP< uint8_t > \fBto_uint8_vector\fP (const string &s)"
.br
.ti -1c
.RI "static \fBvector\fP< uint8_t > \fBto_uint8_vector\fP (uint64_t x)"
.br
.ti -1c
.RI "static uint64_t \fBto_uint64\fP (\fBfc::variant\fP x)"
.br
.ti -1c
.RI "static string \fBto_string\fP (\fBfc::variant\fP x)"
.br
.ti -1c
.RI "static action_result \fBsuccess\fP ()"
.br
.ti -1c
.RI "static action_result \fBerror\fP (const string &msg)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBunique_ptr\fP< \fBchain_controller\fP > \fBcontrol\fP"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const uint32_t \fBDEFAULT_EXPIRATION_DELTA\fP = 6"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBsigned_block\fP \fB_produce_block\fP (\fBfc::microseconds\fP skip_time, uint32_t skip_flag)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBfc::temp_directory\fP \fBtempdir\fP"
.br
.ti -1c
.RI "\fBchain_controller::controller_config\fP \fBcfg\fP"
.br
.ti -1c
.RI "\fBmap\fP< \fBtransaction_id_type\fP, \fBtransaction_receipt\fP > \fBchain_transactions\fP"
.br
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "\fBasset\fP aacio::testing::base_tester::get_currency_balance (const \fBaccount_name\fP & code, const \fBsymbol\fP & asset_symbol, const \fBaccount_name\fP & account) const"
Reads balance as stored by \fBgeneric_currency\fP contract 

.SH "Author"
.PP 
Generated automatically by Doxygen for Acute-Angle-Chain from the source code\&.
