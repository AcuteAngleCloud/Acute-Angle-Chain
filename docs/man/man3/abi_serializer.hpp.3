.TH "libraries/chain/include/aacio/chain/contracts/abi_serializer.hpp" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libraries/chain/include/aacio/chain/contracts/abi_serializer.hpp
.SH SYNOPSIS
.br
.PP
\fC#include <aacio/chain/contracts/types\&.hpp>\fP
.br
\fC#include <aacio/chain/block_trace\&.hpp>\fP
.br
\fC#include <aacio/chain/exceptions\&.hpp>\fP
.br
\fC#include <fc/variant_object\&.hpp>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBaacio::chain::contracts::abi_serializer\fP"
.br
.ti -1c
.RI "struct \fBaacio::chain::contracts::impl::type_requires_abi< T >\fP"
.br
.ti -1c
.RI "struct \fBaacio::chain::contracts::impl::type_requires_abi< Container< T, Args\&.\&.\&. > >\fP"
.br
.ti -1c
.RI "struct \fBaacio::chain::contracts::impl::abi_to_variant\fP"
.br
.ti -1c
.RI "class \fBaacio::chain::contracts::impl::abi_to_variant_visitor< T, Resolver >\fP"
.br
.ti -1c
.RI "struct \fBaacio::chain::contracts::impl::abi_from_variant\fP"
.br
.ti -1c
.RI "class \fBaacio::chain::contracts::impl::abi_from_variant_visitor< T, Resolver >\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "template<typename T > using \fBaacio::chain::contracts::impl::not_require_abi_t\fP = std::enable_if_t<!type_requires_abi_v< \fBT\fP >(), int >"
.br
.ti -1c
.RI "template<typename T > using \fBaacio::chain::contracts::impl::require_abi_t\fP = std::enable_if_t< type_requires_abi_v< \fBT\fP >(), int >"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename T > constexpr bool \fBaacio::chain::contracts::impl::single_type_requires_abi_v\fP ()"
.br
.ti -1c
.RI "template<typename T > constexpr bool \fBaacio::chain::contracts::impl::type_requires_abi_v\fP ()"
.br
.ti -1c
.RI "\fBaacio::chain::contracts::FC_RETHROW_EXCEPTIONS\fP (\fBerror\fP, 'Failed to serialize type',('object', o)) template< typename \fBT\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBCopyright:\fP
.RS 4
defined in AcuteAngleChain/LICENSE\&.txt 
.RE
.PP

.SH "Typedef Documentation"
.PP 
.SS "template<typename T > using \fBaacio::chain::contracts::impl::not_require_abi_t\fP = typedef std::enable_if_t<!type_requires_abi_v<\fBT\fP>(), int>"
convenience aliases for creating overload-guards based on whether the type contains ABI related info 
.SH "Function Documentation"
.PP 
.SS "template<typename T > constexpr bool aacio::chain::contracts::impl::single_type_requires_abi_v ()"
Determine if a type contains ABI related info, perhaps deeply nested 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fI\fBT\fP\fP - the type to check 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for AcuteAngleChain from the source code\&.
