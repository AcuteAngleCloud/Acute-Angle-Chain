.TH "libraries/utilities/include/aacio/utilities/exception_macros.hpp" 3 "Sun Jun 3 2018" "Acute-Angle-Chain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libraries/utilities/include/aacio/utilities/exception_macros.hpp
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBAAC_ASSERT\fP(expr,  exc_type,  FORMAT, \&.\&.\&.)"
.br
.ti -1c
.RI "#define \fBAAC_THROW\fP(exc_type,  FORMAT, \&.\&.\&.)   throw exc_type( \fBFC_LOG_MESSAGE\fP( \fBerror\fP, FORMAT, __VA_ARGS__ ) );"
.br
.ti -1c
.RI "#define \fBAAC_RETHROW_EXCEPTIONS\fP(exception_type,  FORMAT, \&.\&.\&.)"
.br
.ti -1c
.RI "#define \fBAAC_CAPTURE_AND_RETHROW\fP(exception_type, \&.\&.\&.)"
.br
.ti -1c
.RI "#define \fBAAC_DECLARE_OP_BASE_EXCEPTIONS\fP(op_name)"
.br
.ti -1c
.RI "#define \fBAAC_DECLARE_OP_VALIDATE_EXCEPTION\fP(exc_name,  op_name,  seqnum,  msg)"
.br
.ti -1c
.RI "#define \fBAAC_DECLARE_OP_EVALUATE_EXCEPTION\fP(exc_name,  op_name,  seqnum,  msg)"
.br
.ti -1c
.RI "#define \fBAAC_RECODE_EXC\fP(cause_type,  effect_type)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBCopyright:\fP
.RS 4
defined in Acute-Angle-Chain/LICENSE\&.txt 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define AAC_ASSERT(expr, exc_type, FORMAT,  \&.\&.\&.)"
\fBValue:\fP
.PP
.nf
FC_MULTILINE_MACRO_BEGIN                                           \
   if( !(expr) )                                                      \
      FC_THROW_EXCEPTION( exc_type, FORMAT, __VA_ARGS__ );            \
   FC_MULTILINE_MACRO_END
.fi
.SS "#define AAC_CAPTURE_AND_RETHROW(exception_type,  \&.\&.\&.)"
\fBValue:\fP
.PP
.nf
catch (aacio::chain::chain_exception& e) { \
      FC_RETHROW_EXCEPTION( e, warn, "", FC_FORMAT_ARG_PARAMS(__VA_ARGS__) ); \
   } catch (fc::exception& e) { \
      exception_type new_exception(e\&.get_log()); \
      throw new_exception; \
   } catch( const std::exception& e ) {  \
      exception_type fce( \
                FC_LOG_MESSAGE( warn, "${what}: ",FC_FORMAT_ARG_PARAMS(__VA_ARGS__)("what",e\&.what())), \
                fc::std_exception_code,\
                BOOST_CORE_TYPEID(decltype(e))\&.name(), \
                e\&.what() ) ; throw fce;\
   } catch( \&.\&.\&. ) {  \
      throw fc::unhandled_exception( \
                FC_LOG_MESSAGE( warn, "",FC_FORMAT_ARG_PARAMS(__VA_ARGS__)), \
                std::current_exception() ); \
   }
.fi
Macro inspired from FC_CAPTURE_AND_RETHROW The main difference here is that if the exception caught isn't of type 'aacio::chain::chain_exception' This macro will rethrow the exception as the specified 'exception_type' 
.SS "#define AAC_DECLARE_OP_BASE_EXCEPTIONS(op_name)"
\fBValue:\fP
.PP
.nf
FC_DECLARE_DERIVED_EXCEPTION(                                      \
      op_name ## _validate_exception,                                 \
      aacio::chain::message_validate_exception,                  \
      3040000 + 100 * operation::tag< op_name ## _operation >::value, \
      #op_name "_operation validation exception"                      \
      )                                                               \
   FC_DECLARE_DERIVED_EXCEPTION(                                      \
      op_name ## _evaluate_exception,                                 \
      aacio::chain::message_evaluate_exception,                  \
      3050000 + 100 * operation::tag< op_name ## _operation >::value, \
      #op_name "_operation evaluation exception"                      \
      )
.fi
.SS "#define AAC_DECLARE_OP_EVALUATE_EXCEPTION(exc_name, op_name, seqnum, msg)"
\fBValue:\fP
.PP
.nf
FC_DECLARE_DERIVED_EXCEPTION(                                      \
      op_name ## _ ## exc_name,                                       \
      aacio::chain::op_name ## _evaluate_exception,                \
      3050000 + 100 * operation::tag< op_name ## _operation >::value  \
         + seqnum,                                                    \
      msg                                                             \
      )
.fi
.SS "#define AAC_DECLARE_OP_VALIDATE_EXCEPTION(exc_name, op_name, seqnum, msg)"
\fBValue:\fP
.PP
.nf
FC_DECLARE_DERIVED_EXCEPTION(                                      \
      op_name ## _ ## exc_name,                                       \
      aacio::chain::op_name ## _validate_exception,                \
      3040000 + 100 * operation::tag< op_name ## _operation >::value  \
         + seqnum,                                                    \
      msg                                                             \
      )
.fi
.SS "#define AAC_RECODE_EXC(cause_type, effect_type)"
\fBValue:\fP
.PP
.nf
catch( const cause_type& e ) \
   { throw( effect_type( e\&.what(), e\&.get_log() ) ); }
.fi
.SS "#define AAC_RETHROW_EXCEPTIONS(exception_type, FORMAT,  \&.\&.\&.)"
\fBValue:\fP
.PP
.nf
catch (aacio::chain::chain_exception& e) { \
      FC_RETHROW_EXCEPTION( e, warn, FORMAT, __VA_ARGS__ ); \
   } catch (fc::exception& e) { \
      exception_type new_exception(FC_LOG_MESSAGE( warn, FORMAT, __VA_ARGS__ )); \
      for (const auto& log: e\&.get_log()) { \
         new_exception\&.append_log(log); \
      } \
      throw new_exception; \
   } catch( const std::exception& e ) {  \
      exception_type fce(FC_LOG_MESSAGE( warn, FORMAT" (${what})" ,__VA_ARGS__("what",e\&.what()))); \
      throw fce;\
   } catch( \&.\&.\&. ) {  \
      throw fc::unhandled_exception( \
                FC_LOG_MESSAGE( warn, FORMAT,__VA_ARGS__), \
                std::current_exception() ); \
   }
.fi
Macro inspired from FC_RETHROW_EXCEPTIONS The main difference here is that if the exception caught isn't of type 'aacio::chain::chain_exception' This macro will rethrow the exception as the specified 'exception_type' 
.SH "Author"
.PP 
Generated automatically by Doxygen for Acute-Angle-Chain from the source code\&.
