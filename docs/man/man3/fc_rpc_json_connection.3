.TH "fc::rpc::json_connection" 3 "Sun Jun 3 2018" "Acute-Angle-Chain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
fc::rpc::json_connection \- Implements JSON-RPC 2\&.0 over a set of io streams\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <json_connection\&.hpp>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef std::function< \fBvariant\fP(const \fBvariants\fP &)> \fBmethod\fP"
.br
.ti -1c
.RI "typedef std::function< \fBvariant\fP(const \fBvariant_object\fP &)> \fBnamed_param_method\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBjson_connection\fP (fc::buffered_istream_ptr in, fc::buffered_ostream_ptr out)"
.br
.ti -1c
.RI "future< void > \fBexec\fP ()"
.br
.ti -1c
.RI "bool \fBis_open\fP ()"
.br
.ti -1c
.RI "void \fBclose\fP ()"
.br
.ti -1c
.RI "void \fBset_on_disconnected_callback\fP (std::function< void(fc::exception_ptr)> callback)"
.br
.ti -1c
.RI "\fBlogger\fP \fBget_logger\fP () const"
.br
.ti -1c
.RI "void \fBset_logger\fP (const \fBlogger\fP &l)"
.br
.in -1c
.PP
.RI "\fBserver interface\fP"
.br
Adding methods to the interface allows the remote side to call them\&. 
.PP
.in +1c
.in +1c
.ti -1c
.RI "void \fBadd_method\fP (const fc::string &name, method)"
.br
.ti -1c
.RI "void \fBadd_named_param_method\fP (const fc::string &name, named_param_method)"
.br
.ti -1c
.RI "void \fBremove_method\fP (const fc::string &name)"
.br
.in -1c
.in -1c
.PP
.RI "\fBclient interface\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "void \fBnotice\fP (const fc::string &method)"
.br
.ti -1c
.RI "void \fBnotice\fP (const fc::string &method, const \fBvariants\fP &args)"
.br
.ti -1c
.RI "void \fBnotice\fP (const fc::string &method, const \fBvariant_object\fP &named_args)"
.br
.ti -1c
.RI "future< \fBvariant\fP > \fBasync_call\fP (const fc::string &method, const \fBvariant_object\fP &args)"
.br
.RI "args will be handled as named params "
.ti -1c
.RI "future< \fBvariant\fP > \fBasync_call\fP (const fc::string &method, \fBmutable_variant_object\fP args)"
.br
.ti -1c
.RI "future< \fBvariant\fP > \fBasync_call\fP (const fc::string &method, const \fBvariants\fP &args)"
.br
.RI "Sending in an array of variants will be handled as positional arguments\&. "
.ti -1c
.RI "future< \fBvariant\fP > \fBasync_call\fP (const fc::string &method)"
.br
.ti -1c
.RI "future< \fBvariant\fP > \fBasync_call\fP (const fc::string &method, const \fBvariant\fP &a1)"
.br
.ti -1c
.RI "future< \fBvariant\fP > \fBasync_call\fP (const fc::string &method, const \fBvariant\fP &a1, const \fBvariant\fP &a2)"
.br
.ti -1c
.RI "future< \fBvariant\fP > \fBasync_call\fP (const fc::string &method, const \fBvariant\fP &a1, const \fBvariant\fP &a2, const \fBvariant\fP &a3)"
.br
.ti -1c
.RI "future< \fBvariant\fP > \fBasync_call\fP (const fc::string &method, const \fBvariant\fP &a1, const \fBvariant\fP &a2, const \fBvariant\fP &a3, const \fBvariant\fP &a4)"
.br
.ti -1c
.RI "future< \fBvariant\fP > \fBasync_call\fP (const fc::string &method, const \fBvariant\fP &a1, const \fBvariant\fP &a2, const \fBvariant\fP &a3, const \fBvariant\fP &a4, const \fBvariant\fP &a5)"
.br
.ti -1c
.RI "future< \fBvariant\fP > \fBasync_call\fP (const fc::string &method, const \fBvariant\fP &a1, const \fBvariant\fP &a2, const \fBvariant\fP &a3, const \fBvariant\fP &a4, const \fBvariant\fP &a5, const \fBvariant\fP &a6)"
.br
.ti -1c
.RI "future< \fBvariant\fP > \fBasync_call\fP (const fc::string &method, const \fBvariant\fP &a1, const \fBvariant\fP &a2, const \fBvariant\fP &a3, const \fBvariant\fP &a4, const \fBvariant\fP &a5, const \fBvariant\fP &a6, const \fBvariant\fP &a7)"
.br
.ti -1c
.RI "future< \fBvariant\fP > \fBasync_call\fP (const fc::string &method, const \fBvariant\fP &a1, const \fBvariant\fP &a2, const \fBvariant\fP &a3, const \fBvariant\fP &a4, const \fBvariant\fP &a5, const \fBvariant\fP &a6, const \fBvariant\fP &a7, const \fBvariant\fP &a8)"
.br
.ti -1c
.RI "future< \fBvariant\fP > \fBasync_call\fP (const fc::string &method, const \fBvariant\fP &a1, const \fBvariant\fP &a2, const \fBvariant\fP &a3, const \fBvariant\fP &a4, const \fBvariant\fP &a5, const \fBvariant\fP &a6, const \fBvariant\fP &a7, const \fBvariant\fP &a8, const \fBvariant\fP &a9)"
.br
.ti -1c
.RI "future< \fBvariant\fP > \fBasync_call\fP (const fc::string &method, const \fBvariant\fP &a1, const \fBvariant\fP &a2, const \fBvariant\fP &a3, const \fBvariant\fP &a4, const \fBvariant\fP &a5, const \fBvariant\fP &a6, const \fBvariant\fP &a7, const \fBvariant\fP &a8, const \fBvariant\fP &a9, const \fBvariant\fP &a10)"
.br
.ti -1c
.RI "template<typename Result > \fBResult\fP \fBcall\fP (const fc::string &method, const \fBvariants\fP &args, \fBmicroseconds\fP timeout=microseconds::maximum())"
.br
.ti -1c
.RI "template<typename Result > \fBResult\fP \fBcall\fP (const fc::string &method, const \fBvariant\fP &a1, const \fBvariant\fP &a2, const \fBvariant\fP &a3, \fBmicroseconds\fP timeout=microseconds::maximum())"
.br
.ti -1c
.RI "template<typename Result > \fBResult\fP \fBcall\fP (const fc::string &method, const \fBvariant\fP &a1, const \fBvariant\fP &a2, const \fBvariant\fP &a3, const \fBvariant\fP &a4, \fBmicroseconds\fP timeout=microseconds::maximum())"
.br
.ti -1c
.RI "template<typename Result > \fBResult\fP \fBcall\fP (const fc::string &method, const \fBvariant\fP &a1, const \fBvariant\fP &a2, const \fBvariant\fP &a3, const \fBvariant\fP &a4, const \fBvariant\fP &a5, \fBmicroseconds\fP timeout=microseconds::maximum())"
.br
.ti -1c
.RI "template<typename Result > \fBResult\fP \fBcall\fP (const fc::string &method, const \fBvariant\fP &a1, const \fBvariant\fP &a2, const \fBvariant\fP &a3, const \fBvariant\fP &a4, const \fBvariant\fP &a5, const \fBvariant\fP &a6, \fBmicroseconds\fP timeout=microseconds::maximum())"
.br
.ti -1c
.RI "template<typename Result > \fBResult\fP \fBcall\fP (const fc::string &method, const \fBvariant\fP &a1, const \fBvariant\fP &a2, const \fBvariant\fP &a3, const \fBvariant\fP &a4, const \fBvariant\fP &a5, const \fBvariant\fP &a6, const \fBvariant\fP &a7, \fBmicroseconds\fP timeout=microseconds::maximum())"
.br
.ti -1c
.RI "template<typename Result > \fBResult\fP \fBcall\fP (const fc::string &method, const \fBvariant\fP &a1, const \fBvariant\fP &a2, const \fBvariant\fP &a3, const \fBvariant\fP &a4, const \fBvariant\fP &a5, const \fBvariant\fP &a6, const \fBvariant\fP &a7, const \fBvariant\fP &a8, \fBmicroseconds\fP timeout=microseconds::maximum())"
.br
.ti -1c
.RI "template<typename Result > \fBResult\fP \fBcall\fP (const fc::string &method, const \fBvariant\fP &a1, const \fBvariant\fP &a2, const \fBvariant\fP &a3, const \fBvariant\fP &a4, const \fBvariant\fP &a5, const \fBvariant\fP &a6, const \fBvariant\fP &a7, const \fBvariant\fP &a8, const \fBvariant\fP &a9, \fBmicroseconds\fP timeout=microseconds::maximum())"
.br
.ti -1c
.RI "template<typename Result > \fBResult\fP \fBcall\fP (const fc::string &method, const \fBvariant\fP &a1, const \fBvariant\fP &a2, const \fBvariant\fP &a3, const \fBvariant\fP &a4, const \fBvariant\fP &a5, const \fBvariant\fP &a6, const \fBvariant\fP &a7, const \fBvariant\fP &a8, const \fBvariant\fP &a9, const \fBvariant\fP &a10, \fBmicroseconds\fP timeout=microseconds::maximum())"
.br
.ti -1c
.RI "template<typename Result > \fBResult\fP \fBcall\fP (const fc::string &method, const \fBvariant\fP &a1, const \fBvariant\fP &a2, \fBmicroseconds\fP timeout=microseconds::maximum())"
.br
.ti -1c
.RI "template<typename Result > \fBResult\fP \fBcall\fP (const fc::string &method, const \fBvariant\fP &a1, \fBmicroseconds\fP timeout=microseconds::maximum())"
.br
.ti -1c
.RI "template<typename Result > \fBResult\fP \fBcall\fP (const fc::string &method, \fBvariant_object\fP a1, \fBmicroseconds\fP timeout=microseconds::maximum())"
.br
.ti -1c
.RI "template<typename Result > \fBResult\fP \fBcall\fP (const fc::string &method, \fBmutable_variant_object\fP a1, \fBmicroseconds\fP timeout=microseconds::maximum())"
.br
.ti -1c
.RI "template<typename Result > \fBResult\fP \fBcall\fP (const fc::string &method, \fBmicroseconds\fP timeout=microseconds::maximum())"
.br
.ti -1c
.RI "\fBvariant\fP \fBcall\fP (const fc::string &method, const \fBvariant_object\fP &named_args)"
.br
.RI "Sending in a \fBvariant_object\fP will be issued as named parameters\&. "
.in -1c
.in -1c
.SH "Detailed Description"
.PP 
Implements JSON-RPC 2\&.0 over a set of io streams\&. 

Each JSON RPC message is expected to be on its own line, violators will be prosecuted to the fullest extent of the law\&. 
.SH "Member Function Documentation"
.PP 
.SS "fc::future< void > fc::rpc::json_connection::exec ()"
Starts processing messages from input 

.SH "Author"
.PP 
Generated automatically by Doxygen for Acute-Angle-Chain from the source code\&.
