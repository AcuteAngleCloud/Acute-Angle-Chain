.TH "fc::safe< T >" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
fc::safe< T >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <safe\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename O > \fBsafe\fP (O o)"
.br
.ti -1c
.RI "\fBsafe\fP (const \fBsafe\fP &o)"
.br
.ti -1c
.RI "\fBsafe\fP \fBoperator\-\fP () const"
.br
.ti -1c
.RI "\fBsafe\fP & \fBoperator+=\fP (const \fBsafe\fP &b)"
.br
.ti -1c
.RI "\fBsafe\fP & \fBoperator\-=\fP (const \fBsafe\fP &b)"
.br
.ti -1c
.RI "\fBsafe\fP & \fBoperator*=\fP (const \fBsafe\fP &b)"
.br
.ti -1c
.RI "\fBsafe\fP & \fBoperator/=\fP (const \fBsafe\fP &b)"
.br
.ti -1c
.RI "\fBsafe\fP & \fBoperator%=\fP (const \fBsafe\fP &b)"
.br
.ti -1c
.RI "\fBsafe\fP & \fBoperator++\fP ()"
.br
.ti -1c
.RI "\fBsafe\fP \fBoperator++\fP (int)"
.br
.ti -1c
.RI "\fBsafe\fP & \fBoperator\-\-\fP ()"
.br
.ti -1c
.RI "\fBsafe\fP \fBoperator\-\-\fP (int)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBsafe\fP \fBmin\fP ()"
.br
.ti -1c
.RI "static \fBsafe\fP \fBmax\fP ()"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBT\fP \fBvalue\fP = 0"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "\fBsafe\fP \fBoperator+\fP (const \fBsafe\fP &a, const \fBsafe\fP &b)"
.br
.ti -1c
.RI "\fBsafe\fP \fBoperator\-\fP (const \fBsafe\fP &a, const \fBsafe\fP &b)"
.br
.ti -1c
.RI "\fBsafe\fP \fBoperator*\fP (const \fBsafe\fP &a, const \fBsafe\fP &b)"
.br
.ti -1c
.RI "\fBsafe\fP \fBoperator/\fP (const \fBsafe\fP &a, const \fBsafe\fP &b)"
.br
.ti -1c
.RI "\fBsafe\fP \fBoperator%\fP (const \fBsafe\fP &a, const \fBsafe\fP &b)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBsafe\fP &a, const \fBsafe\fP &b)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBsafe\fP &a, const \fBT\fP &b)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBT\fP &a, const \fBsafe\fP &b)"
.br
.ti -1c
.RI "bool \fBoperator<\fP (const \fBsafe\fP &a, const \fBsafe\fP &b)"
.br
.ti -1c
.RI "bool \fBoperator<\fP (const \fBsafe\fP &a, const \fBT\fP &b)"
.br
.ti -1c
.RI "bool \fBoperator<\fP (const \fBT\fP &a, const \fBsafe\fP &b)"
.br
.ti -1c
.RI "bool \fBoperator>\fP (const \fBsafe\fP &a, const \fBsafe\fP &b)"
.br
.ti -1c
.RI "bool \fBoperator>\fP (const \fBsafe\fP &a, const \fBT\fP &b)"
.br
.ti -1c
.RI "bool \fBoperator>\fP (const \fBT\fP &a, const \fBsafe\fP &b)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBsafe\fP &a, const \fBsafe\fP &b)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBsafe\fP &a, const \fBT\fP &b)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBT\fP &a, const \fBsafe\fP &b)"
.br
.ti -1c
.RI "bool \fBoperator<=\fP (const \fBsafe\fP &a, const \fBsafe\fP &b)"
.br
.ti -1c
.RI "bool \fBoperator<=\fP (const \fBsafe\fP &a, const \fBT\fP &b)"
.br
.ti -1c
.RI "bool \fBoperator<=\fP (const \fBT\fP &a, const \fBsafe\fP &b)"
.br
.ti -1c
.RI "bool \fBoperator>=\fP (const \fBsafe\fP &a, const \fBsafe\fP &b)"
.br
.ti -1c
.RI "bool \fBoperator>=\fP (const \fBsafe\fP &a, const \fBT\fP &b)"
.br
.ti -1c
.RI "bool \fBoperator>=\fP (const \fBT\fP &a, const \fBsafe\fP &b)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename T>
.br
struct fc::safe< T >"
This type is designed to provide automatic checks for integer overflow and default initialization\&. It will throw an exception on overflow conditions\&.
.PP
It can only be used on built-in types\&. In particular, safe<uint128_t> is buggy and should not be used\&.
.PP
Implemented using spec from: https://www.securecoding.cert.org/confluence/display/c/INT32-C.+Ensure+that+operations+on+signed+integers+do+not+result+in+overflow 

.SH "Author"
.PP 
Generated automatically by Doxygen for AcuteAngleChain from the source code\&.
