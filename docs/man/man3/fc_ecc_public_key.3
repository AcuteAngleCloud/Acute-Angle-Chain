.TH "fc::ecc::public_key" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
fc::ecc::public_key \- contains only the public point of an elliptic curve key\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <elliptic\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBpublic_key\fP (const \fBpublic_key\fP &k)"
.br
.ti -1c
.RI "\fBpublic_key_data\fP \fBserialize\fP () const"
.br
.ti -1c
.RI "\fBpublic_key_point_data\fP \fBserialize_ecc_point\fP () const"
.br
.ti -1c
.RI "\fBoperator public_key_data\fP () const"
.br
.ti -1c
.RI "\fBpublic_key\fP (const \fBpublic_key_data\fP &v)"
.br
.ti -1c
.RI "\fBpublic_key\fP (const \fBpublic_key_point_data\fP &v)"
.br
.ti -1c
.RI "\fBpublic_key\fP (const \fBcompact_signature\fP &c, const \fBfc::sha256\fP &digest, bool check_canonical=true)"
.br
.ti -1c
.RI "\fBpublic_key\fP \fBchild\fP (const \fBfc::sha256\fP &offset) const"
.br
.ti -1c
.RI "bool \fBvalid\fP () const"
.br
.ti -1c
.RI "\fBpublic_key\fP \fBadd\fP (const \fBfc::sha256\fP &offset) const"
.br
.ti -1c
.RI "\fBpublic_key\fP (\fBpublic_key\fP &&pk)"
.br
.ti -1c
.RI "\fBpublic_key\fP & \fBoperator=\fP (\fBpublic_key\fP &&pk)"
.br
.ti -1c
.RI "\fBpublic_key\fP & \fBoperator=\fP (const \fBpublic_key\fP &pk)"
.br
.ti -1c
.RI "std::string \fBto_base58\fP () const"
.br
.RI "Allows to convert current public key object into base58 number\&. "
.ti -1c
.RI "unsigned int \fBfingerprint\fP () const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static std::string \fBto_base58\fP (const \fBpublic_key_data\fP &key)"
.br
.ti -1c
.RI "static \fBpublic_key\fP \fBfrom_base58\fP (const std::string &b58)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBprivate_key\fP"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBpublic_key\fP &a, const \fBpublic_key\fP &b)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBpublic_key\fP &a, const \fBpublic_key\fP &b)"
.br
.in -1c
.SH "Detailed Description"
.PP 
contains only the public point of an elliptic curve key\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBpublic_key\fP public_key::add (const \fBfc::sha256\fP & offset) const"
Computes new pubkey = generator * offset + old pubkey ?! Computes new pubkey = regenerate(offset)\&.pubkey + old pubkey = offset * \fBG\fP + 1 * old pubkey ?! 

.SH "Author"
.PP 
Generated automatically by Doxygen for AcuteAngleChain from the source code\&.
