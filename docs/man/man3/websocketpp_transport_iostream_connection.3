.TH "websocketpp::transport::iostream::connection< config >" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
websocketpp::transport::iostream::connection< config >
.SH SYNOPSIS
.br
.PP
.PP
Inherits enable_shared_from_this< connection< config > >\&.
.PP
Inherited by \fBstub_con\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBconnection\fP< \fBconfig\fP > \fBtype\fP"
.br
.RI "\fBType\fP of this connection transport component\&. "
.ti -1c
.RI "typedef lib::shared_ptr< \fBtype\fP > \fBptr\fP"
.br
.RI "\fBType\fP of a shared pointer to this connection transport component\&. "
.ti -1c
.RI "typedef \fBconfig::concurrency_type\fP \fBconcurrency_type\fP"
.br
.RI "transport concurrency policy "
.ti -1c
.RI "typedef \fBconfig::alog_type\fP \fBalog_type\fP"
.br
.RI "\fBType\fP of this transport's access logging policy\&. "
.ti -1c
.RI "typedef \fBconfig::elog_type\fP \fBelog_type\fP"
.br
.RI "\fBType\fP of this transport's error logging policy\&. "
.ti -1c
.RI "typedef \fBconcurrency_type::scoped_lock_type\fP \fBscoped_lock_type\fP"
.br
.ti -1c
.RI "typedef \fBconcurrency_type::mutex_type\fP \fBmutex_type\fP"
.br
.ti -1c
.RI "typedef lib::shared_ptr< \fBtimer\fP > \fBtimer_ptr\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBconnection\fP (bool is_server, \fBalog_type\fP &alog, \fBelog_type\fP &elog)"
.br
.ti -1c
.RI "\fBptr\fP \fBget_shared\fP ()"
.br
.RI "Get a shared pointer to this component\&. "
.ti -1c
.RI "void \fBregister_ostream\fP (std::ostream *o)"
.br
.RI "Register a std::ostream with the transport for writing output\&. "
.ti -1c
.RI "void \fBset_uri\fP (\fBuri_ptr\fP)"
.br
.RI "Set uri hook\&. "
.ti -1c
.RI "size_t \fBread_some\fP (char const *buf, size_t len)"
.br
.RI "Manual input supply (read some) "
.ti -1c
.RI "size_t \fBread_all\fP (char const *buf, size_t len)"
.br
.RI "Manual input supply (read all) "
.ti -1c
.RI "size_t \fBreadsome\fP (char const *buf, size_t len)"
.br
.RI "Manual input supply (DEPRECATED) "
.ti -1c
.RI "void \fBeof\fP ()"
.br
.RI "Signal EOF\&. "
.ti -1c
.RI "void \fBfatal_error\fP ()"
.br
.RI "Signal transport error\&. "
.ti -1c
.RI "void \fBset_secure\fP (bool value)"
.br
.RI "Set whether or not this connection is secure\&. "
.ti -1c
.RI "bool \fBis_secure\fP () const"
.br
.RI "Tests whether or not the underlying transport is secure\&. "
.ti -1c
.RI "void \fBset_remote_endpoint\fP (std::string value)"
.br
.RI "Set human readable remote endpoint address\&. "
.ti -1c
.RI "std::string \fBget_remote_endpoint\fP () const"
.br
.RI "Get human readable remote endpoint address\&. "
.ti -1c
.RI "\fBconnection_hdl\fP \fBget_handle\fP () const"
.br
.RI "Get the connection handle\&. "
.ti -1c
.RI "timer_ptr \fBset_timer\fP (long, \fBtimer_handler\fP)"
.br
.RI "Call back a function after a period of time\&. "
.ti -1c
.RI "void \fBset_write_handler\fP (\fBwrite_handler\fP h)"
.br
.RI "Sets the write handler\&. "
.ti -1c
.RI "void \fBset_vector_write_handler\fP (\fBvector_write_handler\fP h)"
.br
.RI "Sets the vectored write handler\&. "
.ti -1c
.RI "void \fBset_shutdown_handler\fP (\fBshutdown_handler\fP h)"
.br
.RI "Sets the shutdown handler\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBinit\fP (\fBinit_handler\fP handler)"
.br
.RI "Initialize the connection transport\&. "
.ti -1c
.RI "void \fBasync_read_at_least\fP (size_t num_bytes, char *buf, size_t len, \fBread_handler\fP handler)"
.br
.RI "Initiate an async_read for at least num_bytes bytes into buf\&. "
.ti -1c
.RI "void \fBasync_write\fP (char const *buf, size_t len, \fBtransport::write_handler\fP handler)"
.br
.RI "Asyncronous Transport Write\&. "
.ti -1c
.RI "void \fBasync_write\fP (\fBstd::vector\fP< \fBbuffer\fP > const &bufs, \fBtransport::write_handler\fP handler)"
.br
.RI "Asyncronous Transport Write (scatter-gather) "
.ti -1c
.RI "void \fBset_handle\fP (\fBconnection_hdl\fP hdl)"
.br
.RI "Set Connection Handle\&. "
.ti -1c
.RI "lib::error_code \fBdispatch\fP (\fBdispatch_handler\fP handler)"
.br
.RI "Call given handler back within the transport's event system (if present) "
.ti -1c
.RI "void \fBasync_shutdown\fP (\fBtransport::shutdown_handler\fP handler)"
.br
.RI "Perform cleanup on socket shutdown_handler\&. "
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "std::istream & \fBoperator>>\fP (std::istream &in, \fBtype\fP &t)"
.br
.RI "Overloaded stream input operator\&. "
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "template<typename config > void \fBwebsocketpp::transport::iostream::connection\fP< \fBconfig\fP >::async_read_at_least (size_t num_bytes, char * buf, size_t len, \fBread_handler\fP handler)\fC [inline]\fP, \fC [protected]\fP"

.PP
Initiate an async_read for at least num_bytes bytes into buf\&. Initiates an async_read request for at least num_bytes bytes\&. The input will be read into buf\&. \fBA\fP maximum of len bytes will be input\&. When the operation is complete, handler will be called with the status and number of bytes read\&.
.PP
This method may or may not call handler from within the initial call\&. The application should be prepared to accept either\&.
.PP
The application should never call this method a second time before it has been called back for the first read\&. If this is done, the second read will be called back immediately with a double_read error\&.
.PP
If num_bytes or len are zero handler will be called back immediately indicating success\&.
.PP
\fBParameters:\fP
.RS 4
\fInum_bytes\fP Don't call handler until at least this many bytes have been read\&. 
.br
\fIbuf\fP The buffer to read bytes into 
.br
\fIlen\fP The size of buf\&. At maximum, this many bytes will be read\&. 
.br
\fIhandler\fP The callback to invoke when the operation is complete or ends in an error 
.RE
.PP

.SS "template<typename config > void \fBwebsocketpp::transport::iostream::connection\fP< \fBconfig\fP >::async_shutdown (\fBtransport::shutdown_handler\fP handler)\fC [inline]\fP, \fC [protected]\fP"

.PP
Perform cleanup on socket shutdown_handler\&. If a shutdown handler is set, call it and pass through its return error code\&. Otherwise assume there is nothing to do and pass through a success code\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandler\fP The \fCshutdown_handler\fP to call back when complete 
.RE
.PP

.SS "template<typename config > void \fBwebsocketpp::transport::iostream::connection\fP< \fBconfig\fP >::async_write (char const * buf, size_t len, \fBtransport::write_handler\fP handler)\fC [inline]\fP, \fC [protected]\fP"

.PP
Asyncronous Transport Write\&. Write len bytes in buf to the output method\&. Call handler to report success or failure\&. handler may or may not be called during async_write, but it must be safe for this to happen\&.
.PP
Will return 0 on success\&. Other possible errors (not exhaustive) output_stream_required: No output stream was registered to write to bad_stream: a ostream pass through error
.PP
This method will attempt to write to the registered ostream first\&. If an ostream is not registered it will use the write handler\&. If neither are registered then an error is passed up to the connection\&.
.PP
\fBParameters:\fP
.RS 4
\fIbuf\fP buffer to read bytes from 
.br
\fIlen\fP number of bytes to write 
.br
\fIhandler\fP Callback to invoke with operation status\&. 
.RE
.PP

.SS "template<typename config > void \fBwebsocketpp::transport::iostream::connection\fP< \fBconfig\fP >::async_write (\fBstd::vector\fP< \fBbuffer\fP > const & bufs, \fBtransport::write_handler\fP handler)\fC [inline]\fP, \fC [protected]\fP"

.PP
Asyncronous Transport Write (scatter-gather) Write a sequence of buffers to the output method\&. Call handler to report success or failure\&. handler may or may not be called during async_write, but it must be safe for this to happen\&.
.PP
Will return 0 on success\&. Other possible errors (not exhaustive) output_stream_required: No output stream was registered to write to bad_stream: a ostream pass through error
.PP
This method will attempt to write to the registered ostream first\&. If an ostream is not registered it will use the write handler\&. If neither are registered then an error is passed up to the connection\&.
.PP
\fBParameters:\fP
.RS 4
\fIbufs\fP vector of buffers to write 
.br
\fIhandler\fP Callback to invoke with operation status\&. 
.RE
.PP

.SS "template<typename config > lib::error_code \fBwebsocketpp::transport::iostream::connection\fP< \fBconfig\fP >::dispatch (\fBdispatch_handler\fP handler)\fC [inline]\fP, \fC [protected]\fP"

.PP
Call given handler back within the transport's event system (if present) Invoke a callback within the transport's event system if it has one\&. If it doesn't, the handler will be invoked immediately before this function returns\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandler\fP The callback to invoke
.RE
.PP
\fBReturns:\fP
.RS 4
Whether or not the transport was able to register the handler for callback\&. 
.RE
.PP

.SS "template<typename config > void \fBwebsocketpp::transport::iostream::connection\fP< \fBconfig\fP >::eof ()\fC [inline]\fP"

.PP
Signal EOF\&. Signals to the transport that data stream being read has reached EOF and that no more bytes may be read or written to/from the transport\&.
.PP
\fBSince:\fP
.RS 4
0\&.3\&.0-alpha4 
.RE
.PP

.SS "template<typename config > void \fBwebsocketpp::transport::iostream::connection\fP< \fBconfig\fP >::fatal_error ()\fC [inline]\fP"

.PP
Signal transport error\&. Signals to the transport that a fatal data stream error has occurred and that no more bytes may be read or written to/from the transport\&.
.PP
\fBSince:\fP
.RS 4
0\&.3\&.0-alpha4 
.RE
.PP

.SS "template<typename config > \fBconnection_hdl\fP \fBwebsocketpp::transport::iostream::connection\fP< \fBconfig\fP >::get_handle () const\fC [inline]\fP"

.PP
Get the connection handle\&. 
.PP
\fBReturns:\fP
.RS 4
The handle for this connection\&. 
.RE
.PP

.SS "template<typename config > std::string \fBwebsocketpp::transport::iostream::connection\fP< \fBconfig\fP >::get_remote_endpoint () const\fC [inline]\fP"

.PP
Get human readable remote endpoint address\&. The iostream transport has no information about the ultimate remote endpoint\&. It will return the string 'iostream transport'\&. The \fCset_remote_endpoint\fP method may be used by external network code to set a more accurate value\&.
.PP
This value is used in access and error logs and is available to the end application for including in user facing interfaces and messages\&.
.PP
\fBReturns:\fP
.RS 4
\fBA\fP string identifying the address of the remote endpoint 
.RE
.PP

.SS "template<typename config > void \fBwebsocketpp::transport::iostream::connection\fP< \fBconfig\fP >::init (\fBinit_handler\fP handler)\fC [inline]\fP, \fC [protected]\fP"

.PP
Initialize the connection transport\&. Initialize the connection's transport component\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandler\fP The \fCinit_handler\fP to call when initialization is done 
.RE
.PP

.SS "template<typename config > bool \fBwebsocketpp::transport::iostream::connection\fP< \fBconfig\fP >::is_secure () const\fC [inline]\fP"

.PP
Tests whether or not the underlying transport is secure\&. iostream transport will return false always because it has no information about the ultimate remote endpoint\&. This may or may not be accurate depending on the real source of bytes being input\&. The \fCset_secure\fP method may be used to flag connections that are secured by an external API
.PP
\fBReturns:\fP
.RS 4
Whether or not the underlying transport is secure 
.RE
.PP

.SS "template<typename config > size_t \fBwebsocketpp::transport::iostream::connection\fP< \fBconfig\fP >::read_all (char const * buf, size_t len)\fC [inline]\fP"

.PP
Manual input supply (read all) Similar to read_some, but continues to read until all bytes in the supplied buffer have been read or the connection runs out of read requests\&.
.PP
This method still may not read all of the bytes in the input buffer\&. if it doesn't it indicates that the connection was most likely closed or is in an error state where it is no longer accepting new input\&.
.PP
\fBSince:\fP
.RS 4
0\&.3\&.0
.RE
.PP
\fBParameters:\fP
.RS 4
\fIbuf\fP Char buffer to read into the websocket 
.br
\fIlen\fP Length of buf 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of characters from buf actually read\&. 
.RE
.PP

.SS "template<typename config > size_t \fBwebsocketpp::transport::iostream::connection\fP< \fBconfig\fP >::read_some (char const * buf, size_t len)\fC [inline]\fP"

.PP
Manual input supply (read some) Copies bytes from buf into WebSocket++'s input buffers\&. Bytes will be copied from the supplied buffer to fulfill any pending library reads\&. It will return the number of bytes successfully processed\&. If there are no pending reads read_some will return immediately\&. Not all of the bytes may be able to be read in one call\&.
.PP
\fBSince:\fP
.RS 4
0\&.3\&.0-alpha4
.RE
.PP
\fBParameters:\fP
.RS 4
\fIbuf\fP Char buffer to read into the websocket 
.br
\fIlen\fP Length of buf 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of characters from buf actually read\&. 
.RE
.PP

.SS "template<typename config > size_t \fBwebsocketpp::transport::iostream::connection\fP< \fBconfig\fP >::readsome (char const * buf, size_t len)\fC [inline]\fP"

.PP
Manual input supply (DEPRECATED) 
.PP
\fBDeprecated\fP
.RS 4
DEPRECATED in favor of \fBread_some()\fP 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBread_some()\fP 
.RE
.PP

.SS "template<typename config > void \fBwebsocketpp::transport::iostream::connection\fP< \fBconfig\fP >::register_ostream (std::ostream * o)\fC [inline]\fP"

.PP
Register a std::ostream with the transport for writing output\&. Register a std::ostream with the transport\&. All future writes will be done to this output stream\&.
.PP
\fBParameters:\fP
.RS 4
\fIo\fP \fBA\fP pointer to the ostream to use for output\&. 
.RE
.PP

.SS "template<typename config > void \fBwebsocketpp::transport::iostream::connection\fP< \fBconfig\fP >::set_handle (\fBconnection_hdl\fP hdl)\fC [inline]\fP, \fC [protected]\fP"

.PP
Set Connection Handle\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhdl\fP The new handle 
.RE
.PP

.SS "template<typename config > void \fBwebsocketpp::transport::iostream::connection\fP< \fBconfig\fP >::set_remote_endpoint (std::string value)\fC [inline]\fP"

.PP
Set human readable remote endpoint address\&. Sets the remote endpoint address returned by \fCget_remote_endpoint\fP\&. This value should be a human readable string that describes the remote endpoint\&. Typically an IP address or hostname, perhaps with a port\&. But may be something else depending on the nature of the underlying transport\&.
.PP
If none is set the default is 'iostream transport'\&.
.PP
\fBSince:\fP
.RS 4
0\&.3\&.0-alpha4
.RE
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP The remote endpoint address to set\&. 
.RE
.PP

.SS "template<typename config > void \fBwebsocketpp::transport::iostream::connection\fP< \fBconfig\fP >::set_secure (bool value)\fC [inline]\fP"

.PP
Set whether or not this connection is secure\&. The iostream transport does not provide any security features\&. As such it defaults to returning false when \fCis_secure\fP is called\&. However, the iostream transport may be used to wrap an external socket API that may provide secure transport\&. This method allows that external API to flag whether or not this connection is secure so that users of the WebSocket++ API will get more accurate information\&.
.PP
\fBSince:\fP
.RS 4
0\&.3\&.0-alpha4
.RE
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP Whether or not this connection is secure\&. 
.RE
.PP

.SS "template<typename config > void \fBwebsocketpp::transport::iostream::connection\fP< \fBconfig\fP >::set_shutdown_handler (\fBshutdown_handler\fP h)\fC [inline]\fP"

.PP
Sets the shutdown handler\&. The shutdown handler is called when the iostream transport receives a notification from the core library that it is finished with all read and write operations and that the underlying transport can be cleaned up\&.
.PP
If you are using iostream transport with another socket library, this is a good time to close/shutdown the socket for this connection\&.
.PP
The signature of the handler is \fClib::error_code (connection_hdl)\fP\&. The code returned will be reported and logged by the core library\&.
.PP
\fBSince:\fP
.RS 4
0\&.5\&.0
.RE
.PP
\fBParameters:\fP
.RS 4
\fIh\fP The handler to call on connection shutdown\&. 
.RE
.PP

.SS "template<typename config > timer_ptr \fBwebsocketpp::transport::iostream::connection\fP< \fBconfig\fP >::set_timer (long, \fBtimer_handler\fP)\fC [inline]\fP"

.PP
Call back a function after a period of time\&. Timers are not implemented in this transport\&. The timer pointer will always be empty\&. The handler will never be called\&.
.PP
\fBParameters:\fP
.RS 4
\fIduration\fP Length of time to wait in milliseconds 
.br
\fIcallback\fP The function to call back when the timer has expired 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP handle that can be used to cancel the timer if it is no longer needed\&. 
.RE
.PP

.SS "template<typename config > void \fBwebsocketpp::transport::iostream::connection\fP< \fBconfig\fP >::set_uri (\fBuri_ptr\fP)\fC [inline]\fP"

.PP
Set uri hook\&. Called by the endpoint as a connection is being established to provide the uri being connected to to the transport layer\&.
.PP
This transport policy doesn't use the uri so it is ignored\&.
.PP
\fBSince:\fP
.RS 4
0\&.6\&.0
.RE
.PP
\fBParameters:\fP
.RS 4
\fIu\fP The uri to set 
.RE
.PP

.SS "template<typename config > void \fBwebsocketpp::transport::iostream::connection\fP< \fBconfig\fP >::set_vector_write_handler (\fBvector_write_handler\fP h)\fC [inline]\fP"

.PP
Sets the vectored write handler\&. The vectored write handler is called when the iostream transport receives multiple chunks of data that need to be written to the appropriate output location\&. This handler can be used in conjunction with the write_handler in place of registering an ostream for output\&.
.PP
The sequence of buffers represents bytes that should be written consecutively and it is suggested to group the buffers into as few next layer packets as possible\&. Vector write is used to allow implementations that support it to coalesce writes into a single TCP packet or TLS segment for improved efficiency\&.
.PP
This is an optional handler\&. If it is not defined then multiple calls will be made to the standard write handler\&.
.PP
The signature of the handler is \fClib::error_code (connection_hdl, \fBstd::vector\fP<\fBwebsocketpp::transport::buffer\fP> const & bufs)\fP\&. The code returned will be reported and logged by the core library\&. The \fC\fBwebsocketpp::transport::buffer\fP\fP type is a struct with two data members\&. buf (char const *) and len (size_t)\&.
.PP
\fBSince:\fP
.RS 4
0\&.6\&.0
.RE
.PP
\fBParameters:\fP
.RS 4
\fIh\fP The handler to call when vectored data is to be written\&. 
.RE
.PP

.SS "template<typename config > void \fBwebsocketpp::transport::iostream::connection\fP< \fBconfig\fP >::set_write_handler (\fBwrite_handler\fP h)\fC [inline]\fP"

.PP
Sets the write handler\&. The write handler is called when the iostream transport receives data that needs to be written to the appropriate output location\&. This handler can be used in place of registering an ostream for output\&.
.PP
The signature of the handler is \fClib::error_code (connection_hdl, char const *, size_t)\fP The code returned will be reported and logged by the core library\&.
.PP
See also, set_vector_write_handler, for an optional write handler that allows more efficient handling of multiple writes at once\&.
.PP
\fBSee also:\fP
.RS 4
\fBset_vector_write_handler\fP
.RE
.PP
\fBSince:\fP
.RS 4
0\&.5\&.0
.RE
.PP
\fBParameters:\fP
.RS 4
\fIh\fP The handler to call when data is to be written\&. 
.RE
.PP

.SH "Friends And Related Function Documentation"
.PP 
.SS "template<typename config > std::istream& operator>> (std::istream & in, \fBtype\fP & t)\fC [friend]\fP"

.PP
Overloaded stream input operator\&. Attempts to read input from the given stream into the transport\&. Bytes will be extracted from the input stream to fulfill any pending reads\&. Input in this manner will only read until the current read buffer has been filled\&. Then it will signal the library to process the input\&. If the library's input handler adds a new async_read, additional bytes will be read, otherwise the input operation will end\&.
.PP
When this function returns one of the following conditions is true:
.IP "\(bu" 2
There is no outstanding read operation
.IP "\(bu" 2
There are no more bytes available in the input stream
.PP
.PP
You can use tellg() on the input stream to determine if all of the input bytes were read or not\&.
.PP
If there is no pending read operation when the input method is called, it will return immediately and tellg() will not have changed\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for AcuteAngleChain from the source code\&.
