.TH "contracts/test_api/test_api.hpp" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
contracts/test_api/test_api.hpp
.SH SYNOPSIS
.br
.PP
\fC#include 'test_api_common\&.hpp'\fP
.br
\fC#include <string>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBtest_types\fP"
.br
.ti -1c
.RI "struct \fBtest_print\fP"
.br
.ti -1c
.RI "struct \fBtest_action\fP"
.br
.ti -1c
.RI "struct \fBtest_math\fP"
.br
.ti -1c
.RI "struct \fBtest_db\fP"
.br
.ti -1c
.RI "struct \fBtest_multi_index\fP"
.br
.ti -1c
.RI "struct \fBtest_crypto\fP"
.br
.ti -1c
.RI "struct \fBtest_transaction\fP"
.br
.ti -1c
.RI "struct \fBtest_chain\fP"
.br
.ti -1c
.RI "struct \fBtest_fixedpoint\fP"
.br
.ti -1c
.RI "struct \fBtest_real\fP"
.br
.ti -1c
.RI "struct \fBtest_compiler_builtins\fP"
.br
.ti -1c
.RI "struct \fBtest_extended_memory\fP"
.br
.ti -1c
.RI "struct \fBtest_memory\fP"
.br
.ti -1c
.RI "struct \fBtest_checktime\fP"
.br
.ti -1c
.RI "struct \fBtest_permission\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBWASM_TEST_HANDLER\fP(CLASS,  METHOD)"
.br
.ti -1c
.RI "#define \fBWASM_TEST_HANDLER_EX\fP(CLASS,  METHOD)"
.br
.ti -1c
.RI "#define \fBWASM_TEST_ERROR_HANDLER\fP(CALLED_CLASS_STR,  CALLED_METHOD_STR,  HANDLER_CLASS,  HANDLER_METHOD)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBCopyright:\fP
.RS 4
defined in AcuteAngleChain/LICENSE\&.txt 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define WASM_TEST_ERROR_HANDLER(CALLED_CLASS_STR, CALLED_METHOD_STR, HANDLER_CLASS, HANDLER_METHOD)"
\fBValue:\fP
.PP
.nf
if( error_action == WASM_TEST_ACTION(CALLED_CLASS_STR, CALLED_METHOD_STR) ) { \
   HANDLER_CLASS::HANDLER_METHOD(error_dtrx); \
   return; \
}
.fi
.SS "#define WASM_TEST_HANDLER(CLASS, METHOD)"
\fBValue:\fP
.PP
.nf
if( action == WASM_TEST_ACTION(#CLASS, #METHOD) ) { \
     CLASS::METHOD(); \
     return; \
  }
.fi
.SS "#define WASM_TEST_HANDLER_EX(CLASS, METHOD)"
\fBValue:\fP
.PP
.nf
if( action == WASM_TEST_ACTION(#CLASS, #METHOD) ) { \
     CLASS::METHOD(receiver, code, action); \
     return; \
  }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for AcuteAngleChain from the source code\&.
