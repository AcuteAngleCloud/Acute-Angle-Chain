.TH "aacio::wallet::wallet_manager" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
aacio::wallet::wallet_manager
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <wallet_manager\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBwallet_manager\fP (const \fBwallet_manager\fP &)=delete"
.br
.ti -1c
.RI "\fBwallet_manager\fP (\fBwallet_manager\fP &&)=delete"
.br
.ti -1c
.RI "\fBwallet_manager\fP & \fBoperator=\fP (const \fBwallet_manager\fP &)=delete"
.br
.ti -1c
.RI "\fBwallet_manager\fP & \fBoperator=\fP (\fBwallet_manager\fP &&)=delete"
.br
.ti -1c
.RI "void \fBset_dir\fP (const boost::filesystem::path &p)"
.br
.ti -1c
.RI "void \fBset_timeout\fP (const std::chrono::seconds &t)"
.br
.ti -1c
.RI "void \fBset_timeout\fP (int64_t secs)"
.br
.ti -1c
.RI "void \fBset_aacio_key\fP (const std::string &key)"
.br
.ti -1c
.RI "\fBchain::signed_transaction\fP \fBsign_transaction\fP (const \fBchain::signed_transaction\fP &txn, const flat_set< \fBpublic_key_type\fP > &keys, const \fBchain::chain_id_type\fP &id)"
.br
.ti -1c
.RI "std::string \fBcreate\fP (const std::string &\fBname\fP)"
.br
.ti -1c
.RI "void \fBopen\fP (const std::string &\fBname\fP)"
.br
.ti -1c
.RI "\fBstd::vector\fP< std::string > \fBlist_wallets\fP ()"
.br
.ti -1c
.RI "\fBmap\fP< \fBpublic_key_type\fP, \fBprivate_key_type\fP > \fBlist_keys\fP ()"
.br
.ti -1c
.RI "flat_set< \fBpublic_key_type\fP > \fBget_public_keys\fP ()"
.br
.ti -1c
.RI "void \fBlock_all\fP ()"
.br
.RI "Locks all the unlocked wallets\&. "
.ti -1c
.RI "void \fBlock\fP (const std::string &\fBname\fP)"
.br
.ti -1c
.RI "void \fBunlock\fP (const std::string &\fBname\fP, const std::string &password)"
.br
.ti -1c
.RI "void \fBimport_key\fP (const std::string &\fBname\fP, const std::string &wif_key)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Provides associate of wallet name to wallet and manages the interaction with each wallet\&.
.PP
The name of the wallet is also used as part of the file name by \fBwallet_api\fP\&. See \fBwallet_manager::create\fP\&. No const methods because timeout may cause \fBlock_all()\fP to be called\&. 
.SH "Member Function Documentation"
.PP 
.SS "std::string aacio::wallet::wallet_manager::create (const std::string & name)"
Create a new wallet\&. \fBA\fP new wallet is created in file dir/{name}\&.wallet see set_dir\&. The new wallet is unlocked after creation\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP of the wallet and name of the file without ext \&.wallet\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Plaintext password that is needed to unlock wallet\&. Caller is responsible for saving password otherwise they will not be able to unlock their wallet\&. Note user supplied passwords are not supported\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBfc::exception\fP\fP if wallet with name already exists (or filename already exists) 
.RE
.PP

.SS "flat_set< \fBpublic_key_type\fP > aacio::wallet::wallet_manager::get_public_keys ()"

.PP
\fBReturns:\fP
.RS 4
\fBA\fP set of public keys from all unlocked wallets, use with \fBchain_controller::get_required_keys\fP\&. 
.RE
.PP

.SS "void aacio::wallet::wallet_manager::import_key (const std::string & name, const std::string & wif_key)"
Import private key into specified wallet\&. Imports a WIF Private \fBKey\fP into specified wallet\&. Wallet must be opened and unlocked\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP the name of the wallet to import into\&. 
.br
\fIwif_key\fP the WIF Private \fBKey\fP to import, e\&.g\&. 5Jgm1N6jp3iNbFM45kPtj66xmbqT9fSuVJgPWfnCSPgQanvW6mJ 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBfc::exception\fP\fP if wallet not found or locked\&. 
.RE
.PP

.SS "\fBmap\fP< \fBpublic_key_type\fP, \fBprivate_key_type\fP > aacio::wallet::wallet_manager::list_keys ()"

.PP
\fBReturns:\fP
.RS 4
\fBA\fP list of private keys from all unlocked wallets in wif format\&. 
.RE
.PP

.SS "\fBstd::vector\fP< std::string > aacio::wallet::wallet_manager::list_wallets ()"

.PP
\fBReturns:\fP
.RS 4
\fBA\fP list of wallet names with ' *' appended if the wallet is unlocked\&. 
.RE
.PP

.SS "void aacio::wallet::wallet_manager::lock (const std::string & name)"
Lock the specified wallet\&. No-op if wallet already locked\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP the name of the wallet to lock\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBfc::exception\fP\fP if wallet with name not found\&. 
.RE
.PP

.SS "void aacio::wallet::wallet_manager::open (const std::string & name)"
Open an existing wallet file dir/{name}\&.wallet\&. Note this does not unlock the wallet, see \fBwallet_manager::unlock\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP of the wallet file (minus ext \&.wallet) to open\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBfc::exception\fP\fP if unable to find/open the wallet file\&. 
.RE
.PP

.SS "void aacio::wallet::wallet_manager::set_dir (const boost::filesystem::path & p)\fC [inline]\fP"
Set the path for location of wallet files\&. 
.PP
\fBParameters:\fP
.RS 4
\fIp\fP path to override default \&./ location of wallet files\&. 
.RE
.PP

.SS "void aacio::wallet::wallet_manager::set_timeout (const std::chrono::seconds & t)"
Set the timeout for locking all wallets\&. If set then after t seconds of inactivity then \fBlock_all()\fP\&. Activity is defined as any \fBwallet_manager\fP method call below\&. 
.SS "void aacio::wallet::wallet_manager::set_timeout (int64_t secs)\fC [inline]\fP"

.PP
\fBSee also:\fP
.RS 4
\fBwallet_manager::set_timeout(const std::chrono::seconds& t)\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIsecs\fP The timeout in seconds\&. 
.RE
.PP

.SS "\fBchain::signed_transaction\fP aacio::wallet::wallet_manager::sign_transaction (const \fBchain::signed_transaction\fP & txn, const flat_set< \fBpublic_key_type\fP > & keys, const \fBchain::chain_id_type\fP & id)"
Sign transaction with the private keys specified via their public keys\&. Use \fBchain_controller::get_required_keys\fP to determine which keys are needed for txn\&. 
.PP
\fBParameters:\fP
.RS 4
\fItxn\fP the transaction to sign\&. 
.br
\fIkeys\fP the public keys of the corresponding private keys to sign the transaction with 
.br
\fIid\fP the chain_id to sign transaction with\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
txn signed 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBfc::exception\fP\fP if corresponding private keys not found in unlocked wallets 
.RE
.PP

.SS "void aacio::wallet::wallet_manager::unlock (const std::string & name, const std::string & password)"
Unlock the specified wallet\&. The wallet remains unlocked until ::lock is called or program exit\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP the name of the wallet to lock\&. 
.br
\fIpassword\fP the plaintext password returned from ::create\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBfc::exception\fP\fP if wallet not found or invalid password\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for AcuteAngleChain from the source code\&.
