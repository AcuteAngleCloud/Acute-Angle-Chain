.TH "testUtils.Node" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
testUtils.Node
.SH SYNOPSIS
.br
.PP
.PP
Inherits object\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "def \fB__init__\fP (self, host, port, pid=None, cmd=None, alive=None, enableMongo=\fBFalse\fP, mongoHost='localhost', mongoPort=27017, mongoDb='AACtest')"
.br
.ti -1c
.RI "def \fB__str__\fP (self)"
.br
.ti -1c
.RI "def \fBsetWalletEndpointArgs\fP (self, args)"
.br
.ti -1c
.RI "def \fBgetBlock\fP (self, blockNum, retry=\fBTrue\fP, silentErrors=\fBFalse\fP)"
.br
.ti -1c
.RI "def \fBgetBlockById\fP (self, blockId, retry=\fBTrue\fP, silentErrors=\fBFalse\fP)"
.br
.ti -1c
.RI "def \fBdoesNodeHaveBlockNum\fP (self, blockNum)"
.br
.ti -1c
.RI "def \fBgetTransaction\fP (self, transId, retry=\fBTrue\fP, silentErrors=\fBFalse\fP)"
.br
.ti -1c
.RI "def \fBgetTransByBlockId\fP (self, blockId, retry=\fBTrue\fP, silentErrors=\fBFalse\fP)"
.br
.ti -1c
.RI "def \fBgetActionFromDb\fP (self, transId, retry=\fBTrue\fP, silentErrors=\fBFalse\fP)"
.br
.ti -1c
.RI "def \fBgetMessageFromDb\fP (self, transId, retry=\fBTrue\fP, silentErrors=\fBFalse\fP)"
.br
.ti -1c
.RI "def \fBdoesNodeHaveTransId\fP (self, transId)"
.br
.ti -1c
.RI "def \fBcreateInitAccounts\fP (self, \fBproducers\fP)"
.br
.ti -1c
.RI "def \fBcreateAccount\fP (self, \fBaccount\fP, creatorAccount, stakedDeposit=1000, waitForTransBlock=\fBFalse\fP)"
.br
.ti -1c
.RI "def \fBgetAacAccount\fP (self, name)"
.br
.ti -1c
.RI "def \fBgetAacAccountFromDb\fP (self, name)"
.br
.ti -1c
.RI "def \fBgetAacCurrencyBalance\fP (self, name)"
.br
.ti -1c
.RI "def \fBgetCurrencyBalance\fP (self, contract, \fBaccount\fP, symbol)"
.br
.ti -1c
.RI "def \fBgetCurrencyStats\fP (self, contract, symbol='')"
.br
.ti -1c
.RI "def \fBverifyAccount\fP (self, \fBaccount\fP)"
.br
.ti -1c
.RI "def \fBwaitForBlockNumOnNode\fP (self, blockNum, timeout=None)"
.br
.ti -1c
.RI "def \fBwaitForTransIdOnNode\fP (self, transId, timeout=None)"
.br
.ti -1c
.RI "def \fBwaitForNextBlock\fP (self, timeout=None)"
.br
.ti -1c
.RI "def \fBtransferFunds\fP (self, \fBsource\fP, destination, amount, memo='memo', force=\fBFalse\fP)"
.br
.ti -1c
.RI "def \fBvalidateSpreadFundsOnNode\fP (self, adminAccount, accounts, expectedTotal)"
.br
.ti -1c
.RI "def \fBgetSystemBalance\fP (self, adminAccount, accounts)"
.br
.ti -1c
.RI "def \fBgetAccountsByKey\fP (self, key)"
.br
.ti -1c
.RI "def \fBgetAccountsArrByKey\fP (self, key)"
.br
.ti -1c
.RI "def \fBgetServants\fP (self, name)"
.br
.ti -1c
.RI "def \fBgetServantsArr\fP (self, name)"
.br
.ti -1c
.RI "def \fBgetAccountBalance\fP (self, name)"
.br
.ti -1c
.RI "def \fBgetTransactionsByAccount\fP (self, name)"
.br
.ti -1c
.RI "def \fBgetTransactionsArrByAccount\fP (self, name)"
.br
.ti -1c
.RI "def \fBgetAccountCodeHash\fP (self, \fBaccount\fP)"
.br
.ti -1c
.RI "def \fBpublishContract\fP (self, \fBaccount\fP, contractDir, wastFile, abiFile, waitForTransBlock=\fBFalse\fP, shouldFail=\fBFalse\fP)"
.br
.ti -1c
.RI "def \fBcreateProducer\fP (self, \fBaccount\fP, ownerPublicKey, waitForTransBlock=\fBFalse\fP)"
.br
.ti -1c
.RI "def \fBgetTable\fP (self, \fBaccount\fP, contract, table)"
.br
.ti -1c
.RI "def \fBgetTableRows\fP (self, \fBaccount\fP, contract, table)"
.br
.ti -1c
.RI "def \fBgetTableRow\fP (self, \fBaccount\fP, contract, table, idx)"
.br
.ti -1c
.RI "def \fBgetTableColumns\fP (self, \fBaccount\fP, contract, table)"
.br
.ti -1c
.RI "def \fBpushMessage\fP (self, contract, \fBaction\fP, data, opts, silentErrors=\fBFalse\fP)"
.br
.ti -1c
.RI "def \fBsetPermission\fP (self, \fBaccount\fP, code, pType, requirement, waitForTransBlock=\fBFalse\fP)"
.br
.ti -1c
.RI "def \fBgetInfo\fP (self, silentErrors=\fBFalse\fP)"
.br
.ti -1c
.RI "def \fBgetBlockFromDb\fP (self, idx)"
.br
.ti -1c
.RI "def \fBcheckPulse\fP (self)"
.br
.ti -1c
.RI "def \fBgetHeadBlockNum\fP (self)"
.br
.ti -1c
.RI "def \fBgetIrreversibleBlockNum\fP (self)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "def \fBrunCmdReturnJson\fP (cmd, trace=\fBFalse\fP)"
.br
.ti -1c
.RI "def \fBrunCmdReturnStr\fP (cmd, trace=\fBFalse\fP)"
.br
.ti -1c
.RI "def \fBfilterJsonObject\fP (data)"
.br
.ti -1c
.RI "def \fBstdinAndCheckOutput\fP (cmd, subcommand)"
.br
.ti -1c
.RI "def \fBnormalizeJsonObject\fP (extJStr)"
.br
.ti -1c
.RI "def \fBrunMongoCmdReturnJson\fP (cmdArr, subcommand, trace=\fBFalse\fP)"
.br
.ti -1c
.RI "def \fBgetTransId_nj\fP (trans)"
.br
.ti -1c
.RI "def \fBgetTransId\fP (trans)"
.br
.ti -1c
.RI "def \fBbyteArrToStr\fP (arr)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBhost\fP"
.br
.ti -1c
.RI "\fBport\fP"
.br
.ti -1c
.RI "\fBpid\fP"
.br
.ti -1c
.RI "\fBcmd\fP"
.br
.ti -1c
.RI "\fBalive\fP"
.br
.ti -1c
.RI "\fBenableMongo\fP"
.br
.ti -1c
.RI "\fBmongoSyncTime\fP"
.br
.ti -1c
.RI "\fBmongoHost\fP"
.br
.ti -1c
.RI "\fBmongoPort\fP"
.br
.ti -1c
.RI "\fBmongoDb\fP"
.br
.ti -1c
.RI "\fBendpointArgs\fP"
.br
.ti -1c
.RI "\fBmongoEndpointArgs\fP"
.br
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "def testUtils\&.Node\&.createInitAccounts ( self,  producers)"

.PP
.nf
Initializes accounts. Requires aacio account. Creates init accounts and funds them.
.fi
.PP
 
.SS "def testUtils\&.Node\&.getTransId ( trans)\fC [static]\fP"

.PP
.nf
Retrieve transaction id from dictionary object.
.fi
.PP
 
.SS "def testUtils\&.Node\&.getTransId_nj ( trans)\fC [static]\fP"

.PP
.nf
Retrieve transaction id from claac non-json output.
.fi
.PP
 

.SH "Author"
.PP 
Generated automatically by Doxygen for AcuteAngleChain from the source code\&.
