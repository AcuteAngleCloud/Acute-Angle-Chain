.TH "aacio::chain::contracts::impl::abi_from_variant" 3 "Sun Jun 3 2018" "Acute-Angle-Chain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
aacio::chain::contracts::impl::abi_from_variant
.SH SYNOPSIS
.br
.PP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename M , typename Resolver , not_require_abi_t< M >  = 1> static void \fBextract\fP (const \fBvariant\fP &v, M &o, Resolver)"
.br
.ti -1c
.RI "template<typename M , typename Resolver , require_abi_t< M >  = 1> static void \fBextract\fP (const \fBvariant\fP &v, M &o, Resolver resolver)"
.br
.ti -1c
.RI "template<typename M , typename Resolver , require_abi_t< M >  = 1> static void \fBextract\fP (const \fBvariant\fP &v, \fBvector\fP< M > &o, Resolver resolver)"
.br
.ti -1c
.RI "template<typename Resolver > static void \fBextract\fP (const \fBvariant\fP &v, \fBaction\fP &act, Resolver resolver)"
.br
.ti -1c
.RI "template<typename Resolver > static void \fBextract\fP (const \fBvariant\fP &v, \fBpacked_transaction\fP &ptrx, Resolver resolver)"
.br
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "template<typename M , typename Resolver , require_abi_t< M > > void aacio::chain::contracts::impl::abi_from_variant::extract (const \fBvariant\fP & v, M & o, Resolver resolver)\fC [inline]\fP, \fC [static]\fP"
template which overloads extract for types which are not relvant to ABI information and can be degraded to the normal ::from_variant(\&.\&.\&.) processing 
.SS "template<typename M , typename Resolver , require_abi_t< M >  = 1> static void aacio::chain::contracts::impl::abi_from_variant::extract (const \fBvariant\fP & v, M & o, Resolver resolver)\fC [static]\fP"
template which overloads extract for types which contain ABI information in their trees for these types we create new ABI aware visitors 
.SS "template<typename M , typename Resolver , require_abi_t< M >  = 1> static void aacio::chain::contracts::impl::abi_from_variant::extract (const \fBvariant\fP & v, \fBvector\fP< M > & o, Resolver resolver)\fC [inline]\fP, \fC [static]\fP"
template which overloads extract for vectors of types which contain ABI information in their trees for these members we call ::extract in order to trigger further processing 
.SS "template<typename Resolver > static void aacio::chain::contracts::impl::abi_from_variant::extract (const \fBvariant\fP & v, \fBaction\fP & act, Resolver resolver)\fC [inline]\fP, \fC [static]\fP"
Non templated overload that has priority for the action structure this type has members which must be directly translated by the ABI so it is exploded and processed explicitly 

.SH "Author"
.PP 
Generated automatically by Doxygen for Acute-Angle-Chain from the source code\&.
