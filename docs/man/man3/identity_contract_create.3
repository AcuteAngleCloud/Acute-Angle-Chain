.TH "identity::contract< DeployToAccount >::create" 3 "Sun Jun 3 2018" "Acute-Angle-Chain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
identity::contract< DeployToAccount >::create
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <identity\&.hpp>\fP
.PP
Inherits \fBaacio::action_meta< code, N(create) >\fP\&.
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "account_name \fBcreator\fP"
.br
.ti -1c
.RI "uint64_t \fBidentity\fP = 0"
.br
.RI "first 32 bits determinsitically derived from creator and tapos "
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 

.SS "template<uint64_t DeployToAccount>
.br
struct identity::contract< DeployToAccount >::create"
This action create a new globally unique 64 bit identifier, to minimize collisions each account is automatically assigned a 32 bit identity prefix based upon hash(account_name) ^ hash(tapos)\&.
.PP
With this method no two accounts are likely to be assigned the same 32 bit prefix consistantly due to the constantly changing tapos\&. This prevents abuse of 'creator' selection to generate intentional conflicts with other users\&.
.PP
The creator can determine the last 32 bits using an algorithm of their choice\&. We presume the creator's algorithm can avoid collisions with itself\&.
.PP
Even if two accounts get a collision in first 32 bits, a proper creator algorithm should generate randomness in last 32 bits that will minimize collisions\&. In event of collision transaction will fail and creator can try again\&.
.PP
\fBA\fP 64 bit identity is used because the key is used frequently and it makes for more effecient tables/scopes/etc\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Acute-Angle-Chain from the source code\&.
