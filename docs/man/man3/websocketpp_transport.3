.TH "websocketpp::transport" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
websocketpp::transport \- Transport policies provide network connectivity and timers\&.  

.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBasio\fP"
.br
.RI "Transport policy that uses asio\&. "
.ti -1c
.RI " \fBdebug\fP"
.br
.ti -1c
.RI " \fBerror\fP"
.br
.RI "Generic transport related errors\&. "
.ti -1c
.RI " \fBiostream\fP"
.br
.RI "Transport policy that uses STL iostream for I/O and does not support timers\&. "
.ti -1c
.RI " \fBstub\fP"
.br
.RI "Stub transport policy that has no input or output\&. "
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBbuffer\fP"
.br
.RI "\fBA\fP simple utility buffer class\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef lib::function< void(lib::error_code const &)> \fBinit_handler\fP"
.br
.RI "The type and signature of the callback passed to the init hook\&. "
.ti -1c
.RI "typedef lib::function< void(lib::error_code const &, size_t)> \fBread_handler\fP"
.br
.RI "The type and signature of the callback passed to the read method\&. "
.ti -1c
.RI "typedef lib::function< void(lib::error_code const &)> \fBwrite_handler\fP"
.br
.RI "The type and signature of the callback passed to the write method\&. "
.ti -1c
.RI "typedef lib::function< void(lib::error_code const &)> \fBtimer_handler\fP"
.br
.RI "The type and signature of the callback passed to the read method\&. "
.ti -1c
.RI "typedef lib::function< void(lib::error_code const &)> \fBshutdown_handler\fP"
.br
.RI "The type and signature of the callback passed to the shutdown method\&. "
.ti -1c
.RI "typedef lib::function< void()> \fBinterrupt_handler\fP"
.br
.RI "The type and signature of the callback passed to the interrupt method\&. "
.ti -1c
.RI "typedef lib::function< void()> \fBdispatch_handler\fP"
.br
.RI "The type and signature of the callback passed to the dispatch method\&. "
.ti -1c
.RI "typedef lib::function< void(lib::error_code const &)> \fBaccept_handler\fP"
.br
.RI "The type and signature of the callback passed to the accept method\&. "
.ti -1c
.RI "typedef lib::function< void(lib::error_code const &)> \fBconnect_handler\fP"
.br
.RI "The type and signature of the callback passed to the connect method\&. "
.in -1c
.SH "Detailed Description"
.PP 
Transport policies provide network connectivity and timers\&. 


.SS "Connection Interface"
.PP
Transport connection components needs to provide:
.PP
\fBinit\fP
.br
\fCvoid init(init_handler handler)\fP
.br
Called once shortly after construction to give the policy the chance to perform one time initialization\&. When complete, the policy must call the supplied \fCinit_handler\fP to continue setup\&. The handler takes one argument with the error code if any\&. If an error is returned here setup will fail and the connection will be aborted or terminated\&.
.PP
WebSocket++ will call init only once\&. The transport must call \fChandler\fP exactly once\&.
.PP
\fBasync_read_at_least\fP
.br
\fCvoid async_read_at_least(size_t num_bytes, char *buf, size_t len, read_handler handler)\fP
.br
start an async read for at least num_bytes and at most len bytes into buf\&. Call handler when done with number of bytes read\&.
.PP
WebSocket++ promises to have only one async_read_at_least in flight at a time\&. The transport must promise to only call read_handler once per async read\&.
.PP
\fBasync_write\fP
.br
\fCvoid async_write(const char* buf, size_t len, write_handler handler)\fP
.br
\fCvoid async_write(\fBstd::vector\fP<buffer> & bufs, write_handler handler)\fP
.br
Start a write of all of the data in buf or bufs\&. In second case data is written sequentially and in place without copying anything to a temporary location\&.
.PP
Websocket++ promises to have only one async_write in flight at a time\&. The transport must promise to only call the write_handler once per async write
.PP
\fBset_handle\fP
.br
\fCvoid set_handle(connection_hdl hdl)\fP
.br
Called by WebSocket++ to let this policy know the hdl to the connection\&. It may be stored for later use or ignored/discarded\&. This handle should be used if the policy adds any connection handlers\&. Connection handlers must be called with the handle as the first argument so that the handler code knows which connection generated the callback\&.
.PP
\fBset_timer\fP
.br
\fCtimer_ptr set_timer(long duration, timer_handler handler)\fP
.br
WebSocket++ uses the timers provided by the transport policy as the implementation of timers is often highly coupled with the implementation of the networking event loops\&.
.PP
Transport timer support is an optional feature\&. \fBA\fP transport method may elect to implement a dummy timer object and have this method return an empty pointer\&. If so, all timer related features of WebSocket++ core will be disabled\&. This includes many security features designed to prevent denial of service attacks\&. Use timer-free transport policies with caution\&.
.PP
\fBget_remote_endpoint\fP
.br
\fCstd::string get_remote_endpoint()\fP
.br
retrieve address of remote endpoint
.PP
\fBis_secure\fP
.br
\fCvoid is_secure()\fP
.br
whether or not the connection to the remote endpoint is secure
.PP
\fBdispatch\fP
.br
\fClib::error_code dispatch(dispatch_handler handler)\fP: invoke handler within the transport's event system if it uses one\&. Otherwise, this method should simply call \fChandler\fP immediately\&.
.PP
\fBasync_shutdown\fP
.br
\fCvoid async_shutdown(shutdown_handler handler)\fP
.br
Perform any cleanup necessary (if any)\&. Call \fChandler\fP when complete\&.
.PP
.SS "Endpoint Interface"
.PP
Transport endpoint components needs to provide:
.PP
\fBinit\fP
.br
\fClib::error_code init(transport_con_ptr tcon)\fP
.br
init is called by an endpoint once for each newly created connection\&. It's purpose is to give the transport policy the chance to perform any transport specific initialization that couldn't be done via the default constructor\&.
.PP
\fBis_secure\fP
.br
\fCbool is_secure() const\fP
.br
\fBTest\fP whether the transport component of this endpoint is capable of secure connections\&.
.PP
\fBasync_connect\fP
.br
\fCvoid async_connect(transport_con_ptr tcon, uri_ptr location, connect_handler handler)\fP
.br
Initiate a connection to \fClocation\fP using the given connection \fCtcon\fP\&. \fCtcon\fP is a pointer to the transport connection component of the connection\&. When complete, \fChandler\fP should be called with the the connection's \fCconnection_hdl\fP and any error that occurred\&.
.PP
\fBinit_logging\fP \fCvoid init_logging(alog_type * a, elog_type * e)\fP
.br
Called once after construction to provide pointers to the endpoint's access and error loggers\&. These may be stored and used to log messages or ignored\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for AcuteAngleChain from the source code\&.
