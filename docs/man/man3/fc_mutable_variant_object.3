.TH "fc::mutable_variant_object" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
fc::mutable_variant_object \- An order-perserving dictionary of variant's\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <variant_object\&.hpp>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBvariant_object::entry\fP \fBentry\fP"
.br
.RI "a key/value pair "
.ti -1c
.RI "typedef \fBstd::vector\fP< \fBentry\fP >::iterator \fBiterator\fP"
.br
.ti -1c
.RI "typedef \fBstd::vector\fP< \fBentry\fP >::const_iterator \fBconst_iterator\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBvariant\fP & \fBoperator[]\fP (const string &key)"
.br
.ti -1c
.RI "\fBvariant\fP & \fBoperator[]\fP (const char *key)"
.br
.ti -1c
.RI "template<typename T > \fBmutable_variant_object\fP (\fBT\fP &&v)"
.br
.ti -1c
.RI "\fBmutable_variant_object\fP (string key, \fBvariant\fP val)"
.br
.ti -1c
.RI "template<typename T > \fBmutable_variant_object\fP (string key, \fBT\fP &&val)"
.br
.ti -1c
.RI "\fBmutable_variant_object\fP (\fBmutable_variant_object\fP &&)"
.br
.ti -1c
.RI "\fBmutable_variant_object\fP (const \fBmutable_variant_object\fP &)"
.br
.ti -1c
.RI "\fBmutable_variant_object\fP (const \fBvariant_object\fP &)"
.br
.ti -1c
.RI "\fBmutable_variant_object\fP & \fBoperator=\fP (\fBmutable_variant_object\fP &&)"
.br
.ti -1c
.RI "\fBmutable_variant_object\fP & \fBoperator=\fP (const \fBmutable_variant_object\fP &)"
.br
.ti -1c
.RI "\fBmutable_variant_object\fP & \fBoperator=\fP (const \fBvariant_object\fP &)"
.br
.in -1c
.PP
.RI "\fBImmutable Interface\fP"
.br
Calling these methods will not result in copies of the underlying type\&. 
.PP
.in +1c
.in +1c
.ti -1c
.RI "iterator \fBbegin\fP () const"
.br
.ti -1c
.RI "iterator \fBend\fP () const"
.br
.ti -1c
.RI "iterator \fBfind\fP (const string &key) const"
.br
.ti -1c
.RI "iterator \fBfind\fP (const char *key) const"
.br
.ti -1c
.RI "const \fBvariant\fP & \fBoperator[]\fP (const string &key) const"
.br
.ti -1c
.RI "const \fBvariant\fP & \fBoperator[]\fP (const char *key) const"
.br
.ti -1c
.RI "size_t \fBsize\fP () const"
.br
.in -1c
.in -1c
.PP
.RI "\fBmutable Interface\fP"
.br
Calling these methods will result in a copy of the underlying type being created if there is more than one reference to this object\&. 
.PP
.in +1c
.in +1c
.ti -1c
.RI "void \fBreserve\fP (size_t s)"
.br
.ti -1c
.RI "iterator \fBbegin\fP ()"
.br
.ti -1c
.RI "iterator \fBend\fP ()"
.br
.ti -1c
.RI "void \fBerase\fP (const string &key)"
.br
.ti -1c
.RI "iterator \fBfind\fP (const string &key)"
.br
.ti -1c
.RI "iterator \fBfind\fP (const char *key)"
.br
.ti -1c
.RI "\fBmutable_variant_object\fP & \fBset\fP (string key, \fBvariant\fP var)"
.br
.ti -1c
.RI "\fBmutable_variant_object\fP & \fBoperator()\fP (string key, \fBvariant\fP var)"
.br
.ti -1c
.RI "template<typename T > \fBmutable_variant_object\fP & \fBoperator()\fP (string key, \fBT\fP &&var)"
.br
.ti -1c
.RI "\fBmutable_variant_object\fP & \fBoperator()\fP (const \fBvariant_object\fP &vo)"
.br
.ti -1c
.RI "\fBmutable_variant_object\fP & \fBoperator()\fP (const \fBmutable_variant_object\fP &\fBmvo\fP)"
.br
.in -1c
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBvariant_object\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
An order-perserving dictionary of variant's\&. 

Keys are kept in the order they are inserted\&. This dictionary implements copy-on-write
.PP
\fBNote:\fP
.RS 4
This class is not optimized for random-access on large sets of key-value pairs\&. 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "fc::mutable_variant_object::mutable_variant_object (string key, \fBvariant\fP val)"
initializes the first key/value pair in the object 
.SH "Member Function Documentation"
.PP 
.SS "mutable_variant_object::iterator fc::mutable_variant_object::find (const string & key)"

.PP
\fBReturns:\fP
.RS 4
end() if key is not found 
.RE
.PP

.SS "\fBmutable_variant_object\fP & fc::mutable_variant_object::operator() (string key, \fBvariant\fP var)"
Appends \fIkey\fP and \fIvar\fP without checking for duplicates, designed to simplify construction of dictionaries using (key,val)(key2,val2) syntax Convenience method to simplify the manual construction of \fBvariant_object\fP's
.PP
Instead of: \fC\fBmutable_variant_object\fP('c',c)\&.set('a',a)\&.set('b',b);\fP
.PP
You can use: \fC\fBmutable_variant_object\fP( 'c', c )( 'b', b)( 'c',c )\fP
.PP
\fBReturns:\fP
.RS 4
*this;
.RE
.PP
Appends \fIkey\fP and \fIvar\fP without checking for duplicates, designed to simplify construction of dictionaries using (key,val)(key2,val2) syntax 
.SS "\fBmutable_variant_object\fP & fc::mutable_variant_object::operator() (const \fBvariant_object\fP & vo)"
Copy a \fBvariant_object\fP into this \fBmutable_variant_object\fP\&. 
.SS "\fBmutable_variant_object\fP & fc::mutable_variant_object::operator() (const \fBmutable_variant_object\fP & mvo)"
Copy another \fBmutable_variant_object\fP into this \fBmutable_variant_object\fP\&. 
.SS "\fBmutable_variant_object\fP & fc::mutable_variant_object::set (string key, \fBvariant\fP var)"
replaces the value at \fIkey\fP with \fIvar\fP or insert's \fIkey\fP if not found 

.SH "Author"
.PP 
Generated automatically by Doxygen for AcuteAngleChain from the source code\&.
