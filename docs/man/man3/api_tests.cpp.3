.TH "tests/api_tests/api_tests.cpp" 3 "Sun Jun 3 2018" "Acute-Angle-Chain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tests/api_tests/api_tests.cpp
.SH SYNOPSIS
.br
.PP
\fC#include <algorithm>\fP
.br
\fC#include <random>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <vector>\fP
.br
\fC#include <iterator>\fP
.br
\fC#include <sstream>\fP
.br
\fC#include <numeric>\fP
.br
\fC#include <boost/test/unit_test\&.hpp>\fP
.br
\fC#include <boost/iostreams/concepts\&.hpp>\fP
.br
\fC#include <boost/iostreams/stream_buffer\&.hpp>\fP
.br
\fC#include <boost/algorithm/string/predicate\&.hpp>\fP
.br
\fC#include <aacio/testing/tester\&.hpp>\fP
.br
\fC#include <aacio/chain/chain_controller\&.hpp>\fP
.br
\fC#include <aacio/chain/exceptions\&.hpp>\fP
.br
\fC#include <aacio/chain/account_object\&.hpp>\fP
.br
\fC#include <aacio/chain/contracts/contract_table_objects\&.hpp>\fP
.br
\fC#include <aacio/chain/block_summary_object\&.hpp>\fP
.br
\fC#include <aacio/chain/wasm_interface\&.hpp>\fP
.br
\fC#include <fc/crypto/digest\&.hpp>\fP
.br
\fC#include <fc/crypto/sha256\&.hpp>\fP
.br
\fC#include <fc/exception/exception\&.hpp>\fP
.br
\fC#include <fc/variant_object\&.hpp>\fP
.br
\fC#include <Inline/BasicTypes\&.h>\fP
.br
\fC#include <IR/Module\&.h>\fP
.br
\fC#include <IR/Validate\&.h>\fP
.br
\fC#include <WAST/WAST\&.h>\fP
.br
\fC#include <WASM/WASM\&.h>\fP
.br
\fC#include <Runtime/Runtime\&.h>\fP
.br
\fC#include <test_api/test_api\&.wast\&.hpp>\fP
.br
\fC#include <test_api_mem/test_api_mem\&.wast\&.hpp>\fP
.br
\fC#include <test_api_db/test_api_db\&.wast\&.hpp>\fP
.br
\fC#include <test_api_multi_index/test_api_multi_index\&.wast\&.hpp>\fP
.br
\fC#include <test_api/test_api_common\&.hpp>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBtest_api_action< NAME >\fP"
.br
.ti -1c
.RI "struct \fBtest_chain_action< NAME >\fP"
.br
.ti -1c
.RI "struct \fBcheck_auth\fP"
.br
.ti -1c
.RI "struct \fBassert_message_is\fP"
.br
.ti -1c
.RI "struct \fBMySink\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBDISABLE_AACLIB_SERIALIZE\fP"
.br
.ti -1c
.RI "#define \fBTESTER\fP   \fBvalidating_tester\fP"
.br
.ti -1c
.RI "#define \fBCALL_TEST_FUNCTION\fP(_TESTER,  CLS,  MTH,  DATA)   CallFunction(_TESTER, \fBtest_api_action\fP<TEST_METHOD(CLS, MTH)>{}, DATA)"
.br
.ti -1c
.RI "#define \fBCALL_TEST_FUNCTION_SYSTEM\fP(_TESTER,  CLS,  MTH,  DATA)   CallFunction(_TESTER, \fBtest_chain_action\fP<TEST_METHOD(CLS, MTH)>{}, DATA, {\fBN\fP(aacio)} )"
.br
.ti -1c
.RI "#define \fBCALL_TEST_FUNCTION_SCOPE\fP(_TESTER,  CLS,  MTH,  DATA,  ACCOUNT)   CallFunction(_TESTER, \fBtest_api_action\fP<TEST_METHOD(CLS, MTH)>{}, DATA, ACCOUNT)"
.br
.ti -1c
.RI "#define \fBCALL_TEST_FUNCTION_AND_CHECK_EXCEPTION\fP(_TESTER,  CLS,  MTH,  DATA,  EXC,  EXC_MESSAGE)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBFC_REFLECT\fP (\fBdummy_action\fP,(a)(b)(c))"
.br
.ti -1c
.RI "\fBFC_REFLECT\fP (\fBu128_action\fP,(values))"
.br
.ti -1c
.RI "\fBFC_REFLECT\fP (\fBcf_action\fP,(payload)(cfd_idx))"
.br
.ti -1c
.RI "\fBFC_REFLECT_TEMPLATE\fP ((uint64_t \fBT\fP), \fBtest_api_action\fP< \fBT\fP >, BOOST_PP_SEQ_NIL)"
.br
.ti -1c
.RI "\fBFC_REFLECT_TEMPLATE\fP ((uint64_t \fBT\fP), \fBtest_chain_action\fP< \fBT\fP >, BOOST_PP_SEQ_NIL)"
.br
.ti -1c
.RI "\fBFC_REFLECT\fP (\fBcheck_auth\fP,(\fBaccount\fP)(permission)(pubkeys))"
.br
.ti -1c
.RI "bool \fBexpect_assert_message\fP (const \fBfc::exception\fP &ex, string \fBexpected\fP)"
.br
.ti -1c
.RI "constexpr uint64_t \fBTEST_METHOD\fP (const char *CLASS, const char *METHOD)"
.br
.ti -1c
.RI "string \fBI64Str\fP (int64_t i)"
.br
.ti -1c
.RI "string \fBU64Str\fP (uint64_t i)"
.br
.ti -1c
.RI "string \fBU128Str\fP (unsigned __int128 i)"
.br
.ti -1c
.RI "template<typename T > \fBtransaction_trace\fP \fBCallAction\fP (TESTER &\fBtest\fP, \fBT\fP ac, const \fBvector\fP< account_name > &scope={\fBN\fP(testapi)})"
.br
.ti -1c
.RI "template<typename T > \fBtransaction_trace\fP \fBCallFunction\fP (TESTER &\fBtest\fP, \fBT\fP ac, const \fBvector\fP< char > &data, const \fBvector\fP< account_name > &scope={\fBN\fP(testapi)})"
.br
.ti -1c
.RI "bool \fBis_access_violation\fP (\fBfc::unhandled_exception\fP const &e)"
.br
.ti -1c
.RI "bool \fBis_access_violation\fP (const \fBRuntime::Exception\fP &e)"
.br
.ti -1c
.RI "bool \fBis_assert_exception\fP (fc::assert_exception const &e)"
.br
.ti -1c
.RI "bool \fBis_page_memory_error\fP (page_memory_error const &e)"
.br
.ti -1c
.RI "bool \fBis_tx_missing_auth\fP (tx_missing_auth const &e)"
.br
.ti -1c
.RI "bool \fBis_tx_missing_recipient\fP (tx_missing_recipient const &e)"
.br
.ti -1c
.RI "bool \fBis_tx_missing_sigs\fP (tx_missing_sigs const &e)"
.br
.ti -1c
.RI "bool \fBis_wasm_execution_error\fP (aacio::chain::wasm_execution_error const &e)"
.br
.ti -1c
.RI "bool \fBis_tx_resource_exhausted\fP (const tx_resource_exhausted &e)"
.br
.ti -1c
.RI "bool \fBis_checktime_exceeded\fP (const checktime_exceeded &e)"
.br
.ti -1c
.RI "\fBBOOST_FIXTURE_TEST_CASE\fP (action_tests, TESTER)"
.br
.ti -1c
.RI "\fBBOOST_FIXTURE_TEST_CASE\fP (cf_action_tests, TESTER)"
.br
.ti -1c
.RI "\fBBOOST_FIXTURE_TEST_CASE\fP (cfa_tx_signature, TESTER)"
.br
.ti -1c
.RI "\fBFC_LOG_AND_RETHROW\fP () BOOST_FIXTURE_TEST_CASE(checktime_pass_tests"
.br
.ti -1c
.RI "\fBBOOST_FIXTURE_TEST_CASE\fP (chain_tests, TESTER)"
.br
.ti -1c
.RI "\fBBOOST_FIXTURE_TEST_CASE\fP (db_tests, TESTER)"
.br
.ti -1c
.RI "\fBBOOST_FIXTURE_TEST_CASE\fP (multi_index_tests, TESTER)"
.br
.ti -1c
.RI "\fBBOOST_FIXTURE_TEST_CASE\fP (fixedpoint_tests, TESTER)"
.br
.ti -1c
.RI "\fBBOOST_FIXTURE_TEST_CASE\fP (real_tests, TESTER)"
.br
.ti -1c
.RI "\fBBOOST_FIXTURE_TEST_CASE\fP (crypto_tests, TESTER)"
.br
.ti -1c
.RI "\fBBOOST_FIXTURE_TEST_CASE\fP (memory_tests, TESTER)"
.br
.ti -1c
.RI "\fBBOOST_FIXTURE_TEST_CASE\fP (extended_memory_test_initial_memory, TESTER)"
.br
.ti -1c
.RI "\fBBOOST_FIXTURE_TEST_CASE\fP (extended_memory_test_page_memory, TESTER)"
.br
.ti -1c
.RI "\fBBOOST_FIXTURE_TEST_CASE\fP (extended_memory_test_page_memory_exceeded, TESTER)"
.br
.ti -1c
.RI "\fBBOOST_FIXTURE_TEST_CASE\fP (extended_memory_test_page_memory_negative_bytes, TESTER)"
.br
.ti -1c
.RI "\fBBOOST_FIXTURE_TEST_CASE\fP (print_tests, TESTER)"
.br
.ti -1c
.RI "\fBBOOST_FIXTURE_TEST_CASE\fP (math_tests, TESTER)"
.br
.ti -1c
.RI "\fBBOOST_FIXTURE_TEST_CASE\fP (types_tests, TESTER)"
.br
.ti -1c
.RI "\fBBOOST_FIXTURE_TEST_CASE\fP (permission_tests, TESTER)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBstd::vector\fP< std::string > \fBcapture\fP"
.br
.ti -1c
.RI "uint32_t \fBlast_fnc_err\fP = 0"
.br
.ti -1c
.RI "\fBTESTER\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBCopyright:\fP
.RS 4
defined in Acute-Angle-Chain/LICENSE\&.txt 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define CALL_TEST_FUNCTION_AND_CHECK_EXCEPTION(_TESTER, CLS, MTH, DATA, EXC, EXC_MESSAGE)"
\fBValue:\fP
.PP
.nf
BOOST_CHECK_EXCEPTION( \
   CALL_TEST_FUNCTION( _TESTER, CLS, MTH, DATA), \
                       EXC, \
                       [](const EXC& e) { \
                          return expect_assert_message(e, EXC_MESSAGE); \
                     } \
);
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Acute-Angle-Chain from the source code\&.
