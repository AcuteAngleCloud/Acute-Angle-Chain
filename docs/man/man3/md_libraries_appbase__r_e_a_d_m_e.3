.TH "md_libraries_appbase__r_e_a_d_m_e" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_libraries_appbase__r_e_a_d_m_e \- AppBase 
The AppBase library provides a basic framework for building applications from a set of plugins\&. AppBase manages the plugin life-cycle and ensures that all plugins are configured, initialized, started, and shutdown in the proper order\&.
.PP
.SS "\fBKey\fP Features"
.PP
.IP "\(bu" 2
Dynamically Specify Plugins to Load
.IP "\(bu" 2
Automatically Load Dependent Plugins in Order
.IP "\(bu" 2
Plugins can specify commandline arguments and configuration file options
.IP "\(bu" 2
Program gracefully exits from SIGINT and SIGTERM
.IP "\(bu" 2
Minimal Dependencies (Boost 1\&.60, c++14)
.PP
.PP
.SS "Defining a Plugin"
.PP
\fBA\fP simple example of a 2-plugin application can be found in the /examples directory\&. Each plugin has a simple life cycle:
.PP
.IP "1." 4
Initialize - parse configuration file options
.IP "2." 4
Startup - start executing, using configuration file options
.IP "3." 4
Shutdown - stop everything and free all resources
.PP
.PP
All plugins complete the Initialize step before any plugin enters the Startup step\&. Any dependent plugin specified by \fCAPPBASE_PLUGIN_REQUIRES\fP will be Initialized or Started prior to the plugin being Initialized or Started\&.
.PP
Shutdown is called in the reverse order of Startup\&.
.PP
.PP
.nf
class net_plugin : public appbase::plugin<net_plugin>
{
   public:
     net_plugin(){};
     ~net_plugin(){};

     APPBASE_PLUGIN_REQUIRES( (chain_plugin) );

     virtual void set_program_options( options_description& cli, options_description& cfg ) override
     {
        cfg\&.add_options()
              ("listen-endpoint", bpo::value<string>()->default_value( "127\&.0\&.0\&.1:9876" ), "The local IP address and port to listen for incoming connections\&.")
              ("remote-endpoint", bpo::value< vector<string> >()->composing(), "The IP address and port of a remote peer to sync with\&.")
              ("public-endpoint", bpo::value<string>()->default_value( "0\&.0\&.0\&.0:9876" ), "The public IP address and port that should be advertized to peers\&.")
              ;
     }

     void plugin_initialize( const variables_map& options ) { std::cout << "initialize net plugin\n"; }
     void plugin_startup()  { std::cout << "starting net plugin \n"; }
     void plugin_shutdown() { std::cout << "shutdown net plugin \n"; }

};

int main( int argc, char** argv ) {
   try {
      appbase::app()\&.register_plugin<net_plugin>(); // implict registration of chain_plugin dependency
      if( !appbase::app()\&.initialize( argc, argv ) )
         return -1;
      appbase::app()\&.startup();
      appbase::app()\&.exec();
   } catch ( const boost::exception& e ) {
      std::cerr << boost::diagnostic_information(e) << "\n";
   } catch ( const std::exception& e ) {
      std::cerr << e\&.what() << "\n";
   } catch ( \&.\&.\&. ) {
      std::cerr << "unknown exception\n";
   }
   std::cout << "exited cleanly\n";
   return 0;
}
.fi
.PP
.PP
This example can be used like follows:
.PP
.PP
.nf
\&./examples/appbase_example --plugin net_plugin
initialize chain plugin
initialize net plugin
starting chain plugin
starting net plugin
^C
shutdown net plugin
shutdown chain plugin
exited cleanly
.fi
.PP
.PP
.SS "Boost ASIO"
.PP
AppBase maintains a singleton \fCapplication\fP instance which can be accessed via \fCappbase::app()\fP\&. This application owns a \fCboost::asio::io_service\fP which starts running when \fCappbase::exec()\fP is called\&. If a plugin needs to perform IO or other asynchronous operations then it should dispatch it via \fCapp()\&.get_io_service()\&.post( lambda )\fP\&. 
.br
 Because the app calls \fCio_service::run()\fP from within \fCapplication::exec()\fP all asynchronous operations posted to the io_service should be run in the same thread\&. 
.br
 
.SS "Graceful Exit"
.PP
To trigger a graceful exit call \fCappbase::app()\&.quit()\fP or send SIGTERM or SIGINT to the process\&.
.PP
.SS "Dependencies"
.PP
.IP "1." 4
c++14 or newer (clang or g++)
.IP "2." 4
Boost 1\&.60 or newer compiled with C++14 support
.PP
.PP
To compile boost with c++14 use:
.PP
.PP
.nf
\&./b2 \&.\&.\&.  cxxflags="-std=c++0x -stdlib=libc++" linkflags="-stdlib=libc++" \&.\&.\&.
.fi
.PP
 
