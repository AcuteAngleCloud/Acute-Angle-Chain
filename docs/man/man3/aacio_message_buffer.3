.TH "aacio::message_buffer< buffer_len >" 3 "Sun Jun 3 2018" "Acute-Angle-Chain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
aacio::message_buffer< buffer_len > \- abstraction for a message buffer that spans a chain of physical buffers  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <message_buffer\&.hpp>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef std::pair< uint32_t, uint32_t > \fBindex_t\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBindex_t\fP \fBread_index\fP () const"
.br
.ti -1c
.RI "\fBindex_t\fP \fBwrite_index\fP () const"
.br
.ti -1c
.RI "char * \fBread_ptr\fP ()"
.br
.ti -1c
.RI "char * \fBwrite_ptr\fP ()"
.br
.ti -1c
.RI "void \fBadd_buffer_to_chain\fP ()"
.br
.ti -1c
.RI "void \fBadd_space\fP (uint32_t \fBbytes\fP)"
.br
.ti -1c
.RI "void \fBreset\fP ()"
.br
.ti -1c
.RI "uint32_t \fBbytes_to_read\fP () const"
.br
.ti -1c
.RI "uint32_t \fBbytes_to_write\fP () const"
.br
.ti -1c
.RI "uint32_t \fBtotal_bytes\fP () const"
.br
.ti -1c
.RI "void \fBadvance_read_ptr\fP (uint32_t \fBbytes\fP)"
.br
.ti -1c
.RI "void \fBadvance_write_ptr\fP (uint32_t \fBbytes\fP)"
.br
.ti -1c
.RI "\fBstd::vector\fP< boost::asio::mutable_buffer > \fBget_buffer_sequence_for_boost_async_read\fP ()"
.br
.ti -1c
.RI "bool \fBread\fP (void *s, uint32_t size)"
.br
.ti -1c
.RI "bool \fBpeek\fP (void *s, uint32_t size, \fBindex_t\fP &index)"
.br
.ti -1c
.RI "\fBmb_datastream\fP< buffer_len > \fBcreate_datastream\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<uint32_t buffer_len>
.br
class aacio::message_buffer< buffer_len >"
abstraction for a message buffer that spans a chain of physical buffers 

This message buffer abstraction will allocate individual character arrays of size buffer_len from a boost::object_pool\&. It supports creation of a vector of boost::mutable_buffer for use with async_read() and async_read_some()\&. It also supports use with the fc unpack() functionality via a datastream helper class\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Acute-Angle-Chain from the source code\&.
