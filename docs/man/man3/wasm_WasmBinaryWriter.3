.TH "wasm::WasmBinaryWriter" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
wasm::WasmBinaryWriter
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBwasm::Visitor< WasmBinaryWriter, void >\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBBuffer\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBWasmBinaryWriter\fP (\fBModule\fP *input, \fBBufferWithRandomAccess\fP &o, bool debug)"
.br
.ti -1c
.RI "void \fBsetNamesSection\fP (bool \fBset\fP)"
.br
.ti -1c
.RI "void \fBsetSourceMap\fP (std::ostream *\fBset\fP, std::string url)"
.br
.ti -1c
.RI "void \fBsetSymbolMap\fP (std::string \fBset\fP)"
.br
.ti -1c
.RI "void \fBwrite\fP ()"
.br
.ti -1c
.RI "void \fBwriteHeader\fP ()"
.br
.ti -1c
.RI "int32_t \fBwriteU32LEBPlaceholder\fP ()"
.br
.ti -1c
.RI "void \fBwriteResizableLimits\fP (\fBAddress\fP initial, \fBAddress\fP maximum, bool hasMaximum)"
.br
.ti -1c
.RI "int32_t \fBstartSection\fP (BinaryConsts::Section code)"
.br
.ti -1c
.RI "void \fBfinishSection\fP (int32_t start)"
.br
.ti -1c
.RI "int32_t \fBstartSubsection\fP (BinaryConsts::UserSections::Subsection code)"
.br
.ti -1c
.RI "void \fBfinishSubsection\fP (int32_t start)"
.br
.ti -1c
.RI "void \fBwriteStart\fP ()"
.br
.ti -1c
.RI "void \fBwriteMemory\fP ()"
.br
.ti -1c
.RI "void \fBwriteTypes\fP ()"
.br
.ti -1c
.RI "int32_t \fBgetFunctionTypeIndex\fP (\fBName\fP type)"
.br
.ti -1c
.RI "void \fBwriteImports\fP ()"
.br
.ti -1c
.RI "void \fBmapLocals\fP (\fBFunction\fP *function)"
.br
.ti -1c
.RI "void \fBwriteFunctionSignatures\fP ()"
.br
.ti -1c
.RI "void \fBwriteExpression\fP (\fBExpression\fP *curr)"
.br
.ti -1c
.RI "void \fBwriteFunctions\fP ()"
.br
.ti -1c
.RI "void \fBwriteGlobals\fP ()"
.br
.ti -1c
.RI "void \fBwriteExports\fP ()"
.br
.ti -1c
.RI "void \fBwriteDataSegments\fP ()"
.br
.ti -1c
.RI "uint32_t \fBgetFunctionIndex\fP (\fBName\fP name)"
.br
.ti -1c
.RI "uint32_t \fBgetGlobalIndex\fP (\fBName\fP name)"
.br
.ti -1c
.RI "void \fBwriteFunctionTableDeclaration\fP ()"
.br
.ti -1c
.RI "void \fBwriteTableElements\fP ()"
.br
.ti -1c
.RI "void \fBwriteNames\fP ()"
.br
.ti -1c
.RI "void \fBwriteSourceMapUrl\fP ()"
.br
.ti -1c
.RI "void \fBwriteSymbolMap\fP ()"
.br
.ti -1c
.RI "void \fBwriteSourceMapProlog\fP ()"
.br
.ti -1c
.RI "void \fBwriteSourceMapEpilog\fP ()"
.br
.ti -1c
.RI "void \fBwriteDebugLocation\fP (size_t offset, const Function::DebugLocation &loc)"
.br
.ti -1c
.RI "void \fBwriteInlineString\fP (const char *name)"
.br
.ti -1c
.RI "void \fBwriteInlineBuffer\fP (const char *data, size_t size)"
.br
.ti -1c
.RI "void \fBemitBuffer\fP (const char *data, size_t size)"
.br
.ti -1c
.RI "void \fBemitString\fP (const char *str)"
.br
.ti -1c
.RI "void \fBfinishUp\fP ()"
.br
.ti -1c
.RI "void \fBrecurse\fP (\fBExpression\fP *&curr)"
.br
.ti -1c
.RI "void \fBvisit\fP (\fBExpression\fP *curr)"
.br
.ti -1c
.RI "void \fBvisitBlock\fP (\fBBlock\fP *curr)"
.br
.ti -1c
.RI "void \fBrecursePossibleBlockContents\fP (\fBExpression\fP *curr)"
.br
.ti -1c
.RI "void \fBvisitIf\fP (\fBIf\fP *curr)"
.br
.ti -1c
.RI "void \fBvisitLoop\fP (\fBLoop\fP *curr)"
.br
.ti -1c
.RI "int32_t \fBgetBreakIndex\fP (\fBName\fP name)"
.br
.ti -1c
.RI "void \fBvisitBreak\fP (\fBBreak\fP *curr)"
.br
.ti -1c
.RI "void \fBvisitSwitch\fP (\fBSwitch\fP *curr)"
.br
.ti -1c
.RI "void \fBvisitCall\fP (\fBCall\fP *curr)"
.br
.ti -1c
.RI "void \fBvisitCallImport\fP (\fBCallImport\fP *curr)"
.br
.ti -1c
.RI "void \fBvisitCallIndirect\fP (\fBCallIndirect\fP *curr)"
.br
.ti -1c
.RI "void \fBvisitGetLocal\fP (\fBGetLocal\fP *curr)"
.br
.ti -1c
.RI "void \fBvisitSetLocal\fP (\fBSetLocal\fP *curr)"
.br
.ti -1c
.RI "void \fBvisitGetGlobal\fP (\fBGetGlobal\fP *curr)"
.br
.ti -1c
.RI "void \fBvisitSetGlobal\fP (\fBSetGlobal\fP *curr)"
.br
.ti -1c
.RI "void \fBemitMemoryAccess\fP (size_t alignment, size_t bytes, uint32_t offset)"
.br
.ti -1c
.RI "void \fBvisitLoad\fP (\fBLoad\fP *curr)"
.br
.ti -1c
.RI "void \fBvisitStore\fP (\fBStore\fP *curr)"
.br
.ti -1c
.RI "void \fBvisitConst\fP (\fBConst\fP *curr)"
.br
.ti -1c
.RI "void \fBvisitUnary\fP (\fBUnary\fP *curr)"
.br
.ti -1c
.RI "void \fBvisitBinary\fP (\fBBinary\fP *curr)"
.br
.ti -1c
.RI "void \fBvisitSelect\fP (\fBSelect\fP *curr)"
.br
.ti -1c
.RI "void \fBvisitReturn\fP (\fBReturn\fP *curr)"
.br
.ti -1c
.RI "void \fBvisitHost\fP (\fBHost\fP *curr)"
.br
.ti -1c
.RI "void \fBvisitNop\fP (\fBNop\fP *curr)"
.br
.ti -1c
.RI "void \fBvisitUnreachable\fP (\fBUnreachable\fP *curr)"
.br
.ti -1c
.RI "void \fBvisitDrop\fP (\fBDrop\fP *curr)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBstd::map\fP< Index, size_t > \fBmappedLocals\fP"
.br
.ti -1c
.RI "\fBstd::map\fP< WasmType, size_t > \fBnumLocalsByType\fP"
.br
.ti -1c
.RI "\fBstd::map\fP< \fBName\fP, Index > \fBmappedFunctions\fP"
.br
.ti -1c
.RI "\fBstd::map\fP< \fBName\fP, uint32_t > \fBmappedGlobals\fP"
.br
.ti -1c
.RI "\fBstd::vector\fP< \fBBuffer\fP > \fBbuffersToWrite\fP"
.br
.ti -1c
.RI "int \fBdepth\fP = 0"
.br
.ti -1c
.RI "\fBstd::vector\fP< \fBName\fP > \fBbreakStack\fP"
.br
.ti -1c
.RI "Function::DebugLocation \fBlastDebugLocation\fP"
.br
.ti -1c
.RI "size_t \fBlastBytecodeOffset\fP"
.br
.in -1c

.SH "Author"
.PP 
Generated automatically by Doxygen for AcuteAngleChain from the source code\&.
