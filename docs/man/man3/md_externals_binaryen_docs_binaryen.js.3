.TH "md_externals_binaryen_docs_binaryen.js" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_externals_binaryen_docs_binaryen.js \- binaryen\&.js API 

.SS "Overview "
.PP
binaryen\&.js is a port of Binaryen to the Web, allowing you to generate WebAssembly using a JavaScript API\&. To get a feel for the API, see the 'hello world' test at \fCtest/binaryen\&.js/hello-world\&.js\fP, and other tests in that directory for more examples\&.
.PP
The API is documented in the rest of this document\&.
.PP
.SS "Types "
.PP
.IP "\(bu" 2
\fCBinaryen\&.none\fP: The none type\&.
.IP "\(bu" 2
\fCBinaryen\&.i32\fP: The i32 type\&.
.IP "\(bu" 2
\fCBinaryen\&.i64\fP: The i64 type\&.
.IP "\(bu" 2
\fCBinaryen\&.f32\fP: The f32 type\&.
.IP "\(bu" 2
\fCBinaryen\&.f64\fP: The f64 type\&.
.PP
.PP
.SS "Modules "
.PP
.IP "\(bu" 2
\fCBinaryen\&.Module()\fP: Constructor for a Binaryen WebAssembly module\&. You need to create one of these first\&.
.PP
.PP
\fCModule\fP instances have the following properties\&.
.PP
Module property operations:
.PP
.IP "\(bu" 2
\fCaddFunctionType(name, resultType, paramTypes)\fP: Add a function type to the module, with a specified name, result type, and param types\&.
.IP "\(bu" 2
\fCaddFunction(name, functionType, varTypes, body)\fP: Add a function, with a name, a function type, an array of local types, and a body\&.
.IP "\(bu" 2
\fCaddImport(internalName, externalModuleName, externalBaseName, functionType)\fP: Add an import, with an internal name (used by other things in the module), an external module name (the module from which we import), an external base name (the name we import from that module), and a function type (for function imports)\&.
.IP "\(bu" 2
\fCaddExport(internalName, externalName)\fP: Add an export, with an internal name and an external name (the name the outside sees it exported as)\&.
.IP "\(bu" 2
\fCsetFunctionTable(funcs)\fP: Sets the function table to a array of functions\&.
.IP "\(bu" 2
\fCsetMemory(initial, maximum, exportName, segments)\fP: Sets the memory to having an initial size, maximum size, optional export name, and array of data segments\&.
.IP "\(bu" 2
\fCsetStart(start)\fP: Sets the start function (called when the module is instantiated) to a specified function\&.
.PP
.PP
Module operations:
.PP
.IP "\(bu" 2
\fCemitBinary()\fP: Returns a binary for the module, which you can then compile and run in the browser\&.
.IP "\(bu" 2
\fCemitText()\fP: Returns a text representation of the module, in s-expression format\&.
.IP "\(bu" 2
\fC\fBvalidate()\fP\fP: Validates the module, checking it for correctness\&.
.IP "\(bu" 2
\fCoptimize()\fP: Optimize the module\&.
.IP "\(bu" 2
\fCautoDrop()\fP: Automatically inserts \fCdrop\fP operations\&. This lets you not worry about dropping when creating your code\&.
.IP "\(bu" 2
\fCinterpret()\fP: Run the module in the Binaryen interpreter (creates the module, and calls the start method)\&. Useful for debugging\&.
.IP "\(bu" 2
\fCdispose()\fP: Cleans up the module\&. If the Binaryen object can be garbage-collected anyhow, you don't need to do this, but if it stays around - e\&.g\&. if you create multiple \fCModule\fPs over time - then you should call this once a \fCModule\fP is no longer needed\&. (As binaryen\&.js uses compiled C++ code, we can't just rely on normal garbage collection to clean things up internally\&.)
.PP
.PP
Type-prefixed expressions:
.PP
.IP "\(bu" 2
\fCi32\fP:
.IP "  \(bu" 4
\fCi32\&.load(offset, align, ptr)\fP: Create a 32-bit load, with an offset, alignment, and pointer\&.
.IP "  \(bu" 4
\fCi32\&.load8_s(offset, align, ptr)\fP: Create an 8-bit signed load, with an offset, alignment, and pointer\&.
.IP "  \(bu" 4
\fCi32\&.load8_u(offset, align, ptr)\fP: Create an 8-bit unsigned load, with an offset, alignment, and pointer\&.
.IP "  \(bu" 4
\fCi32\&.load16_s(offset, align, ptr)\fP: Create an 16-bit signed load, with an offset, alignment, and pointer\&.
.IP "  \(bu" 4
\fCi32\&.load16_u(offset, align, ptr)\fP: Create an 16-bit unsigned load, with an offset, alignment, and pointer\&.
.IP "  \(bu" 4
\fCi32\&.store(offset, align, ptr, value)\fP: Create a 32-bit store, with an offset, alignment, pointer, and value\&.
.IP "  \(bu" 4
\fCi32\&.store8(offset, align, ptr, value)\fP: Create an 8-bit store, with an offset, alignment, pointer, and value\&.
.IP "  \(bu" 4
\fCi32\&.store16(offset, align, ptr, value)\fP: Create a 16-bit store, with an offset, alignment, pointer, and value\&.
.IP "  \(bu" 4
\fCi32\&.const(value)\fP: Create an \fCi32\fP constant of a specified value\&.
.IP "  \(bu" 4
\fCi32\&.clz(value)\fP: Create a count-leading-zeros of a specified value\&.
.IP "  \(bu" 4
\fCi32\&.ctz(value)\fP: Create a count-trailing-zeros of a specified value\&.
.IP "  \(bu" 4
\fCi32\&.popcnt(value)\fP: Create a population-count (number of bits set) of a specified value\&.
.IP "  \(bu" 4
\fCi32\&.eqz(value)\fP: Create an equal-zero of a specified value\&.
.IP "  \(bu" 4
\fCi32\&.trunc_s\&.f32(value)\fP: Create a signed truncate of an \fCf32\fP to an \fCi32\fP\&.
.IP "  \(bu" 4
\fCi32\&.trunc_s\&.f64(value)\fP: Create a signed truncate of an \fCf64\fP to an \fCi32\fP\&.
.IP "  \(bu" 4
\fCi32\&.trunc_u\&.f32(value)\fP: Create an unsigned truncate of an \fCf32\fP to an \fCi32\fP\&.
.IP "  \(bu" 4
\fCi32\&.trunc_u\&.f64(value)\fP: Create an unsigned truncate of an \fCf64\fP to an \fCi32\fP\&.
.IP "  \(bu" 4
\fCi32\&.reinterpret(value)\fP: Create a reinterpret of an \fCf32\fP to an \fCi32\fP\&.
.IP "  \(bu" 4
\fCi32\&.wrap(value)\fP: Create a wrap of an \fCi64\fP to an \fCi32\fP\&.
.IP "  \(bu" 4
\fCi32\&.add(left, right)\fP: Create an add of two \fCi32\fPs\&.
.IP "  \(bu" 4
\fCi32\&.sub(left, right)\fP: Create a subtract of two \fCi32\fPs\&.
.IP "  \(bu" 4
\fCi32\&.mul(left, right)\fP: Create a multiply of two \fCi32\fPs\&.
.IP "  \(bu" 4
\fCi32\&.div_s(left, right)\fP: Create a signed divide of two \fCi32\fPs\&.
.IP "  \(bu" 4
\fCi32\&.div_u(left, right)\fP: Create an unsigned divide of two \fCi32\fPs\&.
.IP "  \(bu" 4
\fCi32\&.rem_s(left, right)\fP: Create a signed remainder of two \fCi32\fPs\&.
.IP "  \(bu" 4
\fCi32\&.rem_u(left, right)\fP: Create an unsigned remainder of two \fCi32\fPs\&.
.IP "  \(bu" 4
\fCi32\&.and(left, right)\fP: Create an and of two \fCi32\fPs\&.
.IP "  \(bu" 4
\fCi32\&.or(left, right)\fP: Create an or of two \fCi32\fPs\&.
.IP "  \(bu" 4
\fCi32\&.xor(left, right)\fP: Create a xor of two \fCi32\fPs\&.
.IP "  \(bu" 4
\fCi32\&.shl(left, right)\fP: Create a shift left on two \fCi32\fPs\&.
.IP "  \(bu" 4
\fCi32\&.shr_u(left, right)\fP: Create an unsigned (logical) shift right on two \fCi32\fPs\&.
.IP "  \(bu" 4
\fCi32\&.shr_s(left, right)\fP: Create a signed (arithmetic) shift right on two \fCi32\fPs\&.
.IP "  \(bu" 4
\fCi32\&.rotl(left, right)\fP: Create a rotate-left on two \fCi32\fPs\&.
.IP "  \(bu" 4
\fCi32\&.rotr(left, right)\fP: Create a rotate-right on two \fCi32\fPs\&.
.IP "  \(bu" 4
\fCi32\&.eq(left, right)\fP: Create an equals on two \fCi32\fPs\&.
.IP "  \(bu" 4
\fCi32\&.ne(left, right)\fP: Create a not-equals on two \fCi32\fPs\&.
.IP "  \(bu" 4
\fCi32\&.lt_s(left, right)\fP: Create a signed less-than on two \fCi32\fPs\&.
.IP "  \(bu" 4
\fCi32\&.lt_u(left, right)\fP: Create an unsigned less-than on two \fCi32\fPs\&.
.IP "  \(bu" 4
\fCi32\&.le_s(left, right)\fP: Create a signed less-or-equal on two \fCi32\fPs\&.
.IP "  \(bu" 4
\fCi32\&.le_u(left, right)\fP: Create an unsigned less-or-equal on two \fCi32\fPs\&.
.IP "  \(bu" 4
\fCi32\&.gt_s(left, right)\fP: Create a signed greater-than on two \fCi32\fPs\&.
.IP "  \(bu" 4
\fCi32\&.gt_u(left, right)\fP: Create an unsigned greater-than on two \fCi32\fPs\&.
.IP "  \(bu" 4
\fCi32\&.ge_s(left, right)\fP: Create a signed greater-or-equal on two \fCi32\fPs\&.
.IP "  \(bu" 4
\fCi32\&.ge_u(left, right)\fP: Create an unsigned greater-or-equal on two \fCi32\fPs\&.
.PP

.IP "\(bu" 2
\fCi64\fP:
.IP "  \(bu" 4
\fCi64\&.load(offset, align, ptr)\fP: Create a 32-bit load, with an offset, alignment, and pointer\&.
.IP "  \(bu" 4
\fCi64\&.load8_s(offset, align, ptr)\fP: Create an 8-bit signed load, with an offset, alignment, and pointer\&.
.IP "  \(bu" 4
\fCi64\&.load8_u(offset, align, ptr)\fP: Create an 8-bit unsigned load, with an offset, alignment, and pointer\&.
.IP "  \(bu" 4
\fCi64\&.load16_s(offset, align, ptr)\fP: Create an 16-bit signed load, with an offset, alignment, and pointer\&.
.IP "  \(bu" 4
\fCi64\&.load16_u(offset, align, ptr)\fP: Create an 16-bit unsigned load, with an offset, alignment, and pointer\&.
.IP "  \(bu" 4
\fCi64\&.load32_s(offset, align, ptr)\fP: Create a 32-bit signed load, with an offset, alignment, and pointer\&.
.IP "  \(bu" 4
\fCi64\&.load32_u(offset, align, ptr)\fP: Create a 32-bit unsigned load, with an offset, alignment, and pointer\&.
.IP "  \(bu" 4
\fCi64\&.store(offset, align, ptr, value)\fP: Create a 32-bit store, with an offset, alignment, pointer, and value\&.
.IP "  \(bu" 4
\fCi64\&.store8(offset, align, ptr, value)\fP: Create an 8-bit store, with an offset, alignment, pointer, and value\&.
.IP "  \(bu" 4
\fCi64\&.store16(offset, align, ptr, value)\fP: Create a 16-bit store, with an offset, alignment, pointer, and value\&.
.IP "  \(bu" 4
\fCi64\&.store32(offset, align, ptr, value)\fP: Create a 32-bit store, with an offset, alignment, pointer, and value\&.
.IP "  \(bu" 4
\fCi64\&.const(low, high)\fP: Create an \fCi64\fP constant of a specified value, provided as low and high 32 bits\&.
.IP "  \(bu" 4
\fCi64\&.clz(value)\fP: Create a count-leading-zeros of a specified value\&.
.IP "  \(bu" 4
\fCi64\&.ctz(value)\fP: Create a count-trailing-zeros of a specified value\&.
.IP "  \(bu" 4
\fCi64\&.popcnt(value)\fP: Create a population-count (number of bits set) of a specified value\&.
.IP "  \(bu" 4
\fCi64\&.eqz(value)\fP: Create an equal-zero of a specified value\&.
.IP "  \(bu" 4
\fCi64\&.trunc_s\&.f32(value)\fP: Create a signed truncate of an \fCf32\fP to an \fCi64\fP\&.
.IP "  \(bu" 4
\fCi64\&.trunc_s\&.f64(value)\fP: Create a signed truncate of an \fCf64\fP to an \fCi64\fP\&.
.IP "  \(bu" 4
\fCi64\&.trunc_u\&.f32(value)\fP: Create an unsigned truncate of an \fCf32\fP to an \fCi64\fP\&.
.IP "  \(bu" 4
\fCi64\&.trunc_u\&.f64(value)\fP: Create an unsigned truncate of an \fCf64\fP to an \fCi64\fP\&.
.IP "  \(bu" 4
\fCi64\&.reinterpret(value)\fP: Create a reinterpret of an \fCf64\fP to an \fCi64\fP\&.
.IP "  \(bu" 4
\fCi64\&.extend_s(value)\fP: Create a signed extend of an \fCi32\fP to an \fCi64\fP\&.
.IP "  \(bu" 4
\fCi64\&.extend_u(value)\fP: Create an unsigned extend of an \fCi32\fP to an \fCi64\fP\&.
.IP "  \(bu" 4
\fCi64\&.add(left, right)\fP: Create an add of two \fCi64\fPs\&.
.IP "  \(bu" 4
\fCi64\&.sub(left, right)\fP: Create a subtract of two \fCi64\fPs\&.
.IP "  \(bu" 4
\fCi64\&.mul(left, right)\fP: Create a multiply of two \fCi64\fPs\&.
.IP "  \(bu" 4
\fCi64\&.div_s(left, right)\fP: Create a signed divide of two \fCi64\fPs\&.
.IP "  \(bu" 4
\fCi64\&.div_u(left, right)\fP: Create an unsigned divide of two \fCi64\fPs\&.
.IP "  \(bu" 4
\fCi64\&.rem_s(left, right)\fP: Create a signed remainder of two \fCi64\fPs\&.
.IP "  \(bu" 4
\fCi64\&.rem_u(left, right)\fP: Create an unsigned remainder of two \fCi64\fPs\&.
.IP "  \(bu" 4
\fCi64\&.and(left, right)\fP: Create an and of two \fCi64\fPs\&.
.IP "  \(bu" 4
\fCi64\&.or(left, right)\fP: Create an or of two \fCi64\fPs\&.
.IP "  \(bu" 4
\fCi64\&.xor(left, right)\fP: Create a xor of two \fCi64\fPs\&.
.IP "  \(bu" 4
\fCi64\&.shl(left, right)\fP: Create a shift left on two \fCi64\fPs\&.
.IP "  \(bu" 4
\fCi64\&.shr_u(left, right)\fP: Create an unsigned (logical) shift right on two \fCi64\fPs\&.
.IP "  \(bu" 4
\fCi64\&.shr_s(left, right)\fP: Create a signed (arithmetic) shift right on two \fCi64\fPs\&.
.IP "  \(bu" 4
\fCi64\&.rotl(left, right)\fP: Create a rotate-left on two \fCi64\fPs\&.
.IP "  \(bu" 4
\fCi64\&.rotr(left, right)\fP: Create a rotate-right on two \fCi64\fPs\&.
.IP "  \(bu" 4
\fCi64\&.eq(left, right)\fP: Create an equals on two \fCi64\fPs\&.
.IP "  \(bu" 4
\fCi64\&.ne(left, right)\fP: Create a not-equals on two \fCi64\fPs\&.
.IP "  \(bu" 4
\fCi64\&.lt_s(left, right)\fP: Create a signed less-than on two \fCi64\fPs\&.
.IP "  \(bu" 4
\fCi64\&.lt_u(left, right)\fP: Create an unsigned less-than on two \fCi64\fPs\&.
.IP "  \(bu" 4
\fCi64\&.le_s(left, right)\fP: Create a signed less-or-equal on two \fCi64\fPs\&.
.IP "  \(bu" 4
\fCi64\&.le_u(left, right)\fP: Create an unsigned less-or-equal on two \fCi64\fPs\&.
.IP "  \(bu" 4
\fCi64\&.gt_s(left, right)\fP: Create a signed greater-than on two \fCi64\fPs\&.
.IP "  \(bu" 4
\fCi64\&.gt_u(left, right)\fP: Create an unsigned greater-than on two \fCi64\fPs\&.
.IP "  \(bu" 4
\fCi64\&.ge_s(left, right)\fP: Create a signed greater-or-equal on two \fCi64\fPs\&.
.IP "  \(bu" 4
\fCi64\&.ge_u(left, right)\fP: Create an unsigned greater-or-equal on two \fCi64\fPs\&.
.PP

.IP "\(bu" 2
\fCf32\fP:
.IP "  \(bu" 4
\fCf32\&.load(offset, align, ptr)\fP: Create an \fCf32\fP load, with an offset, alignment, and pointer\&.
.IP "  \(bu" 4
\fCf32\&.store(offset, align, ptr, value)\fP: Create an \fCf32\fP store, with an offset, alignment, pointer, and value\&.
.IP "  \(bu" 4
\fCf32\&.const(value)\fP: Create an \fCf32\fP constant of a specified value\&.
.IP "  \(bu" 4
\fCf32\&.const_bits(value)\fP: Create an \fCf32\fP constant of a specified value, reinterpreting the bits (this is useful for creating weird NaNs)\&.
.IP "  \(bu" 4
\fCf32\&.neg(value)\fP: Create a negation of an \fCf32\fP\&.
.IP "  \(bu" 4
\fCf32\&.abs(value)\fP: Create a absolute value of an \fCf32\fP\&.
.IP "  \(bu" 4
\fCf32\&.ceil(value)\fP: Create a ceil of an \fCf32\fP\&.
.IP "  \(bu" 4
\fCf32\&.floor(value)\fP: Create a floor of an \fCf32\fP\&.
.IP "  \(bu" 4
\fCf32\&.trunc(value)\fP: Create a truncate of an \fCf32\fP\&.
.IP "  \(bu" 4
\fCf32\&.nearest(value)\fP: Create a nearest-value of an \fCf32\fP\&.
.IP "  \(bu" 4
\fCf32\&.sqrt(value)\fP: Create a square-root of an \fCf32\fP\&.
.IP "  \(bu" 4
\fCf32\&.reinterpret(value)\fP: Create a reinterpret of an \fCi32\fP to an \fCf32\fP\&.
.IP "  \(bu" 4
\fCf32\&.convert_s\&.i32(value)\fP: Create a signed conversion of an \fCi32\fP to an \fCf32\fP\&.
.IP "  \(bu" 4
\fCf32\&.convert_s\&.i64(value)\fP: Create a signed conversion of an \fCi64\fP to an \fCf32\fP\&.
.IP "  \(bu" 4
\fCf32\&.convert_u\&.i32(value)\fP: Create an unsigned conversion of an \fCi32\fP to an \fCf32\fP\&.
.IP "  \(bu" 4
\fCf32\&.convert_u\&.i64(value)\fP: Create an unsigned conversion of an \fCi64\fP to an \fCf32\fP\&.
.IP "  \(bu" 4
\fCf32\&.demote(value)\fP: Create a demotion of an \fCf64\fP to an \fCf32\fP\&.
.IP "  \(bu" 4
\fCf32\&.add(left, right)\fP: Create an add of two \fCf32\fPs\&.
.IP "  \(bu" 4
\fCf32\&.sub(left, right)\fP: Create a subtract of two \fCf32\fPs\&.
.IP "  \(bu" 4
\fCf32\&.mul(left, right)\fP: Create a multiply of two \fCf32\fPs\&.
.IP "  \(bu" 4
\fCf32\&.div(left, right)\fP: Create a divide of two \fCf32\fPs\&.
.IP "  \(bu" 4
\fCf32\&.copysign(left, right)\fP: Create a copysign (take magnitude of left, sign of right) of two \fCf32\fPs\&.
.IP "  \(bu" 4
\fCf32\&.min(left, right)\fP: Create a minimum on two \fCf32\fPs\&.
.IP "  \(bu" 4
\fCf32\&.max(left, right)\fP: Create a maximum on two \fCf32\fPs\&.
.IP "  \(bu" 4
\fCf32\&.eq(left, right)\fP: Create an equals on two \fCf32\fPs\&.
.IP "  \(bu" 4
\fCf32\&.ne(left, right)\fP: Create a not-equals on two \fCf32\fPs\&.
.IP "  \(bu" 4
\fCf32\&.lt(left, right)\fP: Create a less-than on two \fCf32\fPs\&.
.IP "  \(bu" 4
\fCf32\&.le(left, right)\fP: Create a less-or-equals on two \fCf32\fPs\&.
.IP "  \(bu" 4
\fCf32\&.gt(left, right)\fP: Create a greater-than on two \fCf32\fPs\&.
.IP "  \(bu" 4
\fCf32\&.ge(left, right)\fP: Create a greater-or-equals on two \fCf32\fPs\&.
.PP

.IP "\(bu" 2
\fCf64\fP:
.IP "  \(bu" 4
\fCf64\&.load(offset, align, ptr)\fP: Create an \fCf64\fP load, with an offset, alignment, and pointer\&.
.IP "  \(bu" 4
\fCf64\&.store(offset, align, ptr, value)\fP: Create an \fCf64\fP store, with an offset, alignment, pointer, and value\&.
.IP "  \(bu" 4
\fCf64\&.const(value)\fP: Create an \fCf64\fP constant of a specified value\&.
.IP "  \(bu" 4
\fCf64\&.const_bits(low, high)\fP: Create an \fCf64\fP constant of a specified value, reinterpreting the low and high 32 bits (this is useful for creating weird NaNs)\&.
.IP "  \(bu" 4
\fCf64\&.neg(value)\fP: Create a negation of an \fCf64\fP\&.
.IP "  \(bu" 4
\fCf64\&.abs(value)\fP: Create a absolute value of an \fCf64\fP\&.
.IP "  \(bu" 4
\fCf64\&.ceil(value)\fP: Create a ceil of an \fCf64\fP\&.
.IP "  \(bu" 4
\fCf64\&.floor(value)\fP: Create a floor of an \fCf64\fP\&.
.IP "  \(bu" 4
\fCf64\&.trunc(value)\fP: Create a truncate of an \fCf64\fP\&.
.IP "  \(bu" 4
\fCf64\&.nearest(value)\fP: Create a nearest-value of an \fCf64\fP\&.
.IP "  \(bu" 4
\fCf64\&.sqrt(value)\fP: Create a square-root of an \fCf64\fP\&.
.IP "  \(bu" 4
\fCf64\&.reinterpret(value)\fP: Create a reinterpret of an \fCi32\fP to an \fCf64\fP\&.
.IP "  \(bu" 4
\fCf64\&.convert_s\&.i32(value)\fP: Create a signed conversion of an \fCi32\fP to an \fCf64\fP\&.
.IP "  \(bu" 4
\fCf64\&.convert_s\&.i64(value)\fP: Create a signed conversion of an \fCi64\fP to an \fCf64\fP\&.
.IP "  \(bu" 4
\fCf64\&.convert_u\&.i32(value)\fP: Create an unsigned conversion of an \fCi32\fP to an \fCf64\fP\&.
.IP "  \(bu" 4
\fCf64\&.convert_u\&.i64(value)\fP: Create an unsigned conversion of an \fCi64\fP to an \fCf64\fP\&.
.IP "  \(bu" 4
\fCf64\&.promote(value)\fP: Create a promotion of an \fCf32\fP to an \fCf64\fP\&.
.IP "  \(bu" 4
\fCf64\&.add(left, right)\fP: Create an add of two \fCf64\fPs\&.
.IP "  \(bu" 4
\fCf64\&.sub(left, right)\fP: Create a subtract of two \fCf64\fPs\&.
.IP "  \(bu" 4
\fCf64\&.mul(left, right)\fP: Create a multiply of two \fCf64\fPs\&.
.IP "  \(bu" 4
\fCf64\&.div(left, right)\fP: Create a divide of two \fCf64\fPs\&.
.IP "  \(bu" 4
\fCf64\&.copysign(left, right)\fP: Create a copysign (take magnitude of left, sign of right) of two \fCf64\fPs\&.
.IP "  \(bu" 4
\fCf64\&.min(left, right)\fP: Create a minimum on two \fCf64\fPs\&.
.IP "  \(bu" 4
\fCf64\&.max(left, right)\fP: Create a maximum on two \fCf64\fPs\&.
.IP "  \(bu" 4
\fCf64\&.eq(left, right)\fP: Create an equals on two \fCf64\fPs\&.
.IP "  \(bu" 4
\fCf64\&.ne(left, right)\fP: Create a not-equals on two \fCf64\fPs\&.
.IP "  \(bu" 4
\fCf64\&.lt(left, right)\fP: Create a less-than on two \fCf64\fPs\&.
.IP "  \(bu" 4
\fCf64\&.le(left, right)\fP: Create a less-or-equals on two \fCf64\fPs\&.
.IP "  \(bu" 4
\fCf64\&.gt(left, right)\fP: Create a greater-than on two \fCf64\fPs\&.
.IP "  \(bu" 4
\fCf64\&.ge(left, right)\fP: Create a greater-or-equals on two \fCf64\fPs\&.
.PP

.PP
.PP
Unprefixed expressions:
.PP
.IP "\(bu" 2
\fCblock(label, children)\fP: Create a block (a list of instructions), with an optional label, and list of children\&.
.IP "\(bu" 2
\fCif(condition, ifTrue, ifFalse\fP: Create an if or if-else, with a condition, code to execute if true, and optional code to execute if false\&.
.IP "\(bu" 2
\fCloop(label, body)\fP: Create a loop, with an optional label, and body\&.
.IP "\(bu" 2
\fCbreak(label, condition, value)\fP: Create a break, to a label, and with an optional condition, and optional value\&.
.IP "\(bu" 2
\fCswitch(labels, defaultLabel, condition, value)\fP: Create a switch (aka br_table), with a list of labels, a default label, a condition, and an optional value\&.
.IP "\(bu" 2
\fCcall(name, operands, type)\fP: Create a call, to a function name, with operands, and having a specific return type (note that we must specify the return type here as we may not have created the function being called yet, and we may want to optimize this function before we do so, so the API requires that each function be independent of the others, which means that we can't depend on the definition of another function)\&.
.IP "\(bu" 2
\fCcall(name, operands, type)\fP: Similar to \fCcall\fP, but calls an imported function\&.
.IP "\(bu" 2
\fCcallIndirect(target, operands, type)\fP: Similar to \fCcall\fP, but calls indirectly, i\&.e\&., via a function pointer, so an expression replaces the name as the called value\&.
.IP "\(bu" 2
\fCgetLocal(index, type)\fP: Create a get_local, for the local at the specified index, and having a specific type (the type is required for the same reasons as in \fCcall\fP)\&.
.IP "\(bu" 2
\fCsetLocal(index, value)\fP: Create a set_local, for the local at the specified index, and setting the specified value\&.
.IP "\(bu" 2
\fCteeLocal(index, value)\fP: Create a tee_local, for the local at the specified index, and setting the specified value\&.
.IP "\(bu" 2
\fCselect(condition, ifTrue, ifFalse)\fP: Create a select operation, executing the condition, ifTrue, and ifFalse, and returning one of them based on the condition\&.
.IP "\(bu" 2
\fCdrop(value)\fP: Create a drop of a value\&.
.IP "\(bu" 2
\fCreturn(value)\fP: Create a return with an optional value\&.
.IP "\(bu" 2
\fCnop()\fP: Create a nop (no-operation)\&.
.IP "\(bu" 2
\fCunreachable()\fP: Create an unreachable (trap)\&.
.PP
.PP
(now done with \fCModule\fPs, returning to the \fCBinaryen\fP object)
.PP
.IP "\(bu" 2
\fCBinaryen\&.readBinary(data)\fP: Reads a binary wasm module and returns a Binaryen \fCModule\fP object created from it\&.
.IP "\(bu" 2
\fCBinaryen\&.emitText(expression)\fP: Returns a text representation of an individual expression, in s-expression format\&. Because Binaryen expression do not depend on their function or module, you can do this at any time\&.
.IP "\(bu" 2
\fCsetAPITracing(on)\fP: Sets whether API tracing is on\&. When on, this emits \fBC\fP API commands for everything you do\&. This can be very useful for filing bug reports\&.
.IP "\(bu" 2
\fCBinaryen\&.Relooper()\fP: Constructor for a Binaryen Relooper instance\&. This lets you provide an arbitrary CFG, and the Relooper will structure it for WebAssembly\&.
.PP
.PP
Relooper instances have the following methods:
.PP
.IP "\(bu" 2
\fCaddBlock(code)\fP: Adds a new block to the CFG, containing the provided code (expression) as its body\&.
.IP "\(bu" 2
\fCaddBranch(from, to, condition, code)\fP: Adds a branch from a block to another block, with a condition (or nothing, if this is the default branch to take from the origin - each block must have one such branch), and optional code to execute on the branch (useful for phis)\&.
.IP "\(bu" 2
\fCaddBlockWithSwitch(code, condition)\fP: Adds a new block, which ends with a switch/br_table, with provided code and condition (that determines where we go in the switch)\&.
.IP "\(bu" 2
\fCaddBranchForSwitch(from, to, indexes, code)\fP: Adds a branch from a block ending in a switch, to another block, using an array of indexes that determine where to go, and optional code to execute on the branch\&.
.IP "\(bu" 2
\fCrenderAndDispose(entry, labelHelper, module)\fP: Renders and cleans up the Relooper instance\&. Call this after you have created all the blocks and branches, giving it the entry block (where control flow begins), a label helper variable (an index of a local we can use, necessary for irreducible control flow), and the module\&. This returns an expression - normal WebAssembly code - that you can use normally anywhere\&. 
.PP

