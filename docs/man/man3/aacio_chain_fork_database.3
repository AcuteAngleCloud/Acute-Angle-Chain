.TH "aacio::chain::fork_database" 3 "Sun Jun 3 2018" "Acute-Angle-Chain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
aacio::chain::fork_database
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <fork_database\&.hpp>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBvector\fP< item_ptr > \fBbranch_type\fP"
.br
.ti -1c
.RI "typedef multi_index_container< item_ptr, \fBindexed_by\fP< hashed_unique< tag< block_id >, member< \fBfork_item\fP, \fBblock_id_type\fP, &fork_item::id >, std::hash< \fBblock_id_type\fP > >, hashed_non_unique< tag< by_previous >, const_mem_fun< \fBfork_item\fP, \fBblock_id_type\fP, &fork_item::previous_id >, std::hash< \fBblock_id_type\fP > >, ordered_non_unique< tag< block_num >, member< \fBfork_item\fP, uint32_t,&fork_item::num > > > > \fBfork_multi_index_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBreset\fP ()"
.br
.ti -1c
.RI "void \fBstart_block\fP (\fBsigned_block\fP b)"
.br
.ti -1c
.RI "void \fBremove\fP (\fBblock_id_type\fP b)"
.br
.ti -1c
.RI "void \fBset_head\fP (\fBshared_ptr\fP< \fBfork_item\fP > h)"
.br
.ti -1c
.RI "bool \fBis_known_block\fP (const \fBblock_id_type\fP &id) const"
.br
.ti -1c
.RI "\fBshared_ptr\fP< \fBfork_item\fP > \fBfetch_block\fP (const \fBblock_id_type\fP &id) const"
.br
.ti -1c
.RI "\fBvector\fP< item_ptr > \fBfetch_block_by_number\fP (uint32_t n) const"
.br
.ti -1c
.RI "\fBshared_ptr\fP< \fBfork_item\fP > \fBpush_block\fP (const \fBsigned_block\fP &b)"
.br
.ti -1c
.RI "\fBshared_ptr\fP< \fBfork_item\fP > \fBhead\fP () const"
.br
.ti -1c
.RI "void \fBpop_block\fP ()"
.br
.ti -1c
.RI "\fBpair\fP< \fBbranch_type\fP, \fBbranch_type\fP > \fBfetch_branch_from\fP (\fBblock_id_type\fP first, \fBblock_id_type\fP second) const"
.br
.ti -1c
.RI "void \fBset_max_size\fP (uint32_t s)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const int \fBMAX_BLOCK_REORDERING\fP = 1024"
.br
.RI "The maximum number of blocks that may be skipped in an out-of-order push\&. "
.in -1c
.SH "Detailed Description"
.PP 
As long as blocks are pushed in order the fork database will maintain a linked tree of all blocks that branch from the start_block\&. The tree will have a maximum depth of 1024 blocks after which the database will start lopping off forks\&.
.PP
Every time a block is pushed into the fork DB the block with the highest block_num will be returned\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBpair\fP< \fBfork_database::branch_type\fP, \fBfork_database::branch_type\fP > aacio::chain::fork_database::fetch_branch_from (\fBblock_id_type\fP first, \fBblock_id_type\fP second) const"
Given two head blocks, return two branches of the fork graph that end with a common ancestor (same prior block) 
.SS "\fBshared_ptr\fP< \fBfork_item\fP > aacio::chain::fork_database::push_block (const \fBsigned_block\fP & b)"

.PP
\fBReturns:\fP
.RS 4
the new head block ( the longest fork )
.RE
.PP
Pushes the block into the fork database and caches it if it doesn't link 
.SS "void aacio::chain::fork_database::set_max_size (uint32_t s)"
index
.PP
unlinked_index 

.SH "Author"
.PP 
Generated automatically by Doxygen for Acute-Angle-Chain from the source code\&.
