.TH "md_externals_magic_get__r_e_a_d_m_e" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_externals_magic_get__r_e_a_d_m_e \- Precise and Flat Reflection (ex Magic Get, ex PODs Flat Reflection) 
This C++14 library is meant for accessing structure elements by index and providing other std::tuple like methods for user defined types without any macro or boilerplate code\&.
.PP
\fCLatest documentation\fP
.PP
.SS "\fBTest\fP results"
.PP
Branches | Build | Tests coverage | More info ----------------|-------------- | -------------- |----------- Develop: | \fC\fP \fC\fP | \fC\fP | Master: | \fC\fP \fC\fP | \fC\fP |
.PP
### Motivating Example #0 
.PP
.nf
{c++}
// requires: C++14
#include <iostream>
#include <string>
#include "boost/pfr/precise\&.hpp"

struct some_person {
    std::string name;
    unsigned birth_year;
};

int main() {
    some_person val{"Edgar Allan Poe", 1809};

    std::cout << boost::pfr::get<0>(val)                // No macro!
        << " was born in " << boost::pfr::get<1>(val);  // Works with any aggregate initializables!
}

.fi
.PP
 Outputs: 
.PP
.nf
Edgar Allan Poe was born in 1809

.fi
.PP
.PP
### Motivating Example #1 
.PP
.nf
{c++}
// requires: C++14
#include <iostream>
#include "boost/pfr/precise\&.hpp"

struct my_struct { // no ostream operator defined!
    int i;
    char c;
    double d;
};

int main() {
    using namespace boost::pfr::ops; // out-of-the-box ostream operator for all PODs!

    my_struct s{100, 'H', 3\&.141593};
    std::cout << "my_struct has " << boost::pfr::tuple_size<my_struct>::value
        << " fields: " << s << "\n";
}

.fi
.PP
.PP
Outputs: 
.PP
.nf
my_struct has 3 fields: {100, H, 3\&.14159}

.fi
.PP
.PP
.SS "Motivating Example #2"
.PP
.PP
.nf
{c++}
// requires: C++14
#include <iostream>
#include "boost/pfr/precise\&.hpp"

struct my_struct { // no ostream operator defined!
    std::string s;
    int i;
};

int main() {
    using namespace boost::pfr::ops; // out-of-the-box ostream operators for aggregate initializables!

    my_struct s{{"Das ist fantastisch!"}, 100};
    std::cout << "my_struct has " << boost::pfr::tuple_size<my_struct>::value
        << " fields: " << s << "\n";
}
.fi
.PP
.PP
Outputs: 
.PP
.nf
my_struct has 2 fields: {"Das ist fantastisch!", 100}

.fi
.PP
.PP
.SS "Requirements and Limitations"
.PP
General:
.IP "\(bu" 2
C++14 compatible compiler (GCC-5\&.0+, Clang, Visual Studio 2017 with /std:c++latest or /std:c++17, \&.\&.\&.)
.IP "\(bu" 2
Static variables are ignored
.IP "\(bu" 2
\fBT\fP must be constexpr aggregate initializable and must not contain references nor bitfields
.PP
.PP
.SS "License"
.PP
Distributed under the \fCBoost Software License, Version 1\&.0\fP\&. 
