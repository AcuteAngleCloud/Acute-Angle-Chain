.TH "fc::exception" 3 "Sun Jun 3 2018" "Acute-Angle-Chain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
fc::exception \- Used to generate a useful error report when an exception is thrown\&.
.PP
At each level in the stack where the exception is caught and rethrown a new \fBlog_message\fP is added to the exception\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <exception\&.hpp>\fP
.PP
Inherited by \fBfc::unhandled_exception\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBcode_enum\fP { \fBcode_value\fP = unspecified_exception_code }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBexception\fP (int64_t code=\fBunspecified_exception_code\fP, const std::string &name_value='exception', const std::string &what_value='unspecified')"
.br
.ti -1c
.RI "\fBexception\fP (\fBlog_message\fP &&, int64_t code=\fBunspecified_exception_code\fP, const std::string &name_value='exception', const std::string &what_value='unspecified')"
.br
.ti -1c
.RI "\fBexception\fP (\fBlog_messages\fP &&, int64_t code=\fBunspecified_exception_code\fP, const std::string &name_value='exception', const std::string &what_value='unspecified')"
.br
.ti -1c
.RI "\fBexception\fP (const \fBlog_messages\fP &, int64_t code=\fBunspecified_exception_code\fP, const std::string &name_value='exception', const std::string &what_value='unspecified')"
.br
.ti -1c
.RI "\fBexception\fP (const \fBexception\fP &e)"
.br
.ti -1c
.RI "\fBexception\fP (\fBexception\fP &&e)"
.br
.ti -1c
.RI "const char * \fBname\fP () const  throw ()"
.br
.ti -1c
.RI "int64_t \fBcode\fP () const  throw ()"
.br
.ti -1c
.RI "virtual const char * \fBwhat\fP () const  throw ()"
.br
.ti -1c
.RI "const \fBlog_messages\fP & \fBget_log\fP () const"
.br
.ti -1c
.RI "void \fBappend_log\fP (\fBlog_message\fP m)"
.br
.ti -1c
.RI "std::string \fBto_detail_string\fP (\fBlog_level\fP ll=log_level::all) const"
.br
.ti -1c
.RI "std::string \fBto_string\fP (\fBlog_level\fP ll=log_level::info) const"
.br
.ti -1c
.RI "std::string \fBtop_message\fP () const"
.br
.ti -1c
.RI "virtual NO_RETURN void \fBdynamic_rethrow_exception\fP () const"
.br
.ti -1c
.RI "virtual std::shared_ptr< \fBexception\fP > \fBdynamic_copy_exception\fP () const"
.br
.ti -1c
.RI "\fBexception\fP & \fBoperator=\fP (const \fBexception\fP &copy)"
.br
.ti -1c
.RI "\fBexception\fP & \fBoperator=\fP (\fBexception\fP &&copy)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "std::unique_ptr< detail::exception_impl > \fBmy\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "void \fBto_variant\fP (const \fBexception\fP &e, \fBvariant\fP &v)"
.br
.ti -1c
.RI "void \fBfrom_variant\fP (const \fBvariant\fP &e, \fBexception\fP &ll)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Used to generate a useful error report when an exception is thrown\&.
.PP
At each level in the stack where the exception is caught and rethrown a new \fBlog_message\fP is added to the exception\&. 

exception's are designed to be serialized to a variant and deserialized from an variant\&.
.PP
\fBSee also:\fP
.RS 4
\fBFC_THROW_EXCEPTION\fP 
.PP
\fBFC_RETHROW_EXCEPTION\fP 
.PP
\fBFC_RETHROW_EXCEPTIONS\fP 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "exception_ptr fc::exception::dynamic_copy_exception () const\fC [virtual]\fP"
This is equivalent to: 
.PP
.nf
try { throwAsDynamic_exception(); }
catch( \&.\&.\&. ) { return std::current_exception(); }

.fi
.PP
 
.PP
Reimplemented in \fBfc::unhandled_exception\fP\&.
.SS "NO_RETURN void fc::exception::dynamic_rethrow_exception () const\fC [virtual]\fP"
Throw this exception as its most derived type\&.
.PP
\fBNote:\fP
.RS 4
does not return\&.
.RE
.PP
Rethrows the exception restoring the proper type based upon the error code\&. This is used to propagate exception types across conversions to/from JSON 
.PP
Reimplemented in \fBfc::unhandled_exception\fP\&.
.SS "const \fBlog_messages\fP & fc::exception::get_log () const"

.PP
\fBReturns:\fP
.RS 4
a reference to log messages that have been added to this log\&. 
.RE
.PP

.SS "string fc::exception::to_detail_string (\fBlog_level\fP ll = \fClog_level::all\fP) const"
Generates a detailed string including file, line, method, and other information that is generally only useful for developers\&. 
.SS "string fc::exception::to_string (\fBlog_level\fP ll = \fClog_level::info\fP) const"
Generates a user-friendly error report\&. 
.SS "string fc::exception::top_message () const"
Generates a user-friendly error report\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Acute-Angle-Chain from the source code\&.
