.TH "md_libraries_fc_vendor_websocketpp_changelog" 3 "Sun Jun 3 2018" "Acute-Angle-Chain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_libraries_fc_vendor_websocketpp_changelog \- changelog 
HEAD
.PP
0\&.7\&.0 - 2016-02-22
.IP "\(bu" 2
MINOR BREAKING SOCKET POLICY CHANGE: Asio transport socket policy method \fCcancel_socket\fP will now return \fClib::asio::error_code\fP instead of \fCvoid\fP\&. Custom Asio transport socket policies will need to be updated accordingly\&. This does not affect anyone using the bundled socket policies\&.
.IP "\(bu" 2
Feature: Basic support for the permessage-deflate extension\&. #344
.IP "\(bu" 2
Feature: Allow accessing the local endpoint when using the Asio transport\&. This allows inspection of the address and port in cases where they are chosen by the operating system rather than the user\&. Thank you Andreas Weis and Muzahid Hussain for reporting and related code\&. #458
.IP "\(bu" 2
Feature: Add support for subprotocols in Hybi00\&. Thank you Lukas Obermann for reporting and a patch\&. #518
.IP "\(bu" 2
Improvement: Better automatic std::chrono feature detection for Visual Studio
.IP "\(bu" 2
Improvement: Major refactoring to bundled CMake build system\&. CMake can now be used to build all of the examples and the test suite\&. Thank you Thijs Wenker for a significant portion of this code\&. #378, #435, #449
.IP "\(bu" 2
Improvement: In build environments where \fClib::error_code\fP and \fClib::asio::error_code\fP match (such as using \fCboost::asio\fP with \fCboost::system_error\fP or standalone asio with \fCstd::system_error\fP, transport errors are passed through natively rather than being reported as a translated \fCpass_through\fP error type\&.
.IP "\(bu" 2
Improvement: Add a \fCget_transport_error\fP method to Asio transport connections to allow retrieving a machine readable native transport error\&.
.IP "\(bu" 2
Improvement: Add \fCconnection::get_response\fP, \fCconnection::get_response_code\fP, and \fCconnection::get_response_msg\fP methods to allow accessing additional information about the HTTP responses that WebSocket++ sends\&. #465 Thank you Flow86 for reporting\&.
.IP "\(bu" 2
Improvement: Removes use of empty strings ('') in favor of \fCstring::clear()\fP and \fCstring::empty()\fP\&. This avoids generating unnecessary temporary objects\&. #468 Thank you Vladislav Yaroslavlev for reporting and a patch\&.
.IP "\(bu" 2
Documentation: Adds an example demonstrating the use of external \fCio_service\fP
.IP "\(bu" 2
Documentation: Adds a simple echo_client example\&.
.IP "\(bu" 2
Documentation: Begins migration of the web based user manual into Doxygen\&.
.IP "\(bu" 2
\fBBug\fP: Fix memory leak when init_asio produces an error\&. #454 Thank you Mark Grimes for reporting and fixing\&.
.IP "\(bu" 2
\fBBug\fP: Fix crash when processing a specially crafted HTTP header\&. Thank you Eli Fidler for reporting, test cases, and a patch\&. #456
.IP "\(bu" 2
\fBBug\fP: Fix an issue where standalone Asio builds that use TLS would not compile due to lingering boost code\&. #448 Thank you mjsp for reporting
.IP "\(bu" 2
\fBBug\fP: Fix an issue where canceling a socket could throw an exception on some older Windows XP platforms\&. It now prints an appropriate set of log messages instead\&. Thank you Thijs Wenker for reporting and researching solutions\&. #460
.IP "\(bu" 2
\fBBug\fP: Fix an issue where deferred HTTP connections that start sending a very long response before their HTTP handler ends would result in a second set of HTTP headers being injected into the output\&. Thank you Kevin Smith for reporting and providing test case details\&. #443
.IP "\(bu" 2
\fBBug\fP: Fix an issue where the wrong type of strand was being created\&. Thank you Bastien Brunnenstein for reporting and a patch\&. #462
.IP "\(bu" 2
\fBBug\fP: Fix an issue where TLS includes were broken for Asio Standalone builds\&. Thank you giachi and Bastien Brunnenstein for reporting\&. #491
.IP "\(bu" 2
\fBBug\fP: Remove the use of cached read and write handlers in the Asio transport\&. This feature caused memory leaks when the io_service the connection was running on was abruptly stopped\&. There isn't a clean and safe way of using this optimization without global state and the associated locks\&. The locks perform worse\&. Thank you Xavier Gibert for reporting, test cases, and code\&. Fixes #490\&.
.IP "\(bu" 2
\fBBug\fP: Fix a heap buffer overflow when checking very short URIs\&. Thank you Xavier Gibert for reporting and a patch #524
.IP "\(bu" 2
Compatibility: Fixes a number of build & config issues on Visual Studio 2015
.IP "\(bu" 2
Compatibility: Removes non-standards compliant masking behavior\&. #395, #469
.IP "\(bu" 2
Compatibility: Replace deprecated use of auto_ptr on systems where unique_ptr is available\&.
.PP
.PP
0\&.6\&.0 - 2015-06-02
.IP "\(bu" 2
MINOR BREAKING TRANSPORT POLICY CHANGE: Custom transport policies will now be required to include a new method \fCvoid set_uri(uri_ptr u)\fP\&. An implementation is not required\&. The stub transport policy includes an example stub method that can be added to any existing custom transport policy to fulfill this requirement\&. This does not affect anyone using the bundled transports or configs\&.
.IP "\(bu" 2
MINOR BREAKING SOCKET POLICY CHANGE: Custom asio transport socket policies will now be required to include a new method \fCvoid set_uri(uri_ptr u)\fP\&. Like with the transport layer, an implementation is not required\&. This does not affect anyone using the bundled socket policies\&.
.IP "\(bu" 2
MINOR BREAKING DEPENDENCY CHANGE: When using Boost versions greater than or equal to 1\&.49 in C++03 mode, \fClibboost-chrono\fP is needed now instead of \fClibboost-date_time\fP\&. Users with C++11 compilers or using Boost versions 1\&.48 and earlier are not affected\&. Note: This change affects the bundled unit test suite\&.
.IP "\(bu" 2
Feature: WebSocket++ Asio transport policy can now be used with the standalone version of Asio (1\&.8\&.0+) when a C++11 compiler and standard library are present\&. This means that it is possible now to use WebSocket++'s Asio transport entirely without Boost\&. Thank you Robert Seiler for proof of concept code that was used as a guide for this implementation\&. Fixes #324
.IP "\(bu" 2
Feature: Adds a vectored/scatter-gather write handler to the iostream transport\&.
.IP "\(bu" 2
Feature: Adds the ability to defer sending an HTTP response until sometime after the \fChttp_handler\fP is run\&. This allows processing of long running http handlers to defer their response until it is ready without blocking the network thread\&. references #425
.IP "\(bu" 2
Improvement: \fCecho_server_tls\fP has been update to demonstrate how to configure it for Mozilla's recommended intermediate and modern TLS security profiles\&.
.IP "\(bu" 2
Improvement: \fCendpoint::set_timer\fP now uses a steady clock provided by \fCboost::chrono\fP or \fCstd::chrono\fP where available instead of the non-monotonic system clock\&. Thank you breyed for reporting\&. fixes #241
.IP "\(bu" 2
Improvement: Outgoing TLS connections to servers using the SNI extension to choose a certificate will now work\&. Thank you moozzyk for reporting\&. Fixes #400
.IP "\(bu" 2
Improvement: Removes an unnecessary mutex lock in \fCget_con_from_hdl\fP\&.
.IP "\(bu" 2
Cleanup: Asio transport policy has been refactored to remove many Boost dependencies\&. On C++03 compilers the \fCboost::noncopyable\fP dependency has been removed and the \fCboost::date_time\fP dependency has been replaced with the newer \fCboost::chrono\fP when possible\&. On C++11 compilers the \fCboost::aligned_storage\fP and \fCboost::date_time\fP dependencies are gone, replaced with equivalent C++11 standard library features\&.
.IP "\(bu" 2
\fBBug\fP: Fixes a potential dangling pointer and inconsistent error message handling in \fC\fBwebsocketpp::exception\fP\fP\&. #432 Thank you Tom Swirly for the fix\&.
.PP
.PP
0\&.5\&.1 - 2015-02-27
.IP "\(bu" 2
\fBBug\fP: Fixes an issue where some frame data was counted against the max header size limit, resulting in connections that included a lot of frame data immediately after the opening handshake to fail\&.
.IP "\(bu" 2
\fBBug\fP: Fix a typo in the name of the set method for \fCmax_http_body_size\fP\&. #406 Thank you jplatte for reporting\&.
.PP
.PP
0\&.5\&.0 - 2015-01-22
.IP "\(bu" 2
BREAKING UTILITY CHANGE: Deprecated methods \fChttp::parser::parse_headers\fP, \fChttp::response::parse_complete\fP, and \fChttp::request::parse_complete\fP have been removed\&.
.IP "\(bu" 2
Security: Disabled SSLv3 in example servers\&.
.IP "\(bu" 2
Feature: Adds basic support for accessing HTTP request bodies in the http handler\&. #181
.IP "\(bu" 2
Feature: Adds the ability to register a shutdown handler when using the iostream transport\&. This provides a clean interface for triggering the shut down of external sockets and other cleanup without hooking in to higher level WebSocket handlers\&.
.IP "\(bu" 2
Feature: Adds the ability to register a write handler when using the iostream transport\&. This handler can be used to handle transport output in place of registering an ostream to write to\&.
.IP "\(bu" 2
Feature: Adds a new logging policy that outputs to syslog\&. #386 Thank you Tom Hughes for submitting the initial version of this policy\&.
.IP "\(bu" 2
Improvement: Message payload logging now prints text for text messages rather than binary\&.
.IP "\(bu" 2
Improvement: Overhaul of handshake state machine\&. Should make it impossible for exceptions to bubble out of transport methods like \fCio_service::run\fP\&.
.IP "\(bu" 2
Improvement: Overhaul of handshake error reporting\&. Fail handler error codes will be more detailed and precise\&. Adds new [fail] and [http] logging channels that log failed websocket connections and successful HTTP connections respectively\&. \fBA\fP new aggregate channel package, \fCalevel::access_core\fP, allows enabling connect, disconnect, fail, and http together\&. Successful HTTP connections will no longer trigger a fail handler\&.
.IP "\(bu" 2
Improvement: Ability to terminate connection during an http handler to cleanly suppress the default outgoing HTTP response\&.
.IP "\(bu" 2
Documentation: Add Sending & Receiving Messages step to chapter one of the \fCutility_client\fP tutorial\&. Update \fCutility_client\fP example to match\&.
.IP "\(bu" 2
Cleanup: Removes unused files & STL includes\&. Adds required STL includes\&. Normalizes include order\&.
.IP "\(bu" 2
\fBBug\fP: Fixes a fatal state error when a handshake response is completed immediately after that handshake times out\&. #389
.IP "\(bu" 2
\fBBug\fP: MinGW fixes; C++11 feature detection, localtime use\&. #393 Thank you Schebb for reporting, code, and testing\&.
.IP "\(bu" 2
\fBBug\fP: Fixes an issue where \fCwebsocketpp::exception::what()\fP could return an out of scope pointer\&. #397 Thank you fabioang for reporting\&.
.IP "\(bu" 2
\fBBug\fP: Fixes an issue where endpoints were not reset properly after a call to \fCendpoint::listen\fP failed\&. #390 Thank you wyyqyl for reporting\&.
.PP
.PP
0\&.4\&.0 - 2014-11-04
.IP "\(bu" 2
BREAKING API CHANGE: All WebSocket++ methods now throw an exception of type \fC\fBwebsocketpp::exception\fP\fP which derives from \fCstd::exception\fP\&. This normalizes all exception types under the standard exception hierarchy and allows WebSocket++ exceptions to be caught in the same statement as others\&. The error code that was previously thrown is wrapped in the exception object and can be accessed via the \fCwebsocketpp::exception::code()\fP method\&.
.IP "\(bu" 2
BREAKING API CHANGE: Custom logging policies have some new required constructors that take generic config settings rather than pointers to std::ostreams\&. This allows writing logging policies that do not involve the use of std::ostream\&. This does not affect anyone using the built in logging policies\&.
.IP "\(bu" 2
BREAKING UTILITY CHANGE: \fCwebsocketpp::lib::net::htonll\fP and \fCwebsocketpp::lib::net::ntohll\fP have been prefixed with an underscore to avoid conflicts with similarly named macros in some operating systems\&. If you are using the WebSocket++ provided 64 bit host/network byte order functions you will need to switch to the prefixed versions\&.
.IP "\(bu" 2
BREAKING UTILITY CHANGE: The signature of \fCbase64_encode\fP has changed from \fCwebsocketpp::base64_encode(unsigned char const *, unsigned int)\fP to \fC\fBwebsocketpp::base64_encode(unsigned char const *, size_t)\fP\fP\&.
.IP "\(bu" 2
BREAKING UTILITY CHANGE: The signature of \fCsha1::calc\fP has changed from \fCwebsocketpp::sha1::calc(void const *, int, unsigned char *)\fP to \fCwebsocketpp::sha1::calc(void const *, size_t, unsigned char *)\fP
.IP "\(bu" 2
Feature: Adds incomplete \fCminimal_server\fP and \fCminimal_client\fP configs that can be used to build custom configs without pulling in the dependencies of \fCcore\fP or \fCcore_client\fP\&. These configs will offer a stable base config to future-proof custom configs\&.
.IP "\(bu" 2
Improvement: Core library no longer has std::iostream as a dependency\&. std::iostream is still required for the optional iostream logging policy and iostream transport\&.
.IP "\(bu" 2
\fBBug\fP: C++11 Chrono support was being incorrectly detected by the \fCboost_config\fP header\&. Thank you Max Dmitrichenko for reporting and a patch\&.
.IP "\(bu" 2
\fBBug\fP: use of \fCstd::put_time\fP is now guarded by a unique flag rather than a chrono library flag\&. Thank you Max Dmitrichenko for reporting\&.
.IP "\(bu" 2
\fBBug\fP: Fixes non-thread safe use of std::localtime\&. #347 #383
.IP "\(bu" 2
Compatibility: Adjust usage of std::min to be more compatible with systems that define a min(\&.\&.\&.) macro\&.
.IP "\(bu" 2
Compatibility: Removes unused parameters from all library, test, and example code\&. This assists with those developing with -Werror and -Wunused-parameter #376
.IP "\(bu" 2
Compatibility: Renames ntohll and htonll methods to avoid conflicts with platform specific macros\&. #358 #381, #382 Thank you logotype, unphased, svendjo
.IP "\(bu" 2
Cleanup: Removes unused functions, fixes variable shadow warnings, normalizes all whitespace in library, examples, and tests to 4 spaces\&. #376
.PP
.PP
0\&.3\&.0 - 2014-08-10
.IP "\(bu" 2
Feature: Adds \fCstart_perpetual\fP and \fCstop_perpetual\fP methods to asio transport These may be used to replace manually managed \fCasio::io_service::work\fP objects
.IP "\(bu" 2
Feature: Allow setting pong and handshake timeouts at runtime\&.
.IP "\(bu" 2
Feature: Allows changing the listen backlog queue length\&.
.IP "\(bu" 2
Feature: Split tcp init into pre and post init\&.
.IP "\(bu" 2
Feature: Adds URI method to extract query string from URI\&. Thank you Banaan for code\&. #298
.IP "\(bu" 2
Feature: Adds a compile time switch to asio transport config to disable certain multithreading features (some locks, asio strands)
.IP "\(bu" 2
Feature: Adds the ability to pause reading on a connection\&. Paused connections will not read more data from their socket, allowing TCP flow control to work without blocking the main thread\&.
.IP "\(bu" 2
Feature: Adds the ability to specify whether or not to use the \fCSO_REUSEADDR\fP TCP socket option\&. The default for this value has been changed from \fCtrue\fP to \fCfalse\fP\&.
.IP "\(bu" 2
Feature: Adds the ability to specify a maximum message size\&.
.IP "\(bu" 2
Feature: Adds \fCclose::status::get_string(\&.\&.\&.)\fP method to look up a human readable string given a close code value\&.
.IP "\(bu" 2
Feature: Adds \fCconnection::read_all(\&.\&.\&.)\fP method to iostream transport as a convenience method for reading all data into the connection buffer without the end user needing to manually loop on \fCread_some\fP\&.
.IP "\(bu" 2
Improvement: Open, close, and pong timeouts can be disabled entirely by setting their duration to 0\&.
.IP "\(bu" 2
Improvement: Numerous performance improvements\&. Including: tuned default buffer sizes based on profiling, caching of handler binding for async reads/writes, non-malloc allocators for read/write handlers, disabling of a number of questionably useful range sanity checks in tight inner loops\&.
.IP "\(bu" 2
Improvement: Cleaned up the handling of TLS related errors\&. TLS errors will now be reported with more detail on the info channel rather than all being \fCtls_short_read\fP or \fCpass_through\fP\&. In addition, many cases where a TLS short read was in fact expected are no longer classified as errors\&. Expected TLS short reads and quasi-expected socket shutdown related errors will no longer be reported as unclean WebSocket shutdowns to the application\&. Information about them will remain in the info error channel for debugging purposes\&.
.IP "\(bu" 2
Improvement: \fCstart_accept\fP and \fClisten\fP errors are now reported to the caller either via an exception or an ec parameter\&.
.IP "\(bu" 2
Improvement: Outgoing writes are now batched for improved message throughput and reduced system call and TCP frame overhead\&.
.IP "\(bu" 2
\fBBug\fP: Fix some cases of calls to empty lib::function objects\&.
.IP "\(bu" 2
\fBBug\fP: Fix memory leak of connection objects due to cached handlers holding on to reference counted pointers\&. #310 Thank you otaras for reporting\&.
.IP "\(bu" 2
\fBBug\fP: Fix issue with const endpoint accessors (such as \fCget_user_agent\fP) not compiling due to non-const mutex use\&. #292 Thank you logofive for reporting\&.
.IP "\(bu" 2
\fBBug\fP: Fix handler allocation crash with multithreaded \fCio_service\fP\&.
.IP "\(bu" 2
\fBBug\fP: Fixes incorrect whitespace handling in header parsing\&. #301 Thank you Wolfram Schroers for reporting
.IP "\(bu" 2
\fBBug\fP: Fix a crash when parsing empty HTTP headers\&. Thank you Thingol for reporting\&.
.IP "\(bu" 2
\fBBug\fP: Fix a crash following use of the \fCstop_listening\fP function\&. Thank you Thingol for reporting\&.
.IP "\(bu" 2
\fBBug\fP: Fix use of variable names that shadow function parameters\&. The library should compile cleanly with -Wshadow now\&. Thank you giszo for reporting\&. #318
.IP "\(bu" 2
\fBBug\fP: Fix an issue where \fCset_open_handshake_timeout\fP was ignored by server code\&. Thank you Robin Rowe for reporting\&.
.IP "\(bu" 2
\fBBug\fP: Fix an issue where custom timeout values weren't being propagated from endpoints to new connections\&.
.IP "\(bu" 2
\fBBug\fP: Fix a number of memory leaks related to server connection failures\&. #323 #333 #334 #335 Thank you droppy and aydany for reporting and patches\&. reporting\&.
.IP "\(bu" 2
Compatibility: Fix compile time conflict with Visual Studio's MIN/MAX macros\&. Thank you Robin Rowe for reporting\&.
.IP "\(bu" 2
Documentation: Examples and test suite build system now defaults to clang on OS \fBX\fP
.PP
.PP
0\&.3\&.0-alpha4 - 2013-10-11
.IP "\(bu" 2
HTTP requests ending normally are no longer logged as errors\&. Thank you Banaan for reporting\&. #294
.IP "\(bu" 2
Eliminates spurious expired timers in certain error conditions\&. Thank you Banaan for reporting\&. #295
.IP "\(bu" 2
Consolidates all bundled library licenses into the COPYING file\&. #294
.IP "\(bu" 2
Updates bundled sha1 library to one with a cleaner interface and more straight-forward license\&. Thank you lotodore for reporting and Evgeni Golov for reviewing\&. #294
.IP "\(bu" 2
Re-introduces strands to asio transport, allowing \fCio_service\fP thread pools to be used (with some limitations)\&.
.IP "\(bu" 2
Removes endpoint code that kept track of a connection list that was never used anywhere\&. Removes a lock and reduces connection creation/deletion complexity from O(log n) to O(1) in the number of connections\&.
.IP "\(bu" 2
\fBA\fP number of internal changes to transport APIs
.IP "\(bu" 2
Deprecates iostream transport \fCreadsome\fP in favor of \fCread_some\fP which is more consistent with the naming of the rest of the library\&.
.IP "\(bu" 2
Adds preliminary signaling to iostream transport of eof and fatal transport errors
.IP "\(bu" 2
Updates transport code to use shared pointers rather than raw pointers to prevent asio from retaining pointers to connection methods after the connection goes out of scope\&. #293 Thank you otaras for reporting\&.
.IP "\(bu" 2
Fixes an issue where custom headers couldn't be set for client connections Thank you Jerry Win and Wolfram Schroers for reporting\&.
.IP "\(bu" 2
Fixes a compile error on visual studio when using interrupts\&. Thank you Javier Rey Neira for reporting this\&.
.IP "\(bu" 2
Adds new 1012 and 1013 close codes per IANA registry
.IP "\(bu" 2
Add \fCset_remote_endpoint\fP method to iostream transport\&.
.IP "\(bu" 2
Add \fCset_secure\fP method to iostream transport\&.
.IP "\(bu" 2
Fix typo in \&.gitattributes file\&. Thank you jstarasov for reporting this\&. #280
.IP "\(bu" 2
Add missing locale include\&. Thank you Toninoso for reporting this\&. #281
.IP "\(bu" 2
Refactors \fCasio_transport\fP endpoint and adds full documentation and exception free varients of all methods\&.
.IP "\(bu" 2
Removes \fCasio_transport\fP endpoint method cancel()\&. Use \fCstop_listen()\fP instead
.IP "\(bu" 2
Wrap internal \fCio_service\fP \fCrun_one()\fP method
.IP "\(bu" 2
Suppress error when trying to shut down a connection that was already closed
.PP
.PP
0\&.3\&.0-alpha3 - 2013-07-16
.IP "\(bu" 2
Minor refactor to bundled sha1 library
.IP "\(bu" 2
HTTP header comparisons are now case insensitive\&. #220, #275
.IP "\(bu" 2
Refactors URI to be exception free and not use regular expressions\&. This eliminates the dependency on boost or C++11 regex libraries allowing native C++11 usage on GCC 4\&.4 and higher and significantly reduces staticly built binary sizes\&.
.IP "\(bu" 2
Updates handling of Server and User-Agent headers to better handle custom settings and allow suppression of these headers for security purposes\&.
.IP "\(bu" 2
Fix issue where pong timeout handler always fired\&. Thank you Steven Klassen for reporting this bug\&.
.IP "\(bu" 2
Add ping and pong endpoint wrapper methods
.IP "\(bu" 2
Add \fCget_request()\fP pass through method to connection to allow calling methods specific to the HTTP policy in use\&.
.IP "\(bu" 2
Fix issue compile error with \fCWEBSOCKETPP_STRICT_MASKING\fP enabled and another issue where \fCWEBSOCKETPP_STRICT_MASKING\fP was not applied to incoming messages\&. Thank you Petter Norby for reporting and testing these bugs\&. #264
.IP "\(bu" 2
Add additional macro guards for use with boost_config\&. Thank you breyed for testing and code\&. #261
.PP
.PP
0\&.3\&.0-alpha2 - 2013-06-09
.IP "\(bu" 2
Fix a regression that caused servers being sent two close frames in a row to end a connection uncleanly\&. #259
.IP "\(bu" 2
Fix a regression that caused spurious frames following a legitimate close frames to erroneously trigger handlers\&. #258
.IP "\(bu" 2
Change default HTTP response error code when no http_handler is defined from 500/Internal Server Error to 426/Upgrade Required
.IP "\(bu" 2
Remove timezone from logger timestamp to work around issues with the Windows implementation of strftime\&. Thank you breyed for testing and code\&. #257
.IP "\(bu" 2
Switch integer literals to char literals to improve VCPP compatibility\&. Thank you breyed for testing and code\&. #257
.IP "\(bu" 2
Add MSVCPP warning suppression for the bundled SHA1 library\&. Thank you breyed for testing and code\&. #257
.PP
.PP
0\&.3\&.0-alpha1 - 2013-06-09
.IP "\(bu" 2
Initial Release 
.PP

