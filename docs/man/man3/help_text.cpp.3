.TH "programs/claac/help_text.cpp" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
programs/claac/help_text.cpp
.SH SYNOPSIS
.br
.PP
\fC#include 'help_text\&.hpp'\fP
.br
\fC#include 'localize\&.hpp'\fP
.br
\fC#include <regex>\fP
.br
\fC#include <fc/io/json\&.hpp>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "auto \fBsmatch_to_variant\fP (const std::smatch &smatch)"
.br
.ti -1c
.RI "bool \fBaacio::client::help::print_recognized_errors\fP (const \fBfc::exception\fP &e, const bool verbose_errors)"
.br
.ti -1c
.RI "bool \fBaacio::client::help::print_help_text\fP (const \fBfc::exception\fP &e)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const char * \fBtransaction_help_text_header\fP = _('An \fBerror\fP occurred while submitting the transaction for this command!')"
.br
.ti -1c
.RI "const char * \fBduplicate_transaction_help_text\fP"
.br
.ti -1c
.RI "const char * \fBmissing_perms_help_text\fP"
.br
.ti -1c
.RI "const char * \fBmissing_sigs_help_text\fP"
.br
.ti -1c
.RI "const char * \fBmissing_scope_help_text\fP"
.br
.ti -1c
.RI "const char * \fBtx_unknown_account_help_text\fP = _('The transaction references an \fBaccount\fP which does not exist\&.')"
.br
.ti -1c
.RI "const char * \fBunknown_account_help_text\fP"
.br
.ti -1c
.RI "const char * \fBmissing_abi_help_text\fP"
.br
.ti -1c
.RI "const char * \fBunknown_wallet_help_text\fP = _('Unable to find a wallet named \\'${1}\\', are you sure you typed the name correctly?')"
.br
.ti -1c
.RI "const char * \fBbad_wallet_password_help_text\fP = _('Invalid password for wallet named \\'${1}\\'')"
.br
.ti -1c
.RI "const char * \fBlocked_wallet_help_text\fP = _('The wallet named \\'${1}\\' is locked\&. Please unlock it and try again\&.')"
.br
.ti -1c
.RI "const char * \fBduplicate_key_import_help_text\fP = _('This key is already imported into the wallet named \\'${1}\\'\&.')"
.br
.ti -1c
.RI "const char * \fBunknown_abi_table_help_text\fP"
.br
.ti -1c
.RI "const char * \fBhelp_regex_error\fP = _('Error locating help text: ${code} ${what}')"
.br
.ti -1c
.RI "const \fBstd::vector\fP< std::pair< const char *, \fBstd::vector\fP< const char * > > > \fBerror_help_text\fP"
.br
.ti -1c
.RI "const char * \fBerror_advice_3010001\fP = 'Most likely, the given \fBaccount\fP/ permission doesn't exist in the blockchain\&.'"
.br
.ti -1c
.RI "const char * \fBerror_advice_3010002\fP = 'Most likely, the given \fBaccount\fP doesn't exist in the blockchain\&.'"
.br
.ti -1c
.RI "const char * \fBerror_advice_3010003\fP = 'Most likely, the given table doesnt' exist in the blockchain\&.'"
.br
.ti -1c
.RI "const char * \fBerror_advice_3010004\fP = 'Most likely, the given contract doesnt' exist in the blockchain\&.'"
.br
.ti -1c
.RI "const char * \fBerror_advice_3030000\fP = 'Ensure that your transaction satisfy the contract's constraint!'"
.br
.ti -1c
.RI "const char * \fBerror_advice_3030001\fP"
.br
.ti -1c
.RI "const char * \fBerror_advice_3030002\fP = 'Ensure that you have the related private keys inside your wallet and you wallet is unlocked\&.'"
.br
.ti -1c
.RI "const char * \fBerror_advice_3030003\fP = 'Please remove the unnecessary authority from your action!'"
.br
.ti -1c
.RI "const char * \fBerror_advice_3030004\fP = 'Please remove the unnecessary \fBsignature\fP from your transaction!'"
.br
.ti -1c
.RI "const char * \fBerror_advice_3030011\fP = 'You can try embedding aacio nonce \fBaction\fP inside your transaction to ensure uniqueness\&.'"
.br
.ti -1c
.RI "const char * \fBerror_advice_3030022\fP = 'Please increase the \fBexpiration\fP time of your transaction!'"
.br
.ti -1c
.RI "const char * \fBerror_advice_3030023\fP = 'Please decrease the \fBexpiration\fP time of your transaction!'"
.br
.ti -1c
.RI "const char * \fBerror_advice_3030024\fP = 'Ensure that the reference block exist in the blockchain!'"
.br
.ti -1c
.RI "const char * \fBerror_advice_3040002\fP"
.br
.ti -1c
.RI "const char * \fBerror_advice_3120001\fP = R'=====(Name should be less than 13 characters and only contains the following symbol \&.12345abcdefghijklmnopqrstuvwxyz)====='"
.br
.ti -1c
.RI "const char * \fBerror_advice_3120002\fP = R'=====(Public key should be encoded in base58 and starts with AAC prefix)====='"
.br
.ti -1c
.RI "const char * \fBerror_advice_3120003\fP = R'=====(Private key should be encoded in base58 WIF)====='"
.br
.ti -1c
.RI "const char * \fBerror_advice_3120004\fP"
.br
.ti -1c
.RI "const char * \fBerror_advice_3120005\fP = R'=====(Ensure that your \fBaction\fP JSON follows the contract's abi!)====='"
.br
.ti -1c
.RI "const char * \fBerror_advice_3120006\fP"
.br
.ti -1c
.RI "const char * \fBerror_advice_3120007\fP"
.br
.ti -1c
.RI "const char * \fBerror_advice_3120008\fP = 'Ensure that the block ID is a SHA\-256 hexadecimal string!'"
.br
.ti -1c
.RI "const char * \fBerror_advice_3120009\fP = 'Ensure that the transaction ID is a SHA\-256 hexadecimal string!'"
.br
.ti -1c
.RI "const char * \fBerror_advice_3120010\fP"
.br
.ti -1c
.RI "const char * \fBerror_advice_3130001\fP = 'Ensure that you have \\033[2maacio::chain_api_plugin\\033[0m\\033[32m added to your node's configuration!'"
.br
.ti -1c
.RI "const char * \fBerror_advice_3130002\fP"
.br
.ti -1c
.RI "const char * \fBerror_advice_3130003\fP = 'Ensure that you have \\033[2maacio::account_history_api_plugin\\033[0m\\033[32m added to your node's configuration!'"
.br
.ti -1c
.RI "const char * \fBerror_advice_3130004\fP = 'Ensure that you have \\033[2maacio::net_api_plugin\\033[0m\\033[32m added to your node's configuration!'"
.br
.ti -1c
.RI "const char * \fBerror_advice_3140001\fP = 'Try to use different wallet name\&.'"
.br
.ti -1c
.RI "const char * \fBerror_advice_3140002\fP = 'Are you sure you typed the name correctly?'"
.br
.ti -1c
.RI "const char * \fBerror_advice_3140003\fP = 'Ensure that your wallet is unlocked before using it!'"
.br
.ti -1c
.RI "const char * \fBerror_advice_3140004\fP = 'Ensure that you have the relevant private key imported!'"
.br
.ti -1c
.RI "const char * \fBerror_advice_3140005\fP = 'Are you sure you are using the right password?'"
.br
.ti -1c
.RI "const \fBstd::map\fP< int64_t, std::string > \fBerror_advice\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBCopyright:\fP
.RS 4
defined in AcuteAngleChain/LICENSE\&.txt 
.RE
.PP

.SH "Variable Documentation"
.PP 
.SS "const char* duplicate_transaction_help_text"
\fBInitial value:\fP
.PP
.nf
= _(R"text(The transaction is a duplicate of one already pushed to the producers\&.  If this
is an intentionally repeated transaction there are a few ways to resolve the
issue:
  - wait for the next block
  - combine duplicate transactions into a single transaction
  - adjust the expiration time using the `--expiration <milliseconds>` option
  - use the `--force-unique` option to add additional nonce data
    Please note, this will consume more bandwidth than the base transaction )text")
.fi
.SS "const char* error_advice_3030001"
\fBInitial value:\fP
.PP
.nf
=  R"=====(Ensure that you have the related authority inside your transaction!;
If you are currently using 'claac push action' command, try to add the relevant authority using -p option\&.)====="
.fi
.SS "const char* error_advice_3040002"
\fBInitial value:\fP
.PP
.nf
= R"=====(Ensure that your arguments follow the contract abi!
You can check the contract's abi by using 'claac get code' command\&.)====="
.fi
.SS "const char* error_advice_3120004"
\fBInitial value:\fP
.PP
.nf
= R"=====(Ensure that your authority JSON follows the following format!
{
  "threshold":"uint32_t",
  "keys":[{ "key":"public_key", "weight":"uint16_t" }],
  "accounts":[{
    "permission":{ "actor":"account_name", "permission":"permission_name" },
    "weight":"uint16_t"
  }]
}
e\&.g\&.
{
  "threshold":"1",
  "keys":[{ "key":"AAC84snobCGtpQvTTfVaxvMuxGDd4p2LhtQhbWX1yWAU5yt4tiB55", "weight":"1" }],
  "accounts":[{
    "permission":{ "actor":"initb", "permission":"social" },
    "weight":"1
  }]
})====="
.fi
.SS "const char* error_advice_3120006"
\fBInitial value:\fP
.PP
.nf
= R"=====(Ensure that your transaction JSON follows the following format!\n"
{
  "ref_block_num":"uint16_t",
  "ref_block_prefix":"uint32_t",
  "expiration":"YYYY-MM-DDThh:mm",
  "region": "uint16_t",
  "read_scope":[ "account_name" ],
  "write_scope":[ "account_name" ],
  "actions":[{
    "account":"account_name",
    "name":"action_name",
    "authorization":[{ "actor":"account_name","permission":"permission_name" }],
    "data":"bytes"
  }]
}"
e\&.g\&.
{
  "ref_block_num":"1000",
  "ref_block_prefix":"3463702842",
  "expiration":"2018-01-23T01:51:05",
  "region": "0",
  "read_scope":[ "initb", "initc" ],
  "write_scope":[ "initb", "initc" ],
  "actions":[{
    "account":"aacio",
    "name":"transfer",
    "authorization":[{ "actor":"initb","permission":"active" }],
    "data":"000000008093dd74000000000094dd74e80300000000000000"
  }]
})====="
.fi
.SS "const char* error_advice_3120007"
\fBInitial value:\fP
.PP
.nf
=  R"=====(Ensure that your abi JSON follows the following format!
{
  "types" : [{ "new_type_name":"type_name", "type":"type_name" }],
  "structs" : [{ "name":"type_name", "base":"type_name", "fields": [{ "name":"field_name", "type": "type_name" }] }],
  "actions" : [{ "name":"action_name","type":"type_name"}],
  "tables" : [{
    "name":"table_name",
    "index_type":"type_name",
    "key_names":[ "field_name" ],
    "key_types":[ "type_name" ],
    "type":"type_name" "
  }]
}
e\&.g\&.
{
  "types" : [{ "new_type_name":"account_name", "type":"name" }],
  "structs" : [
    { "name":"foo", "base":"", "fields": [{ "name":"by", "type": "account_name" }] },\n "
    { "name":"foobar", "base":"", "fields": [{ "name":"by", "type": "account_name" }] }
  ],
  "actions" : [{ "name":"foo","type":"foo"}],
  "tables" : [{
    "name":"foobar_table",
    "index_type":"i64",
    "key_names":[ "by" ],
    "key_types":[ "account_name" ],
    "type":"foobar" "
  }]
})====="
.fi
.SS "const char* error_advice_3120010"
\fBInitial value:\fP
.PP
.nf
=  R"=====(Ensure that your packed transaction JSON follows the following format!
{
  "signatures" : [ "signature" ],
  "compression" : enum("none", "zlib"),
  "hex_transaction" : "bytes"
}
e\&.g\&.
{
  "signatures" : [ "AACJze4m1ZHQ4UjuHpBcX6uHPN4Xyggv52raQMTBZJghzDLepaPcSGCNYTxaP2NiaF4yRF5RaYwqsQYAwBwFtfuTJr34Z5GJX" ],
  "compression" : "none",
  "hex_transaction" : "6c36a25a00002602626c5e7f0000000000010000001e4d75af460000000000a53176010000000000ea305500000000a8ed3232180000001e4d75af4680969800000000000443555200000000"
})====="
.fi
.SS "const char* error_advice_3130002"
\fBInitial value:\fP
.PP
.nf
=  "Ensure that you have \033[2maacio::wallet_api_plugin\033[0m\033[32m added to your node's configuration!\n"
                                    "Otherwise specify your wallet location with \033[2m--wallet-host\033[0m\033[32m and \033[2m--wallet_port\033[0m\033[32m arguments!"
.fi
.SS "const \fBstd::vector\fP<std::pair<const char*, \fBstd::vector\fP<const char *> > > error_help_text"
\fBInitial value:\fP
.PP
.nf
{
   {"Error\n: 3030011", {transaction_help_text_header, duplicate_transaction_help_text}},
   {"Error\n: 3030001[^\\x00]*\\{\"acct\":\"([^\"]*)\"\\}", {transaction_help_text_header, missing_perms_help_text}},
   {"Error\n: 3030002[^\\x00]*Transaction declares authority\&.*account\":\"([^\"]*)\",\"permission\":\"([^\"]*)\"", {transaction_help_text_header, missing_sigs_help_text}},
   {"Error\n: 3030008[^\\x00]*\\{\"scope\":\"([^\"]*)\"\\}", {transaction_help_text_header, missing_scope_help_text}},
   {"Account not found: ([\\S]*)", {transaction_help_text_header, tx_unknown_account_help_text, unknown_account_help_text}},
   {"Error\n: 303", {transaction_help_text_header}},
   {"unknown key[^\\x00]*abi_json_to_bin\&.*code\":\"([^\"]*)\"\&.*action\":\"([^\"]*)\"", {missing_abi_help_text}},
   {"unknown key[^\\x00]*chain/get_code\&.*name\":\"([^\"]*)\"", {unknown_account_help_text}},
   {"Unable to open file[^\\x00]*wallet/open\&.*postdata\":\"([^\"]*)\"", {unknown_wallet_help_text}},
   {"AES error[^\\x00]*wallet/unlock\&.*postdata\":\\[\"([^\"]*)\"", {bad_wallet_password_help_text}},
   {"Wallet is locked: ([\\S]*)", {locked_wallet_help_text}},
   {"Key already in wallet[^\\x00]*wallet/import_key\&.*postdata\":\\[\"([^\"]*)\"", {duplicate_key_import_help_text}},
   {"ABI does not define table[^\\x00]*get_table_rows\&.*code\":\"([^\"]*)\",\"table\":\"([^\"]*)\"", {unknown_abi_table_help_text}}
}
.fi
.SS "const char* missing_abi_help_text"
\fBInitial value:\fP
.PP
.nf
= _(R"text(The ABI for action "${2}" on code account "${1}" is unknown\&.
The payload cannot be automatically serialized\&.

You can push an arbitrary transaction using the 'push action' subcommand)text")
.fi
.SS "const char* missing_perms_help_text"
\fBInitial value:\fP
.PP
.nf
= _(R"text(The transaction requires permissions that were not granted by the transaction\&.
Missing permission from:
  - ${1}

Please use the `-p,--permissions` option to add the missing accounts!
Note: you will need an unlocked wallet that can authorized these permissions\&.)text")
.fi
.SS "const char* missing_scope_help_text"
\fBInitial value:\fP
.PP
.nf
= _(R"text(The transaction requires scopes that were not listed by the transaction\&.
Missing scope(s):
  - ${1}

Please use the `-S,--scope` option to add the missing accounts!)text")
.fi
.SS "const char* missing_sigs_help_text"
\fBInitial value:\fP
.PP
.nf
= _(R"text(The transaction requires permissions that could not be authorized by the wallet\&.
Missing authrizations:
  - ${1}@${2}

Please make sure the proper keys are imported into an unlocked wallet and try again!)text")
.fi
.SS "const char* unknown_abi_table_help_text"
\fBInitial value:\fP
.PP
.nf
= _(R"text(The ABI for the code on account "${1}" does not specify table "${2}"\&.

Please check the account and table name, and verify that the account has the expected code using:
  claac get code ${1})text")
.fi
.SS "const char* unknown_account_help_text"
\fBInitial value:\fP
.PP
.nf
= _(R"text(Unknown accounts:
  - ${1}

Please check the account names and try again!)text")
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for AcuteAngleChain from the source code\&.
