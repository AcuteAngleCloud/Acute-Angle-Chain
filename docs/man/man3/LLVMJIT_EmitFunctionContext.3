.TH "LLVMJIT::EmitFunctionContext" 3 "Sun Jun 3 2018" "Acute-Angle-Chain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
LLVMJIT::EmitFunctionContext
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBBranchTarget\fP"
.br
.ti -1c
.RI "struct \fBControlContext\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef void \fBResult\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBEmitFunctionContext\fP (\fBEmitModuleContext\fP &inEmitModuleContext, const \fBModule\fP &inModule, const \fBFunctionDef\fP &inFunctionDef, \fBFunctionInstance\fP *inFunctionInstance, llvm::Function *inLLVMFunction)"
.br
.ti -1c
.RI "void \fBemit\fP ()"
.br
.ti -1c
.RI "llvm::Value * \fBpop\fP ()"
.br
.ti -1c
.RI "void \fBpopMultiple\fP (llvm::Value **outValues, Uptr \fBnum\fP)"
.br
.ti -1c
.RI "llvm::Value * \fBgetTopValue\fP () const"
.br
.ti -1c
.RI "void \fBpush\fP (llvm::Value *value)"
.br
.ti -1c
.RI "llvm::PHINode * \fBcreatePHI\fP (llvm::BasicBlock *basicBlock, ResultType type)"
.br
.ti -1c
.RI "void \fBlogOperator\fP (const std::string &operatorDescription)"
.br
.ti -1c
.RI "llvm::Value * \fBcoerceI32ToBool\fP (llvm::Value *i32Value)"
.br
.ti -1c
.RI "llvm::Value * \fBcoerceBoolToI32\fP (llvm::Value *boolValue)"
.br
.ti -1c
.RI "llvm::Value * \fBcoerceByteIndexToPointer\fP (llvm::Value *byteIndex, U32 offset, llvm::Type *memoryType)"
.br
.ti -1c
.RI "void \fBtrapDivideByZero\fP (ValueType type, llvm::Value *divisor)"
.br
.ti -1c
.RI "void \fBtrapDivideByZeroOrIntegerOverflow\fP (ValueType type, llvm::Value *left, llvm::Value *right)"
.br
.ti -1c
.RI "llvm::Value * \fBgetLLVMIntrinsic\fP (const std::initializer_list< llvm::Type *> &argTypes, llvm::Intrinsic::ID id)"
.br
.ti -1c
.RI "llvm::Value * \fBemitRuntimeIntrinsic\fP (const char *intrinsicName, const \fBFunctionType\fP *intrinsicType, const std::initializer_list< llvm::Value *> &args)"
.br
.ti -1c
.RI "void \fBemitConditionalTrapIntrinsic\fP (llvm::Value *booleanCondition, const char *intrinsicName, const \fBFunctionType\fP *intrinsicType, const std::initializer_list< llvm::Value *> &args)"
.br
.ti -1c
.RI "void \fBnop\fP (\fBNoImm\fP)"
.br
.ti -1c
.RI "void \fBunknown\fP (Opcode opcode)"
.br
.ti -1c
.RI "void \fBpushControlStack\fP (ControlContext::Type type, ResultType resultType, llvm::BasicBlock *endBlock, llvm::PHINode *endPHI, llvm::BasicBlock *elseBlock=nullptr)"
.br
.ti -1c
.RI "void \fBpushBranchTarget\fP (ResultType branchArgumentType, llvm::BasicBlock *branchTargetBlock, llvm::PHINode *branchTargetPHI)"
.br
.ti -1c
.RI "void \fBblock\fP (\fBControlStructureImm\fP imm)"
.br
.ti -1c
.RI "void \fBloop\fP (\fBControlStructureImm\fP imm)"
.br
.ti -1c
.RI "void \fBif_\fP (\fBControlStructureImm\fP imm)"
.br
.ti -1c
.RI "void \fBelse_\fP (\fBNoImm\fP imm)"
.br
.ti -1c
.RI "void \fBend\fP (\fBNoImm\fP)"
.br
.ti -1c
.RI "\fBBranchTarget\fP & \fBgetBranchTargetByDepth\fP (Uptr depth)"
.br
.ti -1c
.RI "void \fBenterUnreachable\fP ()"
.br
.ti -1c
.RI "void \fBbr_if\fP (\fBBranchImm\fP imm)"
.br
.ti -1c
.RI "void \fBbr\fP (\fBBranchImm\fP imm)"
.br
.ti -1c
.RI "void \fBbr_table\fP (\fBBranchTableImm\fP imm)"
.br
.ti -1c
.RI "void \fBreturn_\fP (\fBNoImm\fP)"
.br
.ti -1c
.RI "void \fBunreachable\fP (\fBNoImm\fP)"
.br
.ti -1c
.RI "void \fBdrop\fP (\fBNoImm\fP)"
.br
.ti -1c
.RI "void \fBselect\fP (\fBNoImm\fP)"
.br
.ti -1c
.RI "void \fBcall\fP (\fBCallImm\fP imm)"
.br
.ti -1c
.RI "void \fBcall_indirect\fP (\fBCallIndirectImm\fP imm)"
.br
.ti -1c
.RI "void \fBget_local\fP (\fBGetOrSetVariableImm\fP< false > imm)"
.br
.ti -1c
.RI "void \fBset_local\fP (\fBGetOrSetVariableImm\fP< false > imm)"
.br
.ti -1c
.RI "void \fBtee_local\fP (\fBGetOrSetVariableImm\fP< false > imm)"
.br
.ti -1c
.RI "void \fBget_global\fP (\fBGetOrSetVariableImm\fP< true > imm)"
.br
.ti -1c
.RI "void \fBset_global\fP (\fBGetOrSetVariableImm\fP< true > imm)"
.br
.ti -1c
.RI "void \fBgrow_memory\fP (\fBMemoryImm\fP)"
.br
.ti -1c
.RI "void \fBcurrent_memory\fP (\fBMemoryImm\fP)"
.br
.ti -1c
.RI "\fBEMIT_CONST\fP (i32, I32) EMIT_CONST(i64"
.br
.ti -1c
.RI "I64 \fBEMIT_CONST\fP (f32, F32) EMIT_CONST(f64"
.br
.ti -1c
.RI "llvm::Value * \fBidentityConversion\fP (llvm::Value *value, llvm::Type *type)"
.br
.ti -1c
.RI "\fBEMIT_LOAD_OP\fP (i32, load8_s, llvmI8Type, 0, irBuilder\&.CreateSExt) EMIT_LOAD_OP(i32"
.br
.ti -1c
.RI "irBuilder CreateZExt \fBEMIT_LOAD_OP\fP (i32, load16_s, llvmI16Type, 1, irBuilder\&.CreateSExt) EMIT_LOAD_OP(i32"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt \fBEMIT_LOAD_OP\fP (i64, load8_s, llvmI8Type, 0, irBuilder\&.CreateSExt) EMIT_LOAD_OP(i64"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt \fBEMIT_LOAD_OP\fP (i64, load16_s, llvmI16Type, 1, irBuilder\&.CreateSExt) EMIT_LOAD_OP(i64"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt \fBEMIT_LOAD_OP\fP (i64, load32_s, llvmI32Type, 2, irBuilder\&.CreateSExt) EMIT_LOAD_OP(i64"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt \fBEMIT_LOAD_OP\fP (i32, load, llvmI32Type, 2, identityConversion) EMIT_LOAD_OP(i64"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt identityConversion \fBEMIT_LOAD_OP\fP (f32, load, llvmF32Type, 2, identityConversion) EMIT_LOAD_OP(f64"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt identityConversion identityConversion \fBEMIT_STORE_OP\fP (i32, store8, llvmI8Type, 0, irBuilder\&.CreateTrunc) EMIT_STORE_OP(i64"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt identityConversion identityConversion irBuilder CreateTrunc \fBEMIT_STORE_OP\fP (i32, store16, llvmI16Type, 1, irBuilder\&.CreateTrunc) EMIT_STORE_OP(i64"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt identityConversion identityConversion irBuilder CreateTrunc irBuilder CreateTrunc \fBEMIT_STORE_OP\fP (i32, store, llvmI32Type, 2, irBuilder\&.CreateTrunc) EMIT_STORE_OP(i64"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt identityConversion identityConversion irBuilder CreateTrunc irBuilder CreateTrunc irBuilder CreateTrunc \fBEMIT_STORE_OP\fP (f32, store, llvmF32Type, 2, identityConversion) EMIT_STORE_OP(f64"
.br
.ti -1c
.RI "llvm::Value * \fBemitSRem\fP (ValueType type, llvm::Value *left, llvm::Value *right)"
.br
.ti -1c
.RI "llvm::Value * \fBemitShiftCountMask\fP (ValueType type, llvm::Value *shiftCount)"
.br
.ti -1c
.RI "llvm::Value * \fBemitRotl\fP (ValueType type, llvm::Value *left, llvm::Value *right)"
.br
.ti -1c
.RI "llvm::Value * \fBemitRotr\fP (ValueType type, llvm::Value *left, llvm::Value *right)"
.br
.ti -1c
.RI "\fBEMIT_INT_BINARY_OP\fP (div_s,(trapDivideByZeroOrIntegerOverflow(type, left, right), irBuilder\&.CreateSDiv(left, right))) EMIT_INT_BINARY_OP(div_u"
.br
.ti -1c
.RI "\fBtrapDivideByZero\fP (type, right)"
.br
.ti -1c
.RI "irBuilder \fBCreateUDiv\fP (left, right))) EMIT_INT_BINARY_OP(rem_u"
.br
.ti -1c
.RI "irBuilder \fBtrapDivideByZero\fP (type, right)"
.br
.ti -1c
.RI "irBuilder irBuilder \fBCreateURem\fP (left, right))) EMIT_INT_BINARY_OP(shl"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder \fBCreateShl\fP (left, emitShiftCountMask(type, right))) EMIT_INT_BINARY_OP(shr_s"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder \fBCreateAShr\fP (left, emitShiftCountMask(type, right))) EMIT_INT_BINARY_OP(shr_u"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder \fBCreateLShr\fP (left, emitShiftCountMask(type, right))) EMIT_INT_BINARY_OP(\fBeq\fP"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder \fBcoerceBoolToI32\fP (irBuilder\&.CreateICmpEQ(left, right))) EMIT_INT_BINARY_OP(\fBne\fP"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder \fBcoerceBoolToI32\fP (irBuilder\&.CreateICmpNE(left, right))) EMIT_INT_BINARY_OP(lt_s"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder \fBcoerceBoolToI32\fP (irBuilder\&.CreateICmpSLT(left, right))) EMIT_INT_BINARY_OP(lt_u"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder \fBcoerceBoolToI32\fP (irBuilder\&.CreateICmpULT(left, right))) EMIT_INT_BINARY_OP(le_s"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder \fBcoerceBoolToI32\fP (irBuilder\&.CreateICmpSLE(left, right))) EMIT_INT_BINARY_OP(le_u"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder \fBcoerceBoolToI32\fP (irBuilder\&.CreateICmpULE(left, right))) EMIT_INT_BINARY_OP(gt_s"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder \fBcoerceBoolToI32\fP (irBuilder\&.CreateICmpSGT(left, right))) EMIT_INT_BINARY_OP(gt_u"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder \fBcoerceBoolToI32\fP (irBuilder\&.CreateICmpUGT(left, right))) EMIT_INT_BINARY_OP(ge_s"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder \fBcoerceBoolToI32\fP (irBuilder\&.CreateICmpSGE(left, right))) EMIT_INT_BINARY_OP(ge_u"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder \fBcoerceBoolToI32\fP (irBuilder\&.CreateICmpUGE(left, right))) EMIT_INT_UNARY_OP(clz"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBCreateCall\fP (getLLVMIntrinsic({operand\->getType()}, llvm::Intrinsic::ctlz), llvm::ArrayRef< llvm::Value *>({operand, emitLiteral(false)}))) EMIT_INT_UNARY_OP(ctz"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBCreateCall\fP (getLLVMIntrinsic({operand\->getType()}, llvm::Intrinsic::cttz), llvm::ArrayRef< llvm::Value *>({operand, emitLiteral(false)}))) EMIT_INT_UNARY_OP(popcnt"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBCreateCall\fP (getLLVMIntrinsic({operand\->getType()}, llvm::Intrinsic::ctpop), llvm::ArrayRef< llvm::Value *>({operand}))) EMIT_INT_UNARY_OP(eqz"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBcoerceBoolToI32\fP (irBuilder\&.CreateICmpEQ(operand, typedZeroConstants[(Uptr) type]))) EMIT_FP_BINARY_OP(copysign"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBCreateCall\fP (getLLVMIntrinsic({left\->getType()}, llvm::Intrinsic::copysign), llvm::ArrayRef< llvm::Value *>({left, right}))) EMIT_FP_UNARY_OP(abs"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBCreateCall\fP (getLLVMIntrinsic({operand\->getType()}, llvm::Intrinsic::fabs), llvm::ArrayRef< llvm::Value *>({operand}))) EMIT_FP_UNARY_OP(sqrt"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBCreateCall\fP (getLLVMIntrinsic({operand\->getType()}, llvm::Intrinsic::sqrt), llvm::ArrayRef< llvm::Value *>({operand}))) EMIT_FP_BINARY_OP(\fBeq\fP"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBcoerceBoolToI32\fP (irBuilder\&.CreateFCmpOEQ(left, right))) EMIT_FP_BINARY_OP(\fBne\fP"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBcoerceBoolToI32\fP (irBuilder\&.CreateFCmpUNE(left, right))) EMIT_FP_BINARY_OP(lt"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBcoerceBoolToI32\fP (irBuilder\&.CreateFCmpOLT(left, right))) EMIT_FP_BINARY_OP(le"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBcoerceBoolToI32\fP (irBuilder\&.CreateFCmpOLE(left, right))) EMIT_FP_BINARY_OP(gt"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBcoerceBoolToI32\fP (irBuilder\&.CreateFCmpOGT(left, right))) EMIT_FP_BINARY_OP(ge"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBcoerceBoolToI32\fP (irBuilder\&.CreateFCmpOGE(left, right))) EMIT_FP_UNARY_OP(convert_s_i32"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBCreateSIToFP\fP (operand, asLLVMType(type))) EMIT_FP_UNARY_OP(convert_s_i64"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBCreateSIToFP\fP (operand, asLLVMType(type))) EMIT_FP_UNARY_OP(convert_u_i32"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBCreateUIToFP\fP (operand, asLLVMType(type))) EMIT_FP_UNARY_OP(convert_u_i64"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBCreateUIToFP\fP (operand, asLLVMType(type))) EMIT_FP_BINARY_OP(min"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBemitRuntimeIntrinsic\fP ('wavmIntrinsics\&.floatMin', FunctionType::get(asResultType(type),{type, type}),{left, right})) EMIT_FP_BINARY_OP(max"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBemitRuntimeIntrinsic\fP ('wavmIntrinsics\&.floatMax', FunctionType::get(asResultType(type),{type, type}),{left, right})) EMIT_FP_UNARY_OP(ceil"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBemitRuntimeIntrinsic\fP ('wavmIntrinsics\&.floatCeil', FunctionType::get(asResultType(type),{type}),{operand})) EMIT_FP_UNARY_OP(floor"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBemitRuntimeIntrinsic\fP ('wavmIntrinsics\&.floatFloor', FunctionType::get(asResultType(type),{type}),{operand})) EMIT_FP_UNARY_OP(trunc"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBemitRuntimeIntrinsic\fP ('wavmIntrinsics\&.floatTrunc', FunctionType::get(asResultType(type),{type}),{operand})) EMIT_FP_UNARY_OP(nearest"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBemitRuntimeIntrinsic\fP ('wavmIntrinsics\&.floatNearest', FunctionType::get(asResultType(type),{type}),{operand})) EMIT_INT_UNARY_OP(trunc_s_f32"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBemitRuntimeIntrinsic\fP ('wavmIntrinsics\&.floatToSignedInt', FunctionType::get(asResultType(type),{ValueType::f32}),{operand})) EMIT_INT_UNARY_OP(trunc_s_f64"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBemitRuntimeIntrinsic\fP ('wavmIntrinsics\&.floatToSignedInt', FunctionType::get(asResultType(type),{ValueType::f64}),{operand})) EMIT_INT_UNARY_OP(trunc_u_f32"
.br
.ti -1c
.RI "irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder irBuilder \fBemitRuntimeIntrinsic\fP ('wavmIntrinsics\&.floatToUnsignedInt', FunctionType::get(asResultType(type),{ValueType::f32}),{operand})) EMIT_INT_UNARY_OP(trunc_u_f64"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBEmitModuleContext\fP & \fBmoduleContext\fP"
.br
.ti -1c
.RI "const \fBModule\fP & \fBmodule\fP"
.br
.ti -1c
.RI "const \fBFunctionDef\fP & \fBfunctionDef\fP"
.br
.ti -1c
.RI "const \fBFunctionType\fP * \fBfunctionType\fP"
.br
.ti -1c
.RI "\fBFunctionInstance\fP * \fBfunctionInstance\fP"
.br
.ti -1c
.RI "llvm::Function * \fBllvmFunction\fP"
.br
.ti -1c
.RI "llvm::IRBuilder \fBirBuilder\fP"
.br
.ti -1c
.RI "\fBstd::vector\fP< llvm::Value * > \fBlocalPointers\fP"
.br
.ti -1c
.RI "llvm::DISubprogram * \fBdiFunction\fP"
.br
.ti -1c
.RI "\fBstd::vector\fP< \fBControlContext\fP > \fBcontrolStack\fP"
.br
.ti -1c
.RI "\fBstd::vector\fP< \fBBranchTarget\fP > \fBbranchTargetStack\fP"
.br
.ti -1c
.RI "\fBstd::vector\fP< llvm::Value * > \fBstack\fP"
.br
.ti -1c
.RI "\fBload8_u\fP"
.br
.ti -1c
.RI "\fBllvmI8Type\fP"
.br
.ti -1c
.RI "irBuilder CreateZExt \fBload16_u\fP"
.br
.ti -1c
.RI "irBuilder CreateZExt \fBllvmI16Type\fP"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt \fBload8_u\fP"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt \fBllvmI8Type\fP"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt \fBload16_u\fP"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt \fBllvmI16Type\fP"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt \fBload32_u\fP"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt \fBllvmI32Type\fP"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt \fBload\fP"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt \fBllvmI64Type\fP"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt identityConversion \fBload\fP"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt identityConversion \fBllvmF64Type\fP"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt identityConversion identityConversion \fBstore8\fP"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt identityConversion identityConversion \fBllvmI8Type\fP"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt identityConversion identityConversion irBuilder CreateTrunc \fBstore16\fP"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt identityConversion identityConversion irBuilder CreateTrunc \fBllvmI16Type\fP"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt identityConversion identityConversion irBuilder CreateTrunc irBuilder CreateTrunc \fBstore32\fP"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt identityConversion identityConversion irBuilder CreateTrunc irBuilder CreateTrunc \fBllvmI32Type\fP"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt identityConversion identityConversion irBuilder CreateTrunc irBuilder CreateTrunc irBuilder CreateTrunc \fBstore\fP"
.br
.ti -1c
.RI "irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt irBuilder CreateZExt identityConversion identityConversion irBuilder CreateTrunc irBuilder CreateTrunc irBuilder CreateTrunc \fBllvmF64Type\fP"
.br
.in -1c

.SH "Author"
.PP 
Generated automatically by Doxygen for Acute-Angle-Chain from the source code\&.
