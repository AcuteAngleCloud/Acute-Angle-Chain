.TH "contractdev" 3 "Sun Jun 3 2018" "Acute-Angle-Chain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
contractdev \- Introduction to writing contracts for AAC\&.IO\&.  

.SH SYNOPSIS
.br
.PP
.SS "Modules"

.in +1c
.ti -1c
.RI "\fBAccount API\fP"
.br
.RI "Define API for querying account data\&. "
.ti -1c
.RI "\fBAction API\fP"
.br
.RI "Define API for querying action properties\&. "
.ti -1c
.RI "\fBChain API\fP"
.br
.RI "Define API for querying internal chain state\&. "
.ti -1c
.RI "\fBDatabase API\fP"
.br
.RI "APIs that store and retreive data on the blockchain
.PP
AAC\&.IO organizes data according to the following broad structure: "
.ti -1c
.RI "\fBMath API\fP"
.br
.RI "Defines common math functions\&. "
.ti -1c
.RI "\fBConsole API\fP"
.br
.RI "Enables applications to log/print text messages\&. "
.ti -1c
.RI "\fBSystem API\fP"
.br
.RI "Define API for interacting with system level intrinsics\&. "
.ti -1c
.RI "\fBToken API\fP"
.br
.RI "Defines the ABI for interfacing with standard-compatible token messages and database tables\&. "
.ti -1c
.RI "\fBtransaction API\fP"
.br
.RI "Define API for sending transactions and inline messages\&. "
.ti -1c
.RI "\fBBuiltin Types\fP"
.br
.RI "Specifies typedefs and aliases\&. "
.in -1c
.SH "Detailed Description"
.PP 
Introduction to writing contracts for AAC\&.IO\&. 


.SH "Background"
.PP
AAC\&.IO contracts (aka applications) are deployed to a blockchain as pre-compiled Web Assembly (aka WASM)\&. WASM is compiled from C/C++ using LLVM and clang, which means that you will require knowledge of C/C++ in order to develop your blockchain applications\&. While it is possible to develop in \fBC\fP, we strongly recommend that all developers use the AAC\&.IO C++ API which provides much stronger type safety and is generally easier to read\&.
.SH "Application Structure"
.PP
AAC\&.IO applications are designed around event (aka action) handlers that respond to user actions\&. For example, a user might transfer tokens to another user\&. This event can be processed and potentially rejected by the sender, the receiver, and the currency application itself\&.
.PP
As an application developer you get to decide what actions users can take and which handlers may or must be called in response to those events\&.
.SS "Entry Points"
AAC\&.IO applications have a \fCapply\fP which is like \fCmain\fP in traditional applications:
.PP
.PP
.nf
extern "C" {
   void init();
   void apply( uint64_t code, uint64_t action );
}
.fi
.PP
.PP
\fCapply\fP is given the arguments \fCcode\fP and \fCaction\fP which uniquely identify every event in the system\&. For example, \fCcode\fP could be a \fIcurrency\fP contract and \fCaction\fP could be \fItransfer\fP\&. This event (code,action) may be passed to several contracts including the \fCsender\fP and \fCreceiver\fP\&. It is up to your application to figure out what to do in response to such an event\&.
.PP
\fCinit\fP is another entry point that is called once immediately after loading the code\&. It is where you should perform one-time initialization of state\&.
.PP
.SS "Example Apply Entry Handler"
.PP
Generally speaking, you should use your entry handler to dispatch events to functions that implement the majority of your logic and optionally reject events that your contract is unable or unwilling to accept\&.
.PP
.PP
.nf
extern "C" {
   void apply( uint64_t code, uint64_t action ) {
      if( code == N(currency) ) {
         if( action == N(transfer) ) 
            currency::apply_currency_transfer( current_action< currency::transfer >() );
      } else {
         aacio_assert( false, "rejecting unexpected event" );
      }
   }
}
.fi
.PP
.PP
\fBNote:\fP
.RS 4
When defining your entry points it is required that they are placed in an \fCextern 'C'\fP code block so that c++ name mangling does not get applied to the function\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Acute-Angle-Chain from the source code\&.
