.TH "websocketpp::http::parser::parser" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
websocketpp::http::parser::parser \- \fBBase\fP HTTP parser\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <parser\&.hpp>\fP
.PP
Inherited by \fBwebsocketpp::http::parser::request\fP, and \fBwebsocketpp::http::parser::response\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "std::string const  & \fBget_version\fP () const"
.br
.RI "Get the HTTP version string\&. "
.ti -1c
.RI "void \fBset_version\fP (std::string const &version)"
.br
.RI "Set HTTP parser Version\&. "
.ti -1c
.RI "std::string const  & \fBget_header\fP (std::string const &key) const"
.br
.RI "Get the value of an HTTP header\&. "
.ti -1c
.RI "bool \fBget_header_as_plist\fP (std::string const &key, \fBparameter_list\fP &out) const"
.br
.RI "Extract an HTTP parameter list from a parser header\&. "
.ti -1c
.RI "void \fBappend_header\fP (std::string const &key, std::string const &val)"
.br
.RI "Append a value to an existing HTTP header\&. "
.ti -1c
.RI "void \fBreplace_header\fP (std::string const &key, std::string const &val)"
.br
.RI "Set a value for an HTTP header, replacing an existing value\&. "
.ti -1c
.RI "void \fBremove_header\fP (std::string const &key)"
.br
.RI "Remove a header from the parser\&. "
.ti -1c
.RI "std::string const  & \fBget_body\fP () const"
.br
.RI "Get HTTP body\&. "
.ti -1c
.RI "void \fBset_body\fP (std::string const &value)"
.br
.RI "Set body content\&. "
.ti -1c
.RI "size_t \fBget_max_body_size\fP () const"
.br
.RI "Get body size limit\&. "
.ti -1c
.RI "void \fBset_max_body_size\fP (size_t value)"
.br
.RI "Set body size limit\&. "
.ti -1c
.RI "bool \fBparse_parameter_list\fP (std::string const &in, \fBparameter_list\fP &out) const"
.br
.RI "Extract an HTTP parameter list from a string\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBprocess_header\fP (std::string::iterator begin, std::string::iterator end)"
.br
.RI "Process a header line\&. "
.ti -1c
.RI "bool \fBprepare_body\fP ()"
.br
.RI "Prepare the parser to begin parsing body data\&. "
.ti -1c
.RI "size_t \fBprocess_body\fP (char const *buf, size_t len)"
.br
.RI "Process body data\&. "
.ti -1c
.RI "bool \fBbody_ready\fP () const"
.br
.RI "Check if the parser is done parsing the body\&. "
.ti -1c
.RI "std::string \fBraw_headers\fP () const"
.br
.RI "Generate and return the HTTP headers as a string\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "std::string \fBm_version\fP"
.br
.ti -1c
.RI "\fBheader_list\fP \fBm_headers\fP"
.br
.ti -1c
.RI "size_t \fBm_header_bytes\fP"
.br
.ti -1c
.RI "std::string \fBm_body\fP"
.br
.ti -1c
.RI "size_t \fBm_body_bytes_needed\fP"
.br
.ti -1c
.RI "size_t \fBm_body_bytes_max\fP"
.br
.ti -1c
.RI "body_encoding::value \fBm_body_encoding\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBBase\fP HTTP parser\&. 

Includes methods and data elements common to all types of HTTP messages such as headers, versions, bodies, etc\&. 
.SH "Member Function Documentation"
.PP 
.SS "void websocketpp::http::parser::parser::append_header (std::string const & key, std::string const & val)\fC [inline]\fP"

.PP
Append a value to an existing HTTP header\&. This method will set the value of the HTTP header \fCkey\fP with the indicated value\&. If a header with the name \fCkey\fP already exists, \fCval\fP will be appended to the existing value\&.
.PP
\fBTodo\fP
.RS 4
Make this method case insensitive\&. 
.PP
Should there be any restrictions on which keys are allowed? 
.PP
Exception free varient
.RE
.PP
.PP
\fBSee also:\fP
.RS 4
\fBreplace_header\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP The name/key of the header to append to\&. 
.br
\fIval\fP The value to append\&. 
.RE
.PP

.SS "bool websocketpp::http::parser::parser::body_ready () const\fC [inline]\fP, \fC [protected]\fP"

.PP
Check if the parser is done parsing the body\&. Behavior before a call to \fCprepare_body\fP is undefined\&.
.PP
\fBSince:\fP
.RS 4
0\&.5\&.0
.RE
.PP
\fBReturns:\fP
.RS 4
\fBTrue\fP if the message body has been completed loaded\&. 
.RE
.PP

.SS "std::string const& websocketpp::http::parser::parser::get_body () const\fC [inline]\fP"

.PP
Get HTTP body\&. Gets the body of the HTTP object
.PP
\fBReturns:\fP
.RS 4
The body of the HTTP message\&. 
.RE
.PP

.SS "std::string const  & websocketpp::http::parser::parser::get_header (std::string const & key) const\fC [inline]\fP"

.PP
Get the value of an HTTP header\&. 
.PP
\fBTodo\fP
.RS 4
Make this method case insensitive\&.
.RE
.PP
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP The name/key of the header to get\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The value associated with the given HTTP header key\&. 
.RE
.PP

.SS "bool websocketpp::http::parser::parser::get_header_as_plist (std::string const & key, \fBparameter_list\fP & out) const\fC [inline]\fP"

.PP
Extract an HTTP parameter list from a parser header\&. If the header requested doesn't exist or exists and is empty the parameter list is valid (but empty)\&.
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP The name/key of the HTTP header to use as input\&. 
.br
\fIout\fP The parameter list to store extracted parameters in\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Whether or not the input was a valid parameter list\&. 
.RE
.PP

.SS "size_t websocketpp::http::parser::parser::get_max_body_size () const\fC [inline]\fP"

.PP
Get body size limit\&. Retrieves the maximum number of bytes to parse & buffer before canceling a request\&.
.PP
\fBSince:\fP
.RS 4
0\&.5\&.0
.RE
.PP
\fBReturns:\fP
.RS 4
The maximum length of a message body\&. 
.RE
.PP

.SS "std::string const& websocketpp::http::parser::parser::get_version () const\fC [inline]\fP"

.PP
Get the HTTP version string\&. 
.PP
\fBReturns:\fP
.RS 4
The version string for this parser 
.RE
.PP

.SS "bool websocketpp::http::parser::parser::parse_parameter_list (std::string const & in, \fBparameter_list\fP & out) const\fC [inline]\fP"

.PP
Extract an HTTP parameter list from a string\&. 
.PP
\fBParameters:\fP
.RS 4
\fIin\fP The input string\&. 
.br
\fIout\fP The parameter list to store extracted parameters in\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Whether or not the input was a valid parameter list\&. 
.RE
.PP

.SS "bool websocketpp::http::parser::parser::prepare_body ()\fC [inline]\fP, \fC [protected]\fP"

.PP
Prepare the parser to begin parsing body data\&. Inspects headers to determine if the message has a body that needs to be read\&. If so, sets up the necessary state, otherwise returns false\&. If this method returns true and loading the message body is desired call \fCprocess_body\fP until it returns zero bytes or an error\&.
.PP
Must not be called until after all headers have been processed\&.
.PP
\fBSince:\fP
.RS 4
0\&.5\&.0
.RE
.PP
\fBReturns:\fP
.RS 4
\fBTrue\fP if more bytes are needed to load the body, false otherwise\&. 
.RE
.PP

.SS "size_t websocketpp::http::parser::parser::process_body (char const * buf, size_t len)\fC [inline]\fP, \fC [protected]\fP"

.PP
Process body data\&. Parses body data\&.
.PP
\fBSince:\fP
.RS 4
0\&.5\&.0
.RE
.PP
\fBParameters:\fP
.RS 4
\fIbegin\fP An iterator to the beginning of the sequence\&. 
.br
\fIend\fP An iterator to the end of the sequence\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of bytes processed 
.RE
.PP

.SS "void websocketpp::http::parser::parser::process_header (std::string::iterator begin, std::string::iterator end)\fC [inline]\fP, \fC [protected]\fP"

.PP
Process a header line\&. 
.PP
\fBTodo\fP
.RS 4
Update this method to be exception free\&.
.RE
.PP
.PP
\fBParameters:\fP
.RS 4
\fIbegin\fP An iterator to the beginning of the sequence\&. 
.br
\fIend\fP An iterator to the end of the sequence\&. 
.RE
.PP

.SS "std::string websocketpp::http::parser::parser::raw_headers () const\fC [inline]\fP, \fC [protected]\fP"

.PP
Generate and return the HTTP headers as a string\&. Each headers will be followed by the 
.br
 sequence including the last one\&. \fBA\fP second 
.br
 sequence (blank header) is not appended by this method
.PP
\fBReturns:\fP
.RS 4
The HTTP headers as a string\&. 
.RE
.PP

.SS "void websocketpp::http::parser::parser::remove_header (std::string const & key)\fC [inline]\fP"

.PP
Remove a header from the parser\&. Removes the header entirely from the parser\&. This is different than setting the value of the header to blank\&.
.PP
\fBTodo\fP
.RS 4
Make this method case insensitive\&.
.RE
.PP
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP The name/key of the header to remove\&. 
.RE
.PP

.SS "void websocketpp::http::parser::parser::replace_header (std::string const & key, std::string const & val)\fC [inline]\fP"

.PP
Set a value for an HTTP header, replacing an existing value\&. This method will set the value of the HTTP header \fCkey\fP with the indicated value\&. If a header with the name \fCkey\fP already exists, \fCval\fP will replace the existing value\&.
.PP
\fBTodo\fP
.RS 4
Make this method case insensitive\&. 
.PP
Should there be any restrictions on which keys are allowed? 
.PP
Exception free varient
.RE
.PP
.PP
\fBSee also:\fP
.RS 4
\fBappend_header\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP The name/key of the header to append to\&. 
.br
\fIval\fP The value to append\&. 
.RE
.PP

.SS "void websocketpp::http::parser::parser::set_body (std::string const & value)\fC [inline]\fP"

.PP
Set body content\&. Set the body content of the HTTP response to the parameter string\&. Note set_body will also set the Content-Length HTTP header to the appropriate value\&. If you want the Content-Length header to be something else, do so via replace_header('Content-Length') after calling \fBset_body()\fP
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP String data to include as the body content\&. 
.RE
.PP

.SS "void websocketpp::http::parser::parser::set_max_body_size (size_t value)\fC [inline]\fP"

.PP
Set body size limit\&. Set the maximum number of bytes to parse and buffer before canceling a request\&.
.PP
\fBSince:\fP
.RS 4
0\&.5\&.0
.RE
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP The size to set the max body length to\&. 
.RE
.PP

.SS "void websocketpp::http::parser::parser::set_version (std::string const & version)\fC [inline]\fP"

.PP
Set HTTP parser Version\&. Input should be in format: HTTP/x\&.y where x and y are positive integers\&. 
.PP
\fBTodo\fP
.RS 4
Does this method need any validation?
.RE
.PP
.PP
\fBParameters:\fP
.RS 4
\fIversion\fP The value to set the HTTP version to\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for AcuteAngleChain from the source code\&.
