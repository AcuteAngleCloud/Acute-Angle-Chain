.TH "fc::tuple<>" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
fc::tuple<>
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <tuple\&.hpp>\fP
.SH "Detailed Description"
.PP 

.SS "template<BOOST_PP_ENUM_PARAMS_WITH_A_DEFAULT(9, typename A, void)>
.br
struct fc::tuple<>"
Provides a fast-compiling tuple that doesn't use fancy meta-programming techniques\&. It is limited to 4 parameters which is sufficient for most methods argument lists which is the primary use case for this tuple\&. Methods that require more than 4 parameters are probably better served by defining a struct\&.
.PP
The members of the tuple are easily visited with a simple visitor functor of the form: 
.PP
.nf
struct visitor {
  template<typename MemberType>
  void operator()( MemberType& m );

  template<typename MemberType>
  void operator()( const MemberType& m );
};

.fi
.PP
 template<typename a='void,' typename='' b='void,typename' c='void,' typename='' d='void'> struct tuple { tuple(){} enum size_enum { size = 4 };
.PP
template<typename AA, typename BB, typename CC, typename DD> tuple( AA&& aa, BB&& bb, CC&& cc, DD&& dd ) :a( fc::forward<AA>(aa) ), b( fc::forward<BB>(bb) ), c( fc::forward<CC>(cc) ), d( fc::forward<DD>(dd) ) {}
.PP
template<typename V> void visit( V&& v ) { v(a); v(b); v(c); v(d); } template<typename V> void visit( V&& v )const { v(a); v(b); v(c); v(d); }
.PP
\fBA\fP a; \fBB\fP b; \fBC\fP c; \fBD\fP d; }; 

.SH "Author"
.PP 
Generated automatically by Doxygen for AcuteAngleChain from the source code\&.
