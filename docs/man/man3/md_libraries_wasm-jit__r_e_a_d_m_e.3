.TH "md_libraries_wasm-jit__r_e_a_d_m_e" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_libraries_wasm-jit__r_e_a_d_m_e \- README 
\fC\fP
.PP
Primary repo: https://github.com/AndrewScheidecker/WAVM
.PP
.SH "Overview"
.PP
.PP
This is a standalone VM for WebAssembly\&. It can load both the standard binary format, and the text format defined by the \fCWebAssembly reference interpreter\fP\&. For the text format, it can load both the standard stack machine syntax and the old-fashioned AST syntax used by the reference interpreter, and all of the testing commands\&.
.PP
.SH "Building and running it"
.PP
.PP
To build it, you'll need CMake and \fCLLVM 4\&.0\fP\&. If CMake can't find your LLVM directory, you can manually give it the location in the LLVM_DIR CMake configuration variable\&. Note that on Windows, you must compile LLVM from source, and manually point the LLVM_DIR configuration variable at \fC<LLVM build directory>\\lib\\cmake\\llvm\fP\&.
.PP
.SS "Building WAVM on Windows"
.PP
\fB1\&.) Install the \fCVisual Studio C++ Build Tools for Visual Studio 2015 or 2017\fP\fP
.PP
Take note of which version you have installed:
.PP
.IP "\(bu" 2
If using Visual Studio 2015, use \fC-G'Visual Studio 14 Win64'\fP for the \fC<VS Generator Directive>\fP placeholder below
.IP "\(bu" 2
If using Visual Studio 2017, use \fC-G'Visual Studio 15 Win64'\fP for the \fC<VS Generator Directive>\fP placeholder below
.PP
.PP
\fB2\&.) Build LLVM x64 on Windows with Visual Studio\fP
.PP
Create an llvm_build directory, navigate to that directory and run: 
.PP
.nf
cmake -Thost=x64 <VS Generator Directive> -DCMAKE_INSTALL_PREFIX=<desired install path for LLVM> <path to LLVM source>

.fi
.PP
.PP
Open the generated LLVM\&.sln locateed within the 'llvm_build' directory in Visual Studio and build the 'INSTALL' Project
.PP
The output binaries should be located in \fC<desired install path for LLVM>\fP
.PP
\fB3\&.) Build WAVM x64 on Windows with Visual Studio against LLVM x64\fP
.PP
Create a wavm_build directory, navigate to that directory and run: 
.PP
.nf
cmake -Thost=x64 <VS Generator Directive> -DLLVM_DIR=<LLVM build directory>\lib\cmake\llvm <path to WAVM source>

.fi
.PP
.PP
Open the generated WAVM\&.sln located within the 'wavm_build' directory in Visual Studio and build the 'ALL_BUILD' Project
.PP
The output binaries should be located in \fCwavm_build\\bin\fP
.PP
.SH "Usage"
.PP
.PP
I've tested it on Windows with Visual C++ 2015/2017, Linux with GCC and clang, and MacOS with Xcode/clang\&. Travis CI is testing Linux/GCC, Linux/clang, and OSX/clang\&.
.PP
The primary executable is \fCwavm\fP: 
.PP
.nf
Usage: wavm [switches] [programfile] [--] [arguments]
  in\&.wast|in\&.wasm       Specify program file (\&.wast/\&.wasm)
  -f|--function name        Specify function name to run in module rather than main
  -c|--check            Exit after checking that the program is valid
  -d|--debug            Write additional debug information to stdout
  --                Stop parsing arguments

.fi
.PP
.PP
\fCwavm\fP will load a WebAssembly file and call \fCmain\fP (or a specified function)\&. Example programs to try without changing any code include those found in the Test/wast and Test/spec directory such as the following:
.PP
.PP
.nf
wavm Test/wast/helloworld\&.wast
wavm Test/Benchmark/Benchmark\&.wast
wavm Test/zlib/zlib\&.wast
.fi
.PP
.PP
WebAssembly programs that export a main function with the standard parameters will be passed in the command line arguments\&. If the same main function returns a i32 type it will become the exit code\&. WAVM supports Emscripten's defined I/O functions so programs can read from stdin and write to stdout and stderr\&. See \fCecho\&.wast\fP for an example of a program that echos the command line arguments back out through stdout\&.
.PP
There are a few additional executables that can be used to assemble the WAST file into a binary:
.PP
.PP
.nf
Assemble in\&.wast out\&.wasm
.fi
.PP
.PP
Disassemble a binary into a WAST file:
.PP
.PP
.nf
Disassemble in\&.wasm out\&.wast
.fi
.PP
.PP
and to execute a test script defined by a WAST file (see the \fCTest/spec directory\fP for examples of the syntax):
.PP
.PP
.nf
Test in\&.wast
.fi
.PP
.PP
.SH "Architecture"
.PP
.PP
.SS "IR"
.PP
The \fCIR\fP (Intermediate Representation) is the glue that the WAST parser, the WASM serialization, and the Runtime communicate through\&. It closely mirrors the semantics of the WebAssembly binary format, but is easier to work with in memory\&.
.PP
.SS "Parsing"
.PP
Parsing the WebAssembly text format uses a table-driven deterministic finite automaton to scan the input string for tokens\&. The tables are generated from a set of tokens that match literal strings, and a set of tokens that match regular expressions\&. The parser is a standard recursive descent parser\&.
.PP
.SS "Runtime"
.PP
The \fCRuntime\fP is the primary consumer of the byte code\&. It provides an \fCAPI\fP for instantiating WebAssembly modules and calling functions exported from them\&. To instantiate a module, it \fCinitializes the module's runtime environment\fP (globals, memory objects, and table objects), \fCtranslates the byte code into LLVM IR\fP, and \fCuses LLVM to generate machine code\fP for the module's functions\&.
.PP
.SH "License"
.PP
.PP
WAVM is provided under the terms of [LICENSE](LICENSE)\&. 
