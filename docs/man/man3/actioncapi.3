.TH "actioncapi" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
actioncapi \- Define API for querying action properties\&.  

.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "uint32_t \fBread_action_data\fP (void *msg, uint32_t len)"
.br
.RI "Copy current action data to the specified location\&. "
.ti -1c
.RI "uint32_t \fBaction_data_size\fP ()"
.br
.RI "Get the length of current action's data field\&. "
.ti -1c
.RI "void \fBrequire_recipient\fP (account_name name)"
.br
.RI "Add the specified account to set of accounts to be notified\&. "
.ti -1c
.RI "void \fBrequire_auth\fP (account_name name)"
.br
.RI "Verify specified account exists in the set of provided auths\&. "
.ti -1c
.RI "bool \fBhas_auth\fP (account_name name)"
.br
.ti -1c
.RI "void \fBrequire_auth2\fP (account_name name, permission_name permission)"
.br
.RI "Verify specified account exists in the set of provided auths\&. "
.ti -1c
.RI "void \fBsend_inline\fP (char *serialized_action, size_t size)"
.br
.ti -1c
.RI "void \fBsend_context_free_inline\fP (char *serialized_action, size_t size)"
.br
.ti -1c
.RI "void \fBrequire_write_lock\fP (account_name name)"
.br
.RI "Verifies that \fBname\fP exists in the set of write locks held\&. "
.ti -1c
.RI "void \fBrequire_read_lock\fP (account_name name)"
.br
.RI "Verifies that \fBname\fP exists in the set of read locks held\&. "
.ti -1c
.RI "time \fBpublication_time\fP ()"
.br
.RI "Get the publication time\&. "
.ti -1c
.RI "account_name \fBcurrent_sender\fP ()"
.br
.RI "Get the sender of the action\&. "
.ti -1c
.RI "account_name \fBcurrent_receiver\fP ()"
.br
.RI "Get the current receiver of the action\&. "
.in -1c
.SH "Detailed Description"
.PP 
Define API for querying action properties\&. 

\fBA\fP AAC\&.IO action has the following abstract structure:
.PP
.PP
.nf
struct action {
  scope_name scope; // the contract defining the primary code to execute for code/type
  action_name name; // the action to be taken
  permission_level[] authorization; // the accounts and permission levels provided
  bytes data; // opaque data processed by code
};
.fi
.PP
.PP
This API enables your contract to inspect the fields on the current action and act accordingly\&.
.PP
Example: 
.PP
.nf
// Assume this action is used for the following examples:
// {
//  "code": "aac",
//  "type": "transfer",
//  "authorization": [{ "account": "inita", "permission": "active" }],
//  "data": {
//    "from": "inita",
//    "to": "initb",
//    "amount": 1000
//  }
// }

char buffer[128];
uint32_t total = read_action(buffer, 5); // buffer contains the content of the action up to 5 bytes
print(total); // Output: 5

uint32_t msgsize = action_size();
print(msgsize); // Output: size of the above action's data field

require_recipient(N(initc)); // initc account will be notified for this action

require_auth(N(inita)); // Do nothing since inita exists in the auth list
require_auth(N(initb)); // Throws an exception

print(now()); // Output: timestamp of last accepted block

.fi
.PP
 
.SH "Function Documentation"
.PP 
.SS "uint32_t action_data_size ()"

.PP
Get the length of current action's data field\&. Get the length of the current action's data field This method is useful for dynamically sized actions 
.PP
\fBReturns:\fP
.RS 4
the length of the current action's data field 
.RE
.PP

.SS "account_name current_receiver ()"

.PP
Get the current receiver of the action\&. Get the current receiver of the action 
.PP
\fBReturns:\fP
.RS 4
the account which specifies the current receiver of the action 
.RE
.PP

.SS "account_name current_sender ()"

.PP
Get the sender of the action\&. Get the account which specifies the sender of the action 
.PP
\fBReturns:\fP
.RS 4
the account which specifies the sender of the action 
.RE
.PP

.SS "time publication_time ()"

.PP
Get the publication time\&. Returns the time in seconds from 1970 of the publication_time 
.PP
\fBReturns:\fP
.RS 4
the time in seconds from 1970 of the publication_time 
.RE
.PP

.SS "uint32_t read_action_data (void * msg, uint32_t len)"

.PP
Copy current action data to the specified location\&. Copy up to \fBlen\fP bytes of current action data to the specified location 
.PP
\fBParameters:\fP
.RS 4
\fImsg\fP - a pointer where up to \fBlen\fP bytes of the current action data will be copied 
.br
\fIlen\fP - len of the current action data to be copied 
.RE
.PP
\fBReturns:\fP
.RS 4
the number of bytes copied to msg 
.RE
.PP

.SS "void require_auth (account_name name)"

.PP
Verify specified account exists in the set of provided auths\&. Verifies that \fBname\fP exists in the set of provided auths on a action\&. \fBThrows\fP if not found 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP - name of the account to be verified 
.RE
.PP

.SS "void require_auth2 (account_name name, permission_name permission)"

.PP
Verify specified account exists in the set of provided auths\&. Verifies that \fBname\fP exists in the set of provided auths on a action\&. \fBThrows\fP if not found 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP - name of the account to be verified 
.br
\fIpermission\fP - permission level to be verified 
.RE
.PP

.SS "void require_read_lock (account_name name)"

.PP
Verifies that \fBname\fP exists in the set of read locks held\&. Verifies that \fBname\fP exists in the set of read locks held on a action\&. \fBThrows\fP if not found 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP - name of the account to be verified 
.RE
.PP

.SS "void require_recipient (account_name name)"

.PP
Add the specified account to set of accounts to be notified\&. Add the specified account to set of accounts to be notified 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP - name of the account to be verified 
.RE
.PP

.SS "void require_write_lock (account_name name)"

.PP
Verifies that \fBname\fP exists in the set of write locks held\&. Verifies that \fBname\fP exists in the set of write locks held on a action\&. \fBThrows\fP if not found 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP - name of the account to be verified 
.RE
.PP

.SS "void send_context_free_inline (char * serialized_action, size_t size)"
Send an inline context free action in the context of this action's parent transaction 
.PP
\fBParameters:\fP
.RS 4
\fIserialized_action\fP - serialized action 
.br
\fIsize\fP - size of serialized action in bytes 
.RE
.PP

.SS "void send_inline (char * serialized_action, size_t size)"
Send an inline action in the context of this action's parent transaction 
.PP
\fBParameters:\fP
.RS 4
\fIserialized_action\fP - serialized action 
.br
\fIsize\fP - size of serialized action in bytes 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for AcuteAngleChain from the source code\&.
