.TH "testbuf< CharT >" 3 "Sun Jun 3 2018" "AcuteAngleChain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
testbuf< CharT >
.SH SYNOPSIS
.br
.PP
.PP
Inherits basic_stringbuf< CharT >, basic_stringbuf< CharT >, basic_stringbuf< CharT >, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, streambuf, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, basic_streambuf< CharT >, and basic_streambuf< CharT >\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_string< CharT > \fBstring_type\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_streambuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_stringbuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_stringbuf< CharT > \fBbase\fP"
.br
.ti -1c
.RI "typedef std::basic_stringbuf< CharT > \fBbase\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const std::basic_string< CharT > &str)"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const std::basic_string< CharT > &str)"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const std::basic_string< CharT > &str)"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const string_type &str)"
.br
.ti -1c
.RI "CharT * \fBeback\fP () const"
.br
.ti -1c
.RI "CharT * \fBgptr\fP () const"
.br
.ti -1c
.RI "CharT * \fBegptr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const std::basic_string< CharT > &str)"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "std::basic_string< CharT > \fBstr\fP () const"
.br
.ti -1c
.RI "\fBtestbuf\fP (const std::basic_string< CharT > &str, std::ios_base::openmode which=std::ios_base::in|std::ios_base::out)"
.br
.ti -1c
.RI "base::int_type \fBoverflow\fP (typename base::int_type c=base::traits_type::eof())"
.br
.ti -1c
.RI "void \fBpbump\fP (int n)"
.br
.ti -1c
.RI "\fBtestbuf\fP (const std::basic_string< CharT > &str, std::ios_base::openmode which=std::ios_base::in|std::ios_base::out)"
.br
.ti -1c
.RI "base::int_type \fBpbackfail\fP (typename base::int_type c=base::traits_type::eof())"
.br
.ti -1c
.RI "void \fBpbump\fP (int n)"
.br
.ti -1c
.RI "\fBtestbuf\fP (const std::basic_string< CharT > &str)"
.br
.ti -1c
.RI "base::int_type \fBunderflow\fP ()"
.br
.ti -1c
.RI "void \fBpbump\fP (int n)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual int \fBsync\fP ()"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "base::pos_type \fBseekpos\fP (typename base::pos_type sp, std::ios_base::openmode which)"
.br
.ti -1c
.RI "base::pos_type \fBseekoff\fP (typename base::off_type off, std::ios_base::seekdir, std::ios_base::openmode which)"
.br
.ti -1c
.RI "int \fBsync\fP ()"
.br
.ti -1c
.RI "base::pos_type \fBseekoff\fP (typename base::off_type off, std::ios_base::seekdir way, std::ios_base::openmode which)"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual int \fBsync\fP ()"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual int \fBsync\fP ()"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "base::pos_type \fBseekpos\fP (typename base::pos_type sp, std::ios_base::openmode which)"
.br
.ti -1c
.RI "base::pos_type \fBseekoff\fP (typename base::off_type off, std::ios_base::seekdir way, std::ios_base::openmode which)"
.br
.ti -1c
.RI "base::pos_type \fBseekoff\fP (typename base::off_type off, std::ios_base::seekdir way, std::ios_base::openmode which)"
.br
.ti -1c
.RI "virtual int \fBsync\fP ()"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.ti -1c
.RI "virtual base::int_type \fBoverflow\fP (typename base::int_type __c=base::traits_type::eof())"
.br
.in -1c

.SH "Author"
.PP 
Generated automatically by Doxygen for AcuteAngleChain from the source code\&.
