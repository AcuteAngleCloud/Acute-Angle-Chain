.TH "aacio::fixed_key< Size >" 3 "Sun Jun 3 2018" "Acute-Angle-Chain" \" -*- nroff -*-
.ad l
.nh
.SH NAME
aacio::fixed_key< Size >
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef uint128_t \fBword_t\fP"
.br
.ti -1c
.RI "typedef uint128_t \fBword_t\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBfixed_key\fP ()"
.br
.RI "Default constructor to \fBfixed_key\fP object\&. "
.ti -1c
.RI "\fBfixed_key\fP (const std::array< word_t, num_words()> &arr)"
.br
.RI "Constructor to \fBfixed_key\fP object from std::array of num_words() words\&. "
.ti -1c
.RI "\fBfixed_key\fP ()"
.br
.RI "Default constructor to \fBfixed_key\fP object\&. "
.ti -1c
.RI "\fBfixed_key\fP (const std::array< word_t, num_words()> &arr)"
.br
.RI "Constructor to \fBfixed_key\fP object from std::array of num_words() words\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static constexpr size_t \fBnum_words\fP ()"
.br
.ti -1c
.RI "static constexpr size_t \fBpadded_bytes\fP ()"
.br
.ti -1c
.RI "static constexpr size_t \fBnum_words\fP ()"
.br
.ti -1c
.RI "static constexpr size_t \fBpadded_bytes\fP ()"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "template<typename Word , size_t NumWords> \fBarr_itr\fP = num_sub_words"
.br
.ti -1c
.RI "return \fBarr\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "bool \fBoperator==\fP (const \fBfixed_key\fP< Size > &c1, const \fBfixed_key\fP< Size > &c2)"
.br
.RI "Compares two \fBfixed_key\fP variables c1 and c2\&. "
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBfixed_key\fP< Size > &c1, const \fBfixed_key\fP< Size > &c2)"
.br
.RI "Compares two \fBfixed_key\fP variables c1 and c2\&. "
.ti -1c
.RI "bool \fBoperator>\fP (const \fBfixed_key\fP< Size > &c1, const \fBfixed_key\fP< Size > &c2)"
.br
.RI "Compares two \fBfixed_key\fP variables c1 and c2\&. "
.ti -1c
.RI "bool \fBoperator<\fP (const \fBfixed_key\fP< Size > &c1, const \fBfixed_key\fP< Size > &c2)"
.br
.RI "Compares two \fBfixed_key\fP variables c1 and c2\&. "
.ti -1c
.RI "bool \fBoperator==\fP (const \fBfixed_key\fP< Size > &c1, const \fBfixed_key\fP< Size > &c2)"
.br
.RI "Compares two \fBfixed_key\fP variables c1 and c2\&. "
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBfixed_key\fP< Size > &c1, const \fBfixed_key\fP< Size > &c2)"
.br
.RI "Compares two \fBfixed_key\fP variables c1 and c2\&. "
.ti -1c
.RI "bool \fBoperator>\fP (const \fBfixed_key\fP< Size > &c1, const \fBfixed_key\fP< Size > &c2)"
.br
.RI "Compares two \fBfixed_key\fP variables c1 and c2\&. "
.ti -1c
.RI "bool \fBoperator<\fP (const \fBfixed_key\fP< Size > &c1, const \fBfixed_key\fP< Size > &c2)"
.br
.RI "Compares two \fBfixed_key\fP variables c1 and c2\&. "
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<size_t Size> \fBaacio::fixed_key\fP< Size >::\fBfixed_key\fP ()\fC [inline]\fP"

.PP
Default constructor to \fBfixed_key\fP object\&. Default constructor to \fBfixed_key\fP object which initializes all bytes to zero 
.SS "template<size_t Size> \fBaacio::fixed_key\fP< Size >::\fBfixed_key\fP (const std::array< word_t, num_words()> & arr)\fC [inline]\fP"

.PP
Constructor to \fBfixed_key\fP object from std::array of num_words() words\&. Constructor to \fBfixed_key\fP object from std::array of num_words() words 
.PP
\fBParameters:\fP
.RS 4
\fIarr\fP data 
.RE
.PP

.SS "template<size_t Size> \fBaacio::fixed_key\fP< Size >::\fBfixed_key\fP ()\fC [inline]\fP"

.PP
Default constructor to \fBfixed_key\fP object\&. Default constructor to \fBfixed_key\fP object which initializes all bytes to zero 
.SS "template<size_t Size> \fBaacio::fixed_key\fP< Size >::\fBfixed_key\fP (const std::array< word_t, num_words()> & arr)\fC [inline]\fP"

.PP
Constructor to \fBfixed_key\fP object from std::array of num_words() words\&. Constructor to \fBfixed_key\fP object from std::array of num_words() words 
.PP
\fBParameters:\fP
.RS 4
\fIarr\fP data 
.RE
.PP

.SH "Friends And Related Function Documentation"
.PP 
.SS "template<size_t Size> bool operator!= (const \fBfixed_key\fP< Size > & c1, const \fBfixed_key\fP< Size > & c2)\fC [friend]\fP"

.PP
Compares two \fBfixed_key\fP variables c1 and c2\&. Lexicographically compares two \fBfixed_key\fP variables c1 and c2 
.PP
\fBReturns:\fP
.RS 4
if c1 != c2, return true, otherwise false 
.RE
.PP

.SS "template<size_t Size> bool operator!= (const \fBfixed_key\fP< Size > & c1, const \fBfixed_key\fP< Size > & c2)\fC [friend]\fP"

.PP
Compares two \fBfixed_key\fP variables c1 and c2\&. Lexicographically compares two \fBfixed_key\fP variables c1 and c2 
.PP
\fBReturns:\fP
.RS 4
if c1 != c2, return true, otherwise false 
.RE
.PP

.SS "template<size_t Size> bool operator< (const \fBfixed_key\fP< Size > & c1, const \fBfixed_key\fP< Size > & c2)\fC [friend]\fP"

.PP
Compares two \fBfixed_key\fP variables c1 and c2\&. Lexicographically compares two \fBfixed_key\fP variables c1 and c2 
.PP
\fBReturns:\fP
.RS 4
if c1 < c2, return true, otherwise false 
.RE
.PP

.SS "template<size_t Size> bool operator< (const \fBfixed_key\fP< Size > & c1, const \fBfixed_key\fP< Size > & c2)\fC [friend]\fP"

.PP
Compares two \fBfixed_key\fP variables c1 and c2\&. Lexicographically compares two \fBfixed_key\fP variables c1 and c2 
.PP
\fBReturns:\fP
.RS 4
if c1 < c2, return true, otherwise false 
.RE
.PP

.SS "template<size_t Size> bool operator== (const \fBfixed_key\fP< Size > & c1, const \fBfixed_key\fP< Size > & c2)\fC [friend]\fP"

.PP
Compares two \fBfixed_key\fP variables c1 and c2\&. Lexicographically compares two \fBfixed_key\fP variables c1 and c2 
.PP
\fBReturns:\fP
.RS 4
if c1 == c2, return true, otherwise false 
.RE
.PP

.SS "template<size_t Size> bool operator== (const \fBfixed_key\fP< Size > & c1, const \fBfixed_key\fP< Size > & c2)\fC [friend]\fP"

.PP
Compares two \fBfixed_key\fP variables c1 and c2\&. Lexicographically compares two \fBfixed_key\fP variables c1 and c2 
.PP
\fBReturns:\fP
.RS 4
if c1 == c2, return true, otherwise false 
.RE
.PP

.SS "template<size_t Size> bool operator> (const \fBfixed_key\fP< Size > & c1, const \fBfixed_key\fP< Size > & c2)\fC [friend]\fP"

.PP
Compares two \fBfixed_key\fP variables c1 and c2\&. Lexicographically compares two \fBfixed_key\fP variables c1 and c2 
.PP
\fBReturns:\fP
.RS 4
if c1 > c2, return true, otherwise false 
.RE
.PP

.SS "template<size_t Size> bool operator> (const \fBfixed_key\fP< Size > & c1, const \fBfixed_key\fP< Size > & c2)\fC [friend]\fP"

.PP
Compares two \fBfixed_key\fP variables c1 and c2\&. Lexicographically compares two \fBfixed_key\fP variables c1 and c2 
.PP
\fBReturns:\fP
.RS 4
if c1 > c2, return true, otherwise false 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Acute-Angle-Chain from the source code\&.
